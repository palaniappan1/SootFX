{
  "version": "6",
  "methods": [
    {
      "name": "java.io.FileWriter.<init>",
      "parameters": [],
      "signature": "void java.io.FileWriter.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.FileWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.debug",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.debug(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.monitor.FileEntry.refresh",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.monitor.FileEntry.refresh(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.monitor.FileEntry",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.subSequence",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.lang.CharSequence java.lang.String.subSequence(int, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.CharSequence",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.warn",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.warn(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyReader.read",
      "parameters": [
        "java.nio.CharBuffer"
      ],
      "signature": "int org.apache.commons.io.input.ProxyReader.read(java.nio.CharBuffer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.util.EntityUtils.toByteArray",
      "parameters": [
        "org.apache.http.HttpEntity"
      ],
      "signature": "byte[] org.apache.http.util.EntityUtils.toByteArray(org.apache.http.HttpEntity)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.util.EntityUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringUtils.toEncodedString",
      "parameters": [
        "byte[]",
        "java.nio.charset.Charset"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringUtils.toEncodedString(byte[], java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.StringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.SearchControls.setReturningAttributes",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "void javax.naming.directory.SearchControls.setReturningAttributes(java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Specifies the attributes that will be returned as part of the search. null indicates that all attributes will be returned. An empty array indicates no attributes are returned.",
        "class": "This class encapsulates factors that determine scope of search and what gets returned as a result of the search. A SearchControls instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single SearchControls instance should lock the object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "io.vertx.sqlclient.SqlConnection.prepare",
      "parameters": [
        "java.lang.String",
        "io.vertx.core.Handler"
      ],
      "signature": "io.vertx.sqlclient.SqlConnection io.vertx.sqlclient.SqlConnection.prepare(java.lang.String, io.vertx.core.Handler)",
      "framework": "",
      "link": "",
      "comment": "io.vertx.sqlclient.SqlConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "io.vertx.sqlclient.SqlConnection",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "vertx-sql-client-4.2.7.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.mgt.DefaultSecurityManager.logout",
      "parameters": [
        "org.apache.shiro.subject.Subject"
      ],
      "signature": "void org.apache.shiro.mgt.DefaultSecurityManager.logout(org.apache.shiro.subject.Subject)",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.6/apidocs/org/apache/shiro/mgt/DefaultSecurityManager.html",
      "comment": "Logout the specified subject.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Logs out the specified Subject from the system. Note that most application developers should not call this method unless they have a good reason for doing so. The preferred way to logout a Subject is to call {@link org.apache.shiro.subject.Subject#logout Subject.logout()}, not the {@code SecurityManager} directly. Framework developers on the other hand might find calling this method directly useful in certain cases.",
        "class": "The Shiro framework's default concrete implementation of the {@link SecurityManager} interface, based around a collection of {@link org.apache.shiro.realm.Realm}s. This implementation delegates its authentication, authorization, and session operations to wrapped {@link Authenticator}, {@link Authorizer}, and {@link org.apache.shiro.session.mgt.SessionManager SessionManager} instances respectively via superclass implementation. To greatly reduce and simplify configuration, this implementation (and its superclasses) will create suitable defaults for all of its required dependencies, except the required one or more {@link Realm Realm}s. Because {@code Realm} implementations usually interact with an application's data model, they are almost always application specific; you will want to specify at least one custom {@code Realm} implementation that 'knows' about your application's data/security model (via {@link #setRealm} or one of the overloaded constructors). All other attributes in this class hierarchy will have suitable defaults for most enterprise applications. RememberMe notice: This class supports the ability to configure a {@link #setRememberMeManager RememberMeManager} for {@code RememberMe} identity services for login/logout, BUT, a default instance will not be created for this attribute at startup. Because RememberMe services are inherently client tier-specific and therefore aplication-dependent, if you want {@code RememberMe} services enabled, you will have to specify an instance yourself via the {@link #setRememberMeManager(RememberMeManager) setRememberMeManager} mutator. However if you're reading this JavaDoc with the expectation of operating in a Web environment, take a look at the {@code org.apache.shiro.web.DefaultWebSecurityManager} implementation, which does support {@code RememberMe} services by default at startup."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPath.compile",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.xml.xpath.XPathExpression javax.xml.xpath.XPath.compile(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.xpath.XPath",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.xml.xpath.XPathExpression",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.PostbackResult.doExecute",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.ActionInvocation"
      ],
      "signature": "void org.apache.struts2.result.PostbackResult.doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.PostbackResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.bidimap.TreeBidiMap.hashCode",
      "parameters": [],
      "signature": "int org.apache.commons.collections.bidimap.TreeBidiMap.hashCode()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.bidimap.TreeBidiMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.ObjectUtils.identityToString",
      "parameters": [
        "java.lang.StringBuilder",
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuilder, java.lang.Object)",
      "framework": "apache",
      "link": "",
      "comment": "Counter example for sanitizer",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Appends the toString that would be produced by {@code Object} if a class did not override toString itself. {@code null} will throw a NullPointerException for either of the two parameters.  ObjectUtils.identityToString(builder, \"\")            = builder.append(\"java.lang.String@1e23\"\n ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(\"java.lang.Boolean@7fa\"\n ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append(\"java.lang.Boolean@7fa\")",
        "class": "Operations on {@code Object}. This class tries to handle {@code null} input gracefully. An exception will generally not be thrown for a {@code null} input. Each method documents its behaviour in more detail. #ThreadSafe#"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.l7dlog",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.String",
        "java.lang.Object[]",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Object[], java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getRequestURL",
      "parameters": [],
      "signature": "java.lang.StringBuffer javax.servlet.http.HttpServletRequestWrapper.getRequestURL()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuffer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.setStatus",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.setStatus(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponse",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.mgt.DefaultSecurityManager.login",
      "parameters": [
        "org.apache.shiro.subject.Subject",
        "org.apache.shiro.authc.AuthenticationToken"
      ],
      "signature": "org.apache.shiro.subject.Subject org.apache.shiro.mgt.DefaultSecurityManager.login(org.apache.shiro.subject.Subject, org.apache.shiro.authc.AuthenticationToken)",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.6/apidocs/org/apache/shiro/mgt/DefaultSecurityManager.html",
      "comment": "Login the specified subject with the tocken and return the subject.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "First authenticates the {@code AuthenticationToken} argument, and if successful, constructs a {@code Subject} instance representing the authenticated account's identity. Once constructed, the {@code Subject} instance is then {@link #bind bound} to the application for subsequent access before being returned to the caller.",
        "class": "The Shiro framework's default concrete implementation of the {@link SecurityManager} interface, based around a collection of {@link org.apache.shiro.realm.Realm}s. This implementation delegates its authentication, authorization, and session operations to wrapped {@link Authenticator}, {@link Authorizer}, and {@link org.apache.shiro.session.mgt.SessionManager SessionManager} instances respectively via superclass implementation. To greatly reduce and simplify configuration, this implementation (and its superclasses) will create suitable defaults for all of its required dependencies, except the required one or more {@link Realm Realm}s. Because {@code Realm} implementations usually interact with an application's data model, they are almost always application specific; you will want to specify at least one custom {@code Realm} implementation that 'knows' about your application's data/security model (via {@link #setRealm} or one of the overloaded constructors). All other attributes in this class hierarchy will have suitable defaults for most enterprise applications. RememberMe notice: This class supports the ability to configure a {@link #setRememberMeManager RememberMeManager} for {@code RememberMe} identity services for login/logout, BUT, a default instance will not be created for this attribute at startup. Because RememberMe services are inherently client tier-specific and therefore aplication-dependent, if you want {@code RememberMe} services enabled, you will have to specify an instance yourself via the {@link #setRememberMeManager(RememberMeManager) setRememberMeManager} mutator. However if you're reading this JavaDoc with the expectation of operating in a Web environment, take a look at the {@code org.apache.shiro.web.DefaultWebSecurityManager} implementation, which does support {@code RememberMe} services by default at startup."
      },"return": "org.apache.shiro.subject.Subject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.updateWithOnConflict",
      "parameters": [
        "java.lang.String",
        "android.content.ContentValues",
        "java.lang.String",
        "java.lang.String[]",
        "int"
      ],
      "signature": "int android.database.sqlite.SQLiteDatabase.updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.jaxp.XPathImpl.compile",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.xml.xpath.XPathExpression org.apache.xpath.jaxp.XPathImpl.compile(java.lang.String)",
      "framework": "apache",
      "link": "https://xml.apache.org/xalan-j/apidocs/org/apache/xpath/jaxp/XPathImpl.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Compile an XPath expression for later evaluation. If expression contains any {@link XPathFunction}s, they must be available via the {@link XPathFunctionResolver}. An {@link XPathExpressionException} will be thrown if the XPathFunction cannot be resovled with the XPathFunctionResolver. If expression is null, a NullPointerException is thrown.",
        "class": "The XPathImpl class provides implementation for the methods defined in javax.xml.xpath.XPath interface. This provide simple access to the results of an XPath expression."
      },"return": "javax.xml.xpath.XPathExpression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.Chars.getUpperCaseHex",
      "parameters": [
        "int"
      ],
      "signature": "char org.apache.logging.log4j.util.Chars.getUpperCaseHex(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.Chars",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "char",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.trace",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.trace(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.persistence.EntityManager.createQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.persistence.Query javax.persistence.EntityManager.createQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.persistence.EntityManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.persistence.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.persistence.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectNodeList",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.NodeList org.apache.xpath.XPathAPI.selectNodeList(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrSubstitutor.replace",
      "parameters": [
        "char[]"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.text.StrSubstitutor.replace(char[])",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/text/StrSubstitutor.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method.",
        "class": "Substitutes variables within a string by values. This class takes a piece of text and substitutes all the variables within it. The default definition of a variable is {@code ${variableName}}. The prefix and suffix can be changed via constructors and set methods. Variable values are typically resolved from a map, but could also be resolved from system properties, or by supplying a custom variable resolver. The simplest example is to use this class to replace Java System properties. For example:  StrSubstitutor.replaceSystemProperties(\n      \"You are running with java.version = ${java.version} and os.name = ${os.name}.\");\n Typical usage of this class follows the following pattern: First an instance is created and initialized with the map that contains the values for the available variables. If a prefix and/or suffix for variables should be used other than the default ones, the appropriate settings can be performed. After that the {@code replace()} method can be called passing in the source text for interpolation. In the returned text all variable references (as long as their values are known) will be resolved. The following example demonstrates this:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog.\n Also, this class allows to set a default value for unresolved variables. The default value for a variable can be appended to the variable name after the variable default value delimiter. The default value of the variable default value delimiter is ':-', as in bash and other *nix shells, as those are arguably where the default ${} delimiter set originated. The variable default value delimiter can be manually set by calling {@link #setValueDelimiterMatcher(StrMatcher)}, {@link #setValueDelimiter(char)} or {@link #setValueDelimiter(String)}. The following shows an example with variable default value settings:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}. ${undefined.number:-1234567890}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog. 1234567890.\n In addition to this usage pattern there are some static convenience methods that cover the most common use cases. These methods can be used without the need of manually creating an instance. However if multiple replace operations are to be performed, creating and reusing an instance of this class will be more efficient. Variable replacement works in a recursive way. Thus, if a variable value contains a variable then that variable will also be replaced. Cyclic replacements are detected and will cause an exception to be thrown. Sometimes the interpolation's result must contain a variable prefix. As an example take the following source text:    The variable ${${name}} must be used.\n Here only the variable's name referred to in the text should be replaced resulting in the text (assuming that the value of the {@code name} variable is {@code x}):    The variable ${x} must be used.\n To achieve this effect there are two possibilities: Either set a different prefix and suffix for variables which do not conflict with the result text you want to produce. The other possibility is to use the escape character, by default '$'. If this character is placed before a variable reference, this reference is ignored and won't be replaced. For example:    The variable $${${name}} must be used.\n In some complex scenarios you might even want to perform substitution in the names of variables, for instance  ${jre-${java.specification.version}}\n {@code StrSubstitutor} supports this recursive substitution in variable names, but it has to be enabled explicitly by setting the {@link #setEnableSubstitutionInVariables(boolean) enableSubstitutionInVariables} property to true. This class is not thread safe."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getRow",
      "parameters": [],
      "signature": "int com.mysql.jdbc.ResultSetImpl.getRow()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.StringFormattedMessage.getFormattedMessage",
      "parameters": [],
      "signature": "java.lang.String org.apache.logging.log4j.message.StringFormattedMessage.getFormattedMessage()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.StringFormattedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.SerializableEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.SerializableEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.SerializableEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.EnglishEnums.valueOf",
      "parameters": [
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Enum"
      ],
      "signature": "java.lang.Enum org.apache.logging.log4j.util.EnglishEnums.valueOf(java.lang.Class, java.lang.String, java.lang.Enum)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.EnglishEnums",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Enum",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "char[]",
        "java.io.OutputStream",
        "java.nio.charset.Charset"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream, java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.Entities.unescape",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.Entities.unescape(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.Entities",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.setDouble",
      "parameters": [
        "int",
        "double"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.setDouble(int, double)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.GenericServlet.getInitParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.GenericServlet.getInitParameterNames()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the names of the servlet's initialization parameters as an Enumeration of String objects, or an empty Enumeration if the servlet has no initialization parameters. See {@link ServletConfig#getInitParameterNames}. This method is supplied for convenience. It gets the parameter names from the servlet's ServletConfig object.",
        "class": "Defines a generic, protocol-independent servlet. To write an HTTP servlet for use on the Web, extend {@link javax.servlet.http.HttpServlet} instead. GenericServlet implements the Servlet and ServletConfig interfaces. GenericServlet may be directly extended by a servlet, although it's more common to extend a protocol-specific subclass such as HttpServlet. GenericServlet makes writing servlets easier. It provides simple versions of the lifecycle methods init and destroy and of the methods in the ServletConfig interface. GenericServlet also implements the log method, declared in the ServletContext interface. To write a generic servlet, you need only override the abstract service method."
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.crypto.codec.Utf8.encode",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "byte[] org.springframework.security.crypto.codec.Utf8.encode(java.lang.CharSequence)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/crypto/codec/Utf8.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Get the bytes of the String in UTF-8 encoded form.",
        "class": "UTF-8 Charset encoder/decoder. For internal use only."
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.debug",
      "parameters": [
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.debug(org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.Message.setSubject",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.mail.Message.setSubject(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.isWrapperFor",
      "parameters": [
        "java.lang.Class"
      ],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.isWrapperFor(java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jsoup.nodes.Node.after",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.jsoup.nodes.Node org.jsoup.nodes.Node.after(java.lang.String)",
      "framework": "jsoup",
      "link": "https://jsoup.org/apidocs/org/jsoup/nodes/Node.html#before-java.lang.String-",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Insert the specified HTML into the DOM after this node (i.e. as a following sibling).",
        "class": "The base, abstract Node model. Elements, Documents, Comments etc are all Node instances."
      },"return": "org.jsoup.nodes.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.internet.MimeMultipart.stripLinearWhiteSpace",
      "parameters": [
        "byte[]"
      ],
      "signature": "byte[] javax.mail.internet.MimeMultipart.stripLinearWhiteSpace(byte[])",
      "framework": "generaljava",
      "link": "http://docs.oracle.com/javaee/7/api/javax/mail/internet/MimeMultipart.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.digest",
      "parameters": [
        "byte[]"
      ],
      "signature": "byte[] java.security.MessageDigest.digest(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls {@link #update(byte[]) update(input)}, passing the input array to the {@code update} method, then calls {@link #digest() digest()}.",
        "class": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. A MessageDigest object starts out initialized. The data is processed through it using the {@link #update(byte) update} methods. At any point {@link #reset() reset} can be called to reset the digest. Once all the data to be updated has been updated, one of the {@link #digest() digest} methods should be called to complete the hash computation. The {@code digest} method can be called once for a given number of updates. After {@code digest} has been called, the MessageDigest object is reset to its initialized state. Implementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException: {@code\n MessageDigest md = MessageDigest.getInstance(\"SHA\");\n\n try {\n     md.update(toChapter1);\n     MessageDigest tc1 = md.clone();\n     byte[] toChapter1Digest = tc1.digest();\n     md.update(toChapter2);\n     ...etc.\n } catch (CloneNotSupportedException cnse) {\n     throw new DigestException(\"couldn't make digest of partial content\");\n }\n } Note that if a given implementation is not cloneable, it is still possible to compute intermediate digests by instantiating several instances, if the number of digests is known in advance. Note that this class is abstract and extends from {@code MessageDigestSpi} for historical reasons. Application developers should only take notice of the methods defined in this {@code MessageDigest} class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of message digest algorithms. Every implementation of the Java platform is required to support the following standard {@code MessageDigest} algorithms: {@code MD5} {@code SHA-1} {@code SHA-256} These algorithms are described in the MessageDigest section of the Java Cryptography Architecture Standard Algorithm Name Documentation. Consult the release documentation for your implementation to see if any other algorithms are supported."
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getNullCatalogMeansCurrent",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getNullCatalogMeansCurrent()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.DataInputStream.readLine",
      "parameters": [],
      "signature": "java.lang.String java.io.DataInputStream.readLine()",
      "framework": "",
      "link": "",
      "comment": "java.io.DataInputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getQueryString",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getQueryString()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getField",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Field com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getField(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Field",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.velocity.VelocityManager.loadConfiguration",
      "parameters": [
        "javax.servlet.ServletContext"
      ],
      "signature": "java.util.Properties org.apache.struts2.views.velocity.VelocityManager.loadConfiguration(javax.servlet.ServletContext)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.velocity.VelocityManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Properties",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.openConnection",
      "parameters": [
        "java.net.Proxy"
      ],
      "signature": "java.net.URLConnection java.net.URL.openConnection(java.net.Proxy)",
      "framework": "",
      "link": "",
      "comment": "java.net.URL",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE918"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URLConnection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts.action.ActionForward.<init>",
      "parameters": [],
      "signature": "void org.apache.struts.action.ActionForward.<init>()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts.action.ActionForward",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-struts-1.2.4.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.rcp.RemoteAuthenticationProvider.authenticate",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.Authentication org.springframework.security.authentication.rcp.RemoteAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/3.1.8.CI-SNAPSHOT/apidocs/org/springframework/security/authentication/rcp/RemoteAuthenticationProvider.html",
      "comment": "The input object is authenticated and returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs authentication with the same contract as {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)} .",
        "class": "Client-side object which queries a {@link RemoteAuthenticationManager} to validate an authentication request. A new Authentication object is created by this class comprising the request Authentication object's principal, credentials and the GrantedAuthority[]s returned by the RemoteAuthenticationManager. The RemoteAuthenticationManager should not require any special username or password setting on the remoting client proxy factory to execute the call. Instead the entire authentication request must be encapsulated solely within the Authentication request object. In practical terms this means the RemoteAuthenticationManager will not be protected by BASIC or any other HTTP-level authentication. If authentication fails, a RemoteAuthenticationException will be thrown. This exception should be caught and displayed to the user, enabling them to retry with alternative credentials etc."
      },"return": "org.springframework.security.core.Authentication",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.unescapeCsv",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.unescapeCsv(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code String} value for an unescaped CSV column. If the value is enclosed in double quotes, and contains a comma, newline or double quote, then quotes are removed. Any double quote escaped characters (a pair of double quotes) are unescaped to just one double quote. If the value is not enclosed in double quotes, or is and does not contain a comma, newline or double quote, then the String value is returned unchanged. see Wikipedia and RFC 4180.",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.Log4JLogger.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.impl.Log4JLogger.debug(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.Log4JLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.OctalUnescaper.translate",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "java.io.Writer"
      ],
      "signature": "int org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.OctalUnescaper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.File.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Creates a new File instance by converting the given pathname string into an abstract pathname. If the given string is the empty string, then the result is the empty abstract pathname.",
        "class": "An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components: An optional system-dependent prefix string, such as a disk-drive specifier, \"/\" for the UNIX root directory, or \"\\\\\\\\\" for a Microsoft Windows UNC pathname, and A sequence of zero or more string names. The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an empty name sequence. The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields {@link #separator} and {@link #separatorChar} of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking the {@link #getParent} method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any File object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname \"/usr\" is an ancestor of the directory denoted by the pathname \"/usr/local/bin\". The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: For UNIX platforms, the prefix of an absolute pathname is always \"/\". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix \"/\" and an empty name sequence. For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by \":\" and possibly followed by \"\\\\\" if the pathname is absolute. The prefix of a UNC pathname is \"\\\\\\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a partition. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's owner, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. Interoperability with {@code java.nio.file} package The {@code java.nio.file} package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the {@code java.io.File} class. The {@link #toPath toPath} method may be used to obtain a {@link Path} that uses the abstract path represented by a {@code File} object to locate a file. The resulting {@code Path} may be used with the {@link java.nio.file.Files} class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.index.AuthorIndex.writeIndex",
      "parameters": [],
      "signature": "void net.sourceforge.pebble.index.AuthorIndex.writeIndex()",
      "framework": "pebble",
      "link": "",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Helper method to write out the index to disk.",
        "class": "Keeps an index of all blog entries from a specific author, allowing efficient access at runtime."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.doCopyDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "java.io.FileFilter",
        "boolean",
        "java.util.List"
      ],
      "signature": "void org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean, java.util.List)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.update",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.hibernate.internal.SessionImpl.update(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Update the persistent instance with the identifier of the given detached instance. If there is a persistent instance with the same identifier, an exception is thrown. This operation cascades to associated instances if the association is mapped with {@code cascade=\"save-update\"}",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.cleanUp",
      "parameters": [],
      "signature": "void org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.cleanUp()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.filter.RequestContextFilter.setThreadContextInheritable",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.springframework.web.filter.RequestContextFilter.setThreadContextInheritable(boolean)",
      "framework": "spring",
      "link": "https://static.javadoc.io/org.springframework/spring/2.0.3/org/springframework/web/filter/RequestContextFilter.html",
      "comment": "Counter example for source",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Set whether to expose the LocaleContext and RequestAttributes as inheritable for child threads (using an {@link java.lang.InheritableThreadLocal}). Default is \"false\", to avoid side effects on spawned background threads. Switch this to \"true\" to enable inheritance for custom child threads which are spawned during request processing and only used for this request (that is, ending after their initial task, without reuse of the thread). WARNING: Do not use inheritance for child threads if you are accessing a thread pool which is configured to potentially add new threads on demand (e.g. a JDK {@link java.util.concurrent.ThreadPoolExecutor}), since this will expose the inherited context to such a pooled thread.",
        "class": "Servlet 2.3 Filter that exposes the request to the current thread, through both {@link org.springframework.context.i18n.LocaleContextHolder} and {@link RequestContextHolder}. To be registered as filter in web.xml. Alternatively, Spring's {@link org.springframework.web.context.request.RequestContextListener} and Spring's {@link org.springframework.web.servlet.DispatcherServlet} also expose the same request context to the current thread. This filter is mainly for use with third-party servlets, e.g. the JSF FacesServlet. Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.moveFileToDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ProcessBuilder.<init>",
      "parameters": [],
      "signature": "void java.lang.ProcessBuilder.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.lang.ProcessBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.warn(java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.PersistenceManager.newQuery",
      "parameters": [
        "java.lang.Class",
        "java.util.Collection",
        "java.lang.String"
      ],
      "signature": "javax.jdo.Query javax.jdo.PersistenceManager.newQuery(java.lang.Class, java.util.Collection, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.PersistenceManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.jdo.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setBytesNoEscape",
      "parameters": [
        "int",
        "byte[]"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setBytesNoEscape(int, byte[])",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getString",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getString()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the contents of the file item as a String, using the default character encoding. This method uses {@link #get()} to retrieve the contents of the item.",
        "class": "An adapter of Servlet 3.0 {@link Part} to Apache Commons FileUpload's {@link FileItem}"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "wicket-core-7.8.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.LdapContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.requestAttr",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder.requestAttr(java.lang.String, java.lang.Object)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Set a request attribute.",
        "class": "Default builder for {@link MockHttpServletRequest} required as input to perform requests in {@link MockMvc}. Application tests will typically access this builder through the static factory methods in {@link MockMvcRequestBuilders}. Although this class cannot be extended, additional ways to initialize the {@code MockHttpServletRequest} can be plugged in via {@link #with(RequestPostProcessor)}."
      },"return": "org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "com.opensymphony.xwork2.util.Set com.opensymphony.xwork2.util.TextParseUtil.commaDelimitedStringToSet(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.opensymphony.xwork2.util.Set",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.getContent",
      "parameters": [
        "java.lang.Class[]"
      ],
      "signature": "java.lang.Object java.net.URL.getContent(java.lang.Class[])",
      "framework": "",
      "link": "",
      "comment": "java.net.URL",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE918"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorPlatform",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorPlatform()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.template.BaseTemplateEngine.tryReadingPropertyFileFromFileSystem",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.io.InputStream org.apache.struts2.components.template.BaseTemplateEngine.tryReadingPropertyFileFromFileSystem(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.template.BaseTemplateEngine",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.freemarker.tags.CallbackWriter.write",
      "parameters": [
        "char[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.struts2.views.freemarker.tags.CallbackWriter.write(char[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.freemarker.tags.CallbackWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.fatal(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.builders.HttpSecurity.headers",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.web.configurers.HeadersConfigurer org.springframework.security.config.annotation.web.builders.HttpSecurity.headers()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/builders/HttpSecurity.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.web.configurers.HeadersConfigurer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getUseFastIntParsing",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getUseFastIntParsing()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.entity.LazyDecompressingInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int org.apache.http.client.entity.LazyDecompressingInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.entity.LazyDecompressingInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.SessionOutputBufferImpl.streamWrite",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.http.impl.io.SessionOutputBufferImpl.streamWrite(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.SessionOutputBufferImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.print",
      "parameters": [
        "char"
      ],
      "signature": "void java.io.PrintWriter.print(char)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.readLines",
      "parameters": [
        "java.io.File"
      ],
      "signature": "java.util.List org.apache.commons.io.FileUtils.readLines(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.BrokenInputStream.reset",
      "parameters": [],
      "signature": "void org.apache.commons.io.input.BrokenInputStream.reset()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.BrokenInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getProtocol",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getProtocol()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getProtocol() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.queryWithFactory",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase$CursorFactory",
        "boolean",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Throwable",
        "java.util.function.Supplier"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.Throwable, java.util.function.Supplier)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.error(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.NTLMEngineImpl.ntlmv2Hash",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "byte[]"
      ],
      "signature": "byte[] org.apache.http.impl.auth.NTLMEngineImpl.ntlmv2Hash(java.lang.String, java.lang.String, byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.auth.NTLMEngineImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getRequestURI",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getRequestURI()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.BasicAuthCache.put",
      "parameters": [
        "org.apache.http.HttpHost",
        "org.apache.http.auth.AuthScheme"
      ],
      "signature": "void org.apache.http.impl.client.BasicAuthCache.put(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.BasicAuthCache",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.trace",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.pmw.tinylog.Logger.trace(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String",
        "int",
        "int",
        "boolean",
        "java.sql.Connection"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String, int, int, boolean, java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getJdbcCompliantTruncation",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getJdbcCompliantTruncation()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xml.serialize.SecuritySupport.getLastModified",
      "parameters": [
        "java.io.File"
      ],
      "signature": "long org.apache.xml.serialize.SecuritySupport.getLastModified(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xml.serialize.SecuritySupport",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.updateAsciiStream",
      "parameters": [
        "java.lang.String",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ResultSet.updateAsciiStream(java.lang.String, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler.readMessages",
      "parameters": [
        "org.springframework.http.server.ServerHttpRequest"
      ],
      "signature": "java.lang.String[] org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler.readMessages(org.springframework.http.server.ServerHttpRequest)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.UsernamePasswordCredentials",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.BasicScheme.authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials, java.lang.String)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a basic Authorization header value for the given {@link UsernamePasswordCredentials} and charset.",
        "class": "Basic authentication scheme as defined in RFC 2617."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.getBatchedGeneratedKeys",
      "parameters": [
        "java.sql.Statement"
      ],
      "signature": "void com.mysql.jdbc.StatementImpl.getBatchedGeneratedKeys(java.sql.Statement)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest.getFilesystemName",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest.getFilesystemName(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.copyURLToFile",
      "parameters": [
        "java.net.URL",
        "java.io.File",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File, int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrBuilder.appendTo",
      "parameters": [
        "java.lang.Appendable"
      ],
      "signature": "void org.apache.commons.lang3.text.StrBuilder.appendTo(java.lang.Appendable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.StrBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.info(org.slf4j.Marker, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.persistence.EntityManager.createNativeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.persistence.EntityManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.persistence.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.persistence.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jsoup.nodes.Entities.escape",
      "parameters": [
        "java.lang.String",
        "javax.swing.text.Document.OutputSettings"
      ],
      "signature": "java.lang.String org.jsoup.nodes.Entities.escape(java.lang.String, javax.swing.text.Document.OutputSettings)",
      "framework": "jsoup",
      "link": "https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/nodes/Entities.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "HTML escape an input string. That is, {@code &lt;} is returned as {@code &lt;}",
        "class": "HTML entities, and escape routines. Source: W3C HTML named character references."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core.FMParserTokenManager.jjMoveStringLiteralDfa0_0",
      "parameters": [],
      "signature": "int freemarker.core.FMParserTokenManager.jjMoveStringLiteralDfa0_0()",
      "framework": "",
      "link": "",
      "comment": "freemarker.core.FMParserTokenManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString",
      "parameters": [
        "java.io.Writer",
        "java.lang.String",
        "boolean"
      ],
      "signature": "void org.apache.commons.lang.StringEscapeUtils.escapeJavaStyleString(java.io.Writer, java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.StringEscapeUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.Logger.doLog",
      "parameters": [
        "org.osgi.framework.Bundle",
        "org.osgi.framework.ServiceReference",
        "int",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.felix.framework.Logger.doLog(org.osgi.framework.Bundle, org.osgi.framework.ServiceReference, int, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.Logger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ResourceRequest.getPrivateRenderParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.portlet.ResourceRequest.getPrivateRenderParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ResourceRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "com.sun.org.apache.xml.internal.utils.PrefixResolver"
      ],
      "signature": "com.sun.org.apache.xpath.internal.objects.XObject com.sun.org.apache.xpath.internal.XPathAPI.eval(org.w3c.dom.Node, java.lang.String, com.sun.org.apache.xml.internal.utils.PrefixResolver)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.sun.org.apache.xpath.internal.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.BooleanUtils.toBooleanObject",
      "parameters": [
        "int",
        "int",
        "int",
        "int"
      ],
      "signature": "java.lang.Boolean org.apache.commons.lang.BooleanUtils.toBooleanObject(int, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.BooleanUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "java.io.File"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String, java.lang.String[], java.io.File)",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.ssl.DefaultHostnameVerifier.extractCN",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.http.conn.ssl.DefaultHostnameVerifier.extractCN(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.ssl.DefaultHostnameVerifier",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.ServletRedirectResult.sendRedirect",
      "parameters": [
        "javax.servlet.http.HttpServletResponse",
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.result.ServletRedirectResult.sendRedirect(javax.servlet.http.HttpServletResponse, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.ServletRedirectResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringEscapeUtils.unescapeJava",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.StringEscapeUtils.unescapeJava(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.StringEscapeUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.setParameter",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.util.ValueStack.setParameter(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.StrutsUploadedFile.getAbsolutePath",
      "parameters": [],
      "signature": "java.lang.String org.apache.struts2.dispatcher.multipart.StrutsUploadedFile.getAbsolutePath()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.StrutsUploadedFile",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateDouble",
      "parameters": [
        "int",
        "double"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateDouble(int, double)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.isSymlink",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.FileUtils.isSymlink(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.ssl.SSLConnectionSocketFactory.prepareSocket",
      "parameters": [
        "javax.net.ssl.SSLSocket"
      ],
      "signature": "void org.apache.http.conn.ssl.SSLConnectionSocketFactory.prepareSocket(javax.net.ssl.SSLSocket)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.ssl.SSLConnectionSocketFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.trace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.trace(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.ServletRequest.getParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.error(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeUpdate",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "int java.sql.Statement.executeUpdate(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.toByteArray",
      "parameters": [
        "java.io.InputStream",
        "int"
      ],
      "signature": "byte[] org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.jsp.DateTag.setTimezone",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.views.jsp.DateTag.setTimezone(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.jsp.DateTag",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpField.toString",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpField.toString()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpField",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.BundleImpl.getHeaders",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.Dictionary org.apache.felix.framework.BundleImpl.getHeaders(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.BundleImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Dictionary",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrBuilder.readFrom",
      "parameters": [
        "java.lang.Readable"
      ],
      "signature": "int org.apache.commons.lang3.text.StrBuilder.readFrom(java.lang.Readable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.StrBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.getAbsoluteFile",
      "parameters": [],
      "signature": "java.io.File java.io.File.getAbsoluteFile()",
      "framework": "generaljava",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the absolute form of this abstract pathname. Equivalent to new File(this.{@link #getAbsolutePath}).",
        "class": "An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components: An optional system-dependent prefix string, such as a disk-drive specifier, \"/\" for the UNIX root directory, or \"\\\\\\\\\" for a Microsoft Windows UNC pathname, and A sequence of zero or more string names. The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an empty name sequence. The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields {@link #separator} and {@link #separatorChar} of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking the {@link #getParent} method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any File object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname \"/usr\" is an ancestor of the directory denoted by the pathname \"/usr/local/bin\". The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: For UNIX platforms, the prefix of an absolute pathname is always \"/\". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix \"/\" and an empty name sequence. For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by \":\" and possibly followed by \"\\\\\" if the pathname is absolute. The prefix of a UNC pathname is \"\\\\\\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a partition. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's owner, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. Interoperability with {@code java.nio.file} package The {@code java.nio.file} package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the {@code java.io.File} class. The {@link #toPath toPath} method may be used to obtain a {@link Path} that uses the abstract path represented by a {@code File} object to locate a file. The resulting {@code Path} may be used with the {@link java.nio.file.Files} class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails."
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getFileName",
      "parameters": [
        "javax.servlet.http.Part"
      ],
      "signature": "java.lang.String org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getFileName(javax.servlet.http.Part)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "wicket-core-7.8.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.LocaleUtils.languagesByCountry",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.apache.commons.lang.LocaleUtils.languagesByCountry(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.LocaleUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.printf",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintStream java.io.PrintStream.printf(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.isBeforeFirst",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ResultSetImpl.isBeforeFirst()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getContentType",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getContentType()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getContentType() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.error(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.URL.setIncludeContext",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.apache.struts2.components.URL.setIncludeContext(boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.URL",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.<init>",
      "parameters": [],
      "signature": "void javax.servlet.http.Cookie.<init>()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ResourceRequest.getETag",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.ResourceRequest.getETag()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ResourceRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.getenv",
      "parameters": [],
      "signature": "java.util.Map java.lang.System.getenv()",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getParameterValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] javax.portlet.PortletRequest.getParameterValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.orm.hibernate3.support.ClobStringType.sqlTypes",
      "parameters": [],
      "signature": "int[] org.springframework.orm.hibernate3.support.ClobStringType.sqlTypes()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/orm/hibernate3/support/ClobStringType.html",
      "comment": "depricated method. ",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Hibernate UserType implementation for Strings that get mapped to CLOBs. Retrieves the LobHandler to use from LocalSessionFactoryBean at config time. Particularly useful for storing Strings with more than 4000 characters in an Oracle database (only possible via CLOBs), in combination with OracleLobHandler. Can also be defined in generic Hibernate mappings, as DefaultLobCreator will work with most JDBC-compliant database drivers. In this case, the field type does not have to be CLOB: For databases like MySQL and MS SQL Server, any large enough character type will work."
      },"return": "int[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "io.vertx.sqlclient.SqlClient.query",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "io.vertx.sqlclient.Query io.vertx.sqlclient.SqlClient.query(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "io.vertx.sqlclient.SqlClient",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "io.vertx.sqlclient.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "vertx-sql-client-4.2.7.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.time.FastDateFormat.format",
      "parameters": [
        "long",
        "java.lang.Appendable"
      ],
      "signature": "java.lang.Appendable org.apache.commons.lang3.time.FastDateFormat.format(long, java.lang.Appendable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.time.FastDateFormat",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Appendable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockJspWriter.print",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.springframework.mock.web.MockJspWriter.print(boolean)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/MockJspWriter.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Print a boolean value. The string produced by {@link java.lang.String#valueOf(boolean)} is written to the JspWriter's buffer or, if no buffer is used, directly to the underlying writer.",
        "class": "Mock implementation of the {@link javax.servlet.jsp.JspWriter} class. Used for testing the web framework; only necessary for testing applications when testing custom JSP tags."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectNodeIterator",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.traversal.NodeIterator org.apache.xpath.XPathAPI.selectNodeIterator(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.traversal.NodeIterator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.write",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ProxyWriter.write(java.lang.String, int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4UpdatableResultSet.updateNClob",
      "parameters": [
        "int",
        "java.io.Reader",
        "long"
      ],
      "signature": "void com.mysql.jdbc.JDBC4UpdatableResultSet.updateNClob(int, java.io.Reader, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.escapeJava",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.escapeJava(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Escapes the characters in a {@code String} using Java String rules. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) So a tab becomes the characters {@code '\\\\'} and {@code 't'}. The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote and forward-slash (/) are escaped. Example:  input string: He didn't say, \"Stop!\"\n output string: He didn't say, \\\"Stop!\\\"",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.Enumeration org.eclipse.jetty.http.HttpFields.getValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter",
      "parameters": [
        "long"
      ],
      "signature": "org.apache.commons.io.filefilter.IOFileFilter org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.FileFilterUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.io.filefilter.IOFileFilter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.OptionTransferSelect.setSelectAllOnclick",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.components.OptionTransferSelect.setSelectAllOnclick(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.OptionTransferSelect",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeUpdate",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "int java.sql.Statement.executeUpdate(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.LoggerContextKey.create",
      "parameters": [
        "java.lang.String",
        "org.apache.logging.log4j.message.MessageFactory"
      ],
      "signature": "java.lang.String org.apache.logging.log4j.spi.LoggerContextKey.create(java.lang.String, org.apache.logging.log4j.message.MessageFactory)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.LoggerContextKey",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getStringField",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpFields.getStringField(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.LookupTranslator.translate",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "java.io.Writer"
      ],
      "signature": "int org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.LookupTranslator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.digester.annotations.FromAnnotationRuleProviderFactory.useDefaultDigesterLoaderHandlerFactory",
      "parameters": [],
      "signature": "org.apache.commons.digester.annotations.DigesterLoader org.apache.commons.digester.annotations.FromAnnotationRuleProviderFactory.useDefaultDigesterLoaderHandlerFactory()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.digester.annotations.FromAnnotationRuleProviderFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.digester.annotations.DigesterLoader",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setNull",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setNull(int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.storeStream",
      "parameters": [
        "com.mysql.jdbc.MysqlIO",
        "int",
        "com.mysql.jdbc.Buffer",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.storeStream(com.mysql.jdbc.MysqlIO, int, com.mysql.jdbc.Buffer, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.SessionInputBufferImpl.streamRead",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.impl.io.SessionInputBufferImpl.streamRead(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.SessionInputBufferImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.aop.support.StaticMethodMatcher.isRuntime",
      "parameters": [],
      "signature": "boolean org.springframework.aop.support.StaticMethodMatcher.isRuntime()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/aop/support/StaticMethodMatcher.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "int"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence, int, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.GenericServlet.log",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.GenericServlet.log(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Writes the specified message to a servlet log file, prepended by the servlet's name. See {@link ServletContext#log(String)}.",
        "class": "Defines a generic, protocol-independent servlet. To write an HTTP servlet for use on the Web, extend {@link javax.servlet.http.HttpServlet} instead. GenericServlet implements the Servlet and ServletConfig interfaces. GenericServlet may be directly extended by a servlet, although it's more common to extend a protocol-specific subclass such as HttpServlet. GenericServlet makes writing servlets easier. It provides simple versions of the lifecycle methods init and destroy and of the methods in the ServletConfig interface. GenericServlet also implements the log method, declared in the ServletContext interface. To write a generic servlet, you need only override the abstract service method."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpURI.getParam",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpURI.getParam()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpURI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateFloat",
      "parameters": [
        "int",
        "float"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateFloat(int, float)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.storeReader",
      "parameters": [
        "com.mysql.jdbc.MysqlIO",
        "int",
        "com.mysql.jdbc.Buffer",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.storeReader(com.mysql.jdbc.MysqlIO, int, com.mysql.jdbc.Buffer, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getFloat",
      "parameters": [
        "int"
      ],
      "signature": "float com.mysql.jdbc.ResultSetImpl.getFloat(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "float",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateBlob",
      "parameters": [
        "java.lang.String",
        "java.sql.Blob"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateBlob(java.lang.String, java.sql.Blob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.ServletRedirectResult.setPrependServletContext",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.apache.struts2.result.ServletRedirectResult.setPrependServletContext(boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.ServletRedirectResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getInstance",
      "parameters": [
        "java.lang.String",
        "com.mysql.jdbc.Field[]",
        "com.mysql.jdbc.RowData",
        "com.mysql.jdbc.MySQLConnection",
        "com.mysql.jdbc.StatementImpl",
        "boolean"
      ],
      "signature": "com.mysql.jdbc.ResultSetImpl com.mysql.jdbc.ResultSetImpl.getInstance(java.lang.String, com.mysql.jdbc.Field[], com.mysql.jdbc.RowData, com.mysql.jdbc.MySQLConnection, com.mysql.jdbc.StatementImpl, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.ResultSetImpl",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.supportsDataManipulationTransactionsOnly",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.DatabaseMetaData.supportsDataManipulationTransactionsOnly()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setCacheCallableStatements",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setCacheCallableStatements(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper.loadUserDetails",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.userdetails.UserDetails org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper.loadUserDetails(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/3.2.6.RELEASE/apidocs/org/springframework/security/core/userdetails/UserDetailsByNameServiceWrapper.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Get the UserDetails object from the wrapped UserDetailsService implementation",
        "class": "This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object."
      },"return": "org.springframework.security.core.userdetails.UserDetails",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.enums.Enum.toString",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.lang.enums.Enum.toString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.enums.Enum",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletResponseImpl.encodeURL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.HttpServletResponseImpl.encodeURL(java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletResponseImpl.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes the specified URL by including the session ID in it, or, if encoding is not needed, returns the URL unchanged. The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL. For example, if the browser supports cookies, or session tracking is turned off, URL encoding is unnecessary. For robust session tracking, all URLs emitted by a servlet should be run through this method. Otherwise, URL rewriting cannot be used with browsers which do not support cookies.",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletResponse} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.BlobFromLocator.createGetBytesStatement",
      "parameters": [],
      "signature": "java.sql.PreparedStatement com.mysql.jdbc.BlobFromLocator.createGetBytesStatement()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.BlobFromLocator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.beans.factory.support.DisposableBeanAdapter.writeReplace",
      "parameters": [],
      "signature": "java.lang.Object org.springframework.beans.factory.support.DisposableBeanAdapter.writeReplace()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/2.0.0/api/org/springframework/beans/factory/support/DisposableBeanAdapter.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Serializes a copy of the state of this class, filtering out non-serializable BeanPostProcessors.",
        "class": "Adapter that implements the {@link DisposableBean} and {@link Runnable} interfaces performing various destruction steps on a given bean instance: DestructionAwareBeanPostProcessors; the bean implementing DisposableBean itself; a custom destroy method specified on the bean definition."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.trie.AbstractPatriciaTrie.select",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.util.Map$Entry org.apache.commons.collections4.trie.AbstractPatriciaTrie.select(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map$Entry",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.ExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String",
        "org.springframework.expression.ParserContext"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.ExpressionParser.parseExpression(java.lang.String, org.springframework.expression.ParserContext)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.ExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.copyFile",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.trace(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.setNCharacterStream",
      "parameters": [
        "java.lang.String",
        "java.io.Reader",
        "long"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.setNCharacterStream(java.lang.String, java.io.Reader, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.WebServer.setParanoid",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.apache.xmlrpc.webserver.WebServer.setParanoid(boolean)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/WebServer.html",
      "comment": "Counter example for sanitizer (set)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Switch client filtering on/off.",
        "class": "The {@link WebServer} is a minimal HTTP server, that might be used as an embedded web server. Use of the {@link WebServer} has grown very popular amongst users of Apache XML-RPC. Why this is the case, can hardly be explained, because the {@link WebServer} is at best a workaround, compared to full blown servlet engines like Tomcat or Jetty. For example, under heavy load it will almost definitely be slower than a real servlet engine, because it does neither support proper keepalive (multiple requests per physical connection) nor chunked mode (in other words, it cannot stream requests). If you still insist in using the {@link WebServer}, it is recommended to use its subclass, the {@link ServletWebServer} instead, which offers a minimal subset of the servlet API. In other words, you keep yourself the option to migrate to a real servlet engine later. Use of the {@link WebServer} goes roughly like this: First of all, create a property file (for example \"MyHandlers.properties\") and add it to your jar file. The property keys are handler names and the property values are the handler classes. Once that is done, create an instance of WebServer:    final int port = 8088;\n   final String propertyFile = \"MyHandler.properties\";\n\n   PropertyHandlerMapping mapping = new PropertyHandlerMapping();\n   ClassLoader cl = Thread.currentThread().getContextClassLoader();\n   mapping.load(cl, propertyFile);\n   WebServer webServer = new WebServer(port);\n   XmlRpcServerConfigImpl config = new XmlRpcServerConfigImpl();\n   XmlRpcServer server = webServer.getXmlRpcServer();\n   server.setConfig(config);\n   server.setHandlerMapping(mapping);\n   webServer.start();"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.utils.URLEncodedUtils.parse",
      "parameters": [
        "org.apache.http.HttpEntity"
      ],
      "signature": "java.util.List org.apache.http.client.utils.URLEncodedUtils.parse(org.apache.http.HttpEntity)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.utils.URLEncodedUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.criterion.Restrictions.sqlRestriction",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.hibernate.criterion.Criterion org.hibernate.criterion.Restrictions.sqlRestriction(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.hibernate.criterion.Restrictions",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.hibernate.criterion.Criterion",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-4.2.4.final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getParameterValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] javax.servlet.ServletRequest.getParameterValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.unescapeXml",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.unescapeXml(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities. Note that numerical \\\\u Unicode codes are unescaped to their respective Unicode characters. This may change in future releases.",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPath.<init>",
      "parameters": [
        "java.lang.String",
        "javax.xml.transform.SourceLocator",
        "org.apache.xml.utils.PrefixResolver",
        "int"
      ],
      "signature": "void org.apache.xpath.XPath.<init>(java.lang.String, javax.xml.transform.SourceLocator, org.apache.xml.utils.PrefixResolver, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Construct an XPath object. (Needs review -sc) This method initializes an XPathParser/ Compiler and compiles the expression.",
        "class": "The XPath class wraps an expression object and provides general services for execution of that expression."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-xml-xalan.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.toCharArray",
      "parameters": [
        ""
      ],
      "signature": "char[] java.lang.String.toCharArray()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "char[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer",
      "parameters": [],
      "signature": "int org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.AbstractSessionInputBuffer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.compileStatement",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "android.database.sqlite.SQLiteStatement android.database.sqlite.SQLiteDatabase.compileStatement(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.sqlite.SQLiteStatement",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.getParameterMetaData",
      "parameters": [],
      "signature": "java.sql.ParameterMetaData com.mysql.jdbc.ServerPreparedStatement.getParameterMetaData()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ParameterMetaData",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.URLHandlersStreamHandlerProxy.getHostAddress",
      "parameters": [
        "java.net.URL"
      ],
      "signature": "java.net.InetAddress org.apache.felix.framework.URLHandlersStreamHandlerProxy.getHostAddress(java.net.URL)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.URLHandlersStreamHandlerProxy",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.InetAddress",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateString",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateString(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.<init>",
      "parameters": [],
      "signature": "void java.io.File.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.File",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetMetaData.getSchemaName",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.ResultSetMetaData.getSchemaName(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher",
      "parameters": [],
      "signature": "org.apache.commons.lang3.text.StrMatcher org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.StrMatcher",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.lang3.text.StrMatcher",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forCDATA",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forCDATA(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes data for an XML CDATA section. On the chance that the input contains a terminating {@code \"]]>\"}, it will be replaced by {@code \"]]>]]>\"}.\n As with all XML contexts, characters that are invalid according to the\n XML specification will be replaced by a space character.   Caller must\n provide the CDATA section boundaries.\n\n \n     &lt;xml-data&gt;&lt;![CDATA[&lt;%=Encode.forCDATA(...)%&gt;]]&gt;&lt;/xml-data&gt;",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.executeBatch",
      "parameters": [],
      "signature": "int[] com.mysql.jdbc.StatementImpl.executeBatch()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlValueStack.size",
      "parameters": [],
      "signature": "int com.opensymphony.xwork2.ognl.OgnlValueStack.size()",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlValueStack",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.trace(org.slf4j.Marker, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.fatal(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.writeText",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.writeText(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4PreparedStatement.setNClob",
      "parameters": [
        "int",
        "java.sql.NClob"
      ],
      "signature": "void com.mysql.jdbc.JDBC4PreparedStatement.setNClob(int, java.sql.NClob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.core.userdetails.User.isCredentialsNonExpired",
      "parameters": [],
      "signature": "boolean org.springframework.security.core.userdetails.User.isCredentialsNonExpired()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/userdetails/User.html",
      "comment": "Returnes whether the program is authenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-no-change"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Indicates whether the user's credentials (password) has expired. Expired credentials prevent authentication.",
        "class": "Models core user information retrieved by a {@link UserDetailsService}. Developers may use this class directly, subclass it, or write their own {@link UserDetails} implementation from scratch. {@code equals} and {@code hashcode} implementations are based on the {@code username} property only, as the intention is that lookups of the same user principal object (in a user registry, for example) will match where the objects represent the same user, not just when all the properties (authorities, password for example) are the same. Note that this implementation is not immutable. It implements the {@code CredentialsContainer} interface, in order to allow the password to be erased after authentication. This may cause side-effects if you are storing instances in-memory and reusing them. If so, make sure you return a copy from your {@code UserDetailsService} each time it is invoked."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.Felix.bundleHasPermission",
      "parameters": [
        "org.apache.felix.framework.BundleImpl",
        "java.lang.Object"
      ],
      "signature": "boolean org.apache.felix.framework.Felix.bundleHasPermission(org.apache.felix.framework.BundleImpl, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.Felix",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.write",
      "parameters": [
        "char[]"
      ],
      "signature": "void java.io.PrintWriter.write(char[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getBytes",
      "parameters": [
        "int"
      ],
      "signature": "byte[] com.mysql.jdbc.CallableStatement.getBytes(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletResponseWrapper.setContentType",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.ServletResponseWrapper.setContentType(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call setContentType(String type) on the wrapped response object.",
        "class": "Provides a convenient implementation of the ServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forUriComponent",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forUriComponent(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs percent-encoding for a component of a URI, such as a query parameter name or value, path or query-string. In particular this method insures that special characters in the component do not get interpreted as part of another component.      ?query#fragment\">\n\n     &order=1#top\">\n Encoding Table The following characters are not encoded:  U+20:                           - .   0 1 2 3 4 5 6 7 8 9\n U+40: @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z         _\n U+60:   a b c d e f g h i j k l m n o p q r s t u v w x y z       ~\n Encoding Notes Unlike {@link #forUri(String)} this method is safe to be used in most containing contexts, including: HTML/XML, CSS, and JavaScript contexts. URL encoding is an encoding for bytes, not unicode. The input string is thus first encoded as a sequence of UTF-8 byte. The bytes are then encoded as {@code %xx} where {@code xx} is the two-digit hexidecimal representation of the byte. (The implementation does this as one step for performance.) Surrogate pairs are first decoded to a Unicode code point before encoding as UTF-8. Invalid characters (e.g. partial or invalid surrogate pairs), are replaced with a hyphen ({@code -}) character.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.error(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.WriterOutputStream.flushOutput",
      "parameters": [],
      "signature": "void org.apache.commons.io.output.WriterOutputStream.flushOutput()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.WriterOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.severe",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.severe(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.parsers.SecuritySupport.getFileInputStream",
      "parameters": [
        "java.io.File"
      ],
      "signature": "java.io.FileInputStream com.google.gxp.org.apache.xerces.parsers.SecuritySupport.getFileInputStream(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.parsers.SecuritySupport",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.FileInputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.readLines",
      "parameters": [
        "java.io.Reader"
      ],
      "signature": "java.util.List org.apache.commons.io.IOUtils.readLines(java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapTemplate.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getProfileSQL",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getProfileSQL()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.LDAPConnection.search",
      "parameters": [
        "java.lang.String",
        "int",
        "java.lang.String",
        "java.lang.String",
        "boolean",
        "com.novell.ldap.LDAPSearchQueue"
      ],
      "signature": "com.novell.ldap.LDAPSearchQueue com.novell.ldap.LDAPConnection.search(java.lang.String, int, java.lang.String, java.lang.String, boolean, com.novell.ldap.LDAPSearchQueue)",
      "framework": "",
      "link": "",
      "comment": "com.novell.ldap.LDAPConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.novell.ldap.LDAPSearchQueue",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.html.Encoding.stripBannedCodeunits",
      "parameters": [
        "java.lang.StringBuilder"
      ],
      "signature": "void org.owasp.html.Encoding.stripBannedCodeunits(java.lang.StringBuilder)",
      "framework": "generaljava",
      "link": "https://github.com/OWASP/java-html-sanitizer/blob/master/src/main/java/org/owasp/html/Encoding.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Leaves in the input buffer only code-units that comprise XML safe chars.",
        "class": "Encoders and decoders for HTML."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.trace",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.trace(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setAllowLoadLocalInfile",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setAllowLoadLocalInfile(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildUnionQuery",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.StringFormattedMessage.readObject",
      "parameters": [
        "java.io.ObjectInputStream"
      ],
      "signature": "void org.apache.logging.log4j.message.StringFormattedMessage.readObject(java.io.ObjectInputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.StringFormattedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.amazonaws.services.simpledb.model.SelectRequest.<init>",
      "parameters": [],
      "signature": "void com.amazonaws.services.simpledb.model.SelectRequest.<init>()",
      "framework": "",
      "link": "",
      "comment": "com.amazonaws.services.simpledb.model.SelectRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "aws-java-sdk.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.params.HttpConnectionParams.setSoKeepalive",
      "parameters": [
        "org.apache.http.params.HttpParams",
        "boolean"
      ],
      "signature": "void org.apache.http.params.HttpConnectionParams.setSoKeepalive(org.apache.http.params.HttpParams, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.params.HttpConnectionParams",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.format",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintStream java.io.PrintStream.format(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.log",
      "parameters": [
        "java.lang.String",
        "org.apache.log4j.Priority",
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.log(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectSingleNode",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.Node org.apache.xpath.XPathAPI.selectSingleNode(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.queryWithFactory",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase$CursorFactory",
        "boolean",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, Zjava.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.DirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.DirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.log.StandardLogger.logFatal",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void com.mysql.jdbc.log.StandardLogger.logFatal(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.log.StandardLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.close",
      "parameters": [],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.close()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.swing.text.JTextComponent.getText",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.lang.String javax.swing.text.JTextComponent.getText(int, int)",
      "framework": "",
      "link": "",
      "comment": "javax.swing.text.JTextComponent",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginPage",
      "parameters": [],
      "signature": "java.lang.String org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginPage()",
      "framework": "spring",
      "link": "https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/http/FormLoginBeanDefinitionParser.java",
      "comment": "Counter example for authentications and cwe306",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getDontTrackOpenResources",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getDontTrackOpenResources()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.printf",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.printf(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setBlob",
      "parameters": [
        "int",
        "java.io.InputStream",
        "long"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setBlob(int, java.io.InputStream, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.write",
      "parameters": [
        "char[]"
      ],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.write(char[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.AnonymousAuthenticationProvider.authenticate",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.Authentication org.springframework.security.authentication.AnonymousAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/3.1.8.CI-SNAPSHOT/apidocs/org/springframework/security/authentication/AnonymousAuthenticationProvider.html",
      "comment": "The input object is authenticated and returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs authentication with the same contract as {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)} .",
        "class": "An {@link AuthenticationProvider} implementation that validates {@link AnonymousAuthenticationToken}s. To be successfully validated, the {@link AnonymousAuthenticationToken#getKeyHash()} must match this class' {@link #getKey()}."
      },"return": "org.springframework.security.core.Authentication",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StringUtils.getBytes",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "byte[] com.mysql.jdbc.StringUtils.getBytes(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.template.Template.addPrefixNSMapping",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void freemarker.template.Template.addPrefixNSMapping(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "freemarker.template.Template",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "java.lang.String"
      ],
      "signature": "boolean org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forHtmlUnquotedAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forHtmlUnquotedAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for unquoted HTML attribute values. {@link #forHtml(String)} or {@link #forHtmlAttribute(String)} should usually be preferred over this method as quoted attributes are XHTML compliant. When using this method, the caller is not required to provide quotes around the attribute (since it is encoded for such context). The caller should make sure that the attribute value does not abut unsafe characters--and thus should usually err on the side of including a space character after the value. Use of this method is discouraged as quoted attributes are generally more compatible and safer. Also note, that no attempt has been made to optimize this encoding, though it is still probably faster than other encoding libraries. Example JSP Usage       >\n Encoding Table Input Result {@code U+0009} (horizontal tab) {@code } {@code U+000A} (line feed) {@code } {@code U+000C} (form feed) {@code } {@code U+000D} (carriage return) {@code } {@code U+0020} (space) {@code } {@code &} {@code &} {@code } {@code >} {@code \"} {@code \"} {@code '} {@code '} {@code /} {@code /} {@code =} {@code =} {@code `} {@code `} {@code U+0085} (next line) {@code …} {@code U+2028} (line separator) {@code  } {@code U+2029} (paragraph separator) {@code  } Additional Notes The following characters are not encoded: {@code 0-9, a-z, A-Z}, {@code !}, {@code #}, {@code $}, {@code %}, {@code (}, {@code )}, {@code *}, {@code +}, {@code ,}, {@code -}, {@code .}, {@code [}, {@code \\}, {@code ]}, {@code ^}, {@code _}, {@code }}. Surrogate pairs are passed through only if valid. Invalid surrogate pairs are replaced by a hyphen (-). Characters in the C0 and C1 control blocks and not otherwise listed above are considered invalid and replaced by a hyphen (-) character. Unicode \"non-characters\" are replaced by hyphens (-).",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.writeLines",
      "parameters": [
        "java.util.Collection",
        "java.lang.String",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.Entities.doUnescape",
      "parameters": [
        "java.io.Writer",
        "java.lang.String",
        "int"
      ],
      "signature": "void org.apache.commons.lang.Entities.doUnescape(java.io.Writer, java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.Entities",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.methods.HttpPost.setEntity",
      "parameters": [
        "Lorg.apache.http.HttpEntity"
      ],
      "signature": "void org.apache.http.client.methods.HttpPost.setEntity(Lorg.apache.http.HttpEntity)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.methods.HttpPost",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-httpcomponents-httpclient.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getServletPath",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getServletPath()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.MultipartStream.access$002",
      "parameters": [
        "org.apache.commons.fileupload.MultipartStream",
        "int"
      ],
      "signature": "int org.apache.commons.fileupload.MultipartStream.access$002(org.apache.commons.fileupload.MultipartStream, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.MultipartStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsTestCaseHelper.initDispatcher",
      "parameters": [
        "javax.servlet.ServletContext",
        "java.util.Map"
      ],
      "signature": "org.apache.struts2.dispatcher.Dispatcher org.apache.struts2.util.StrutsTestCaseHelper.initDispatcher(javax.servlet.ServletContext, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsTestCaseHelper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.struts2.dispatcher.Dispatcher",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.util.FieldUtils.setProtectedFieldValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.springframework.security.util.FieldUtils.setProtectedFieldValue(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "apache",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/util/FieldUtils.html",
      "comment": "Counter example for sanitizer (set)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Offers static methods for directly manipulating fields."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.servlet.tags.UrlTag.createUrl",
      "parameters": [],
      "signature": "java.lang.String org.springframework.web.servlet.tags.UrlTag.createUrl()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/UrlTag.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Build the URL for the tag from the tag attributes and parameters.",
        "class": "JSP tag for creating URLs. Modeled after the JSTL c:url tag with backwards compatibility in mind. Enhancements to the JSTL functionality include: URL encoded template URI variables HTML/XML escaping of URLs JavaScript escaping of URLs Template URI variables are indicated in the {@link #setValue(String) 'value'} attribute and marked by braces '{variableName}'. The braces and attribute name are replaced by the URL encoded value of a parameter defined with the spring:param tag in the body of the url tag. If no parameter is available the literal value is passed through. Params matched to template variables will not be added to the query string. Use of the spring:param tag for URI template variables is strongly recommended over direct EL substitution as the values are URL encoded. Failure to properly encode URL can leave an application vulnerable to XSS and other injection attacks. URLs can be HTML/XML escaped by setting the {@link #setHtmlEscape(boolean) 'htmlEscape'} attribute to 'true'. Detects an HTML escaping setting, either on this tag instance, the page level, or the {@code web.xml} level. The default is 'false'. When setting the URL value into a variable, escaping is not recommended. Example usage: \n   \n  Results in: {@code /currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl}"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.debug(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.bootstrap.ServerBootstrap.bootstrap",
      "parameters": [],
      "signature": "org.apache.http.impl.bootstrap.ServerBootstrap org.apache.http.impl.bootstrap.ServerBootstrap.bootstrap()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.bootstrap.ServerBootstrap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.impl.bootstrap.ServerBootstrap",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Op.elementAt",
      "parameters": [
        "int"
      ],
      "signature": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Op com.google.gxp.org.apache.xerces.impl.xpath.regex.Op.elementAt(int)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Op",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Op",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.load",
      "parameters": [
        "java.lang.Class",
        "java.io.Serializable"
      ],
      "signature": "java.lang.Object org.hibernate.internal.SessionImpl.load(java.lang.Class, java.io.Serializable)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists. This method might return a proxied instance that is initialized on-demand, when a non-identifier method is accessed. You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.persistence.EntityManager.createQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.Class"
      ],
      "signature": "javax.persistence.TypedQuery javax.persistence.EntityManager.createQuery(java.lang.String, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "javax.persistence.EntityManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.persistence.TypedQuery",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.persistence.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.CharSequenceInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.CharSequenceInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.CharSequenceInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.getResultSetConcurrency",
      "parameters": [],
      "signature": "int com.mysql.jdbc.StatementImpl.getResultSetConcurrency()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.DefaultStaticContentLoader.copy",
      "parameters": [
        "java.io.InputStream",
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.struts2.dispatcher.DefaultStaticContentLoader.copy(java.io.InputStream, java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.DefaultStaticContentLoader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.BasicScheme.authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces basic authorization string for the given set of {@link Credentials}.",
        "class": "Basic authentication scheme as defined in RFC 2617."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.DefaultDispatcherErrorHandler.handleErrorInDevMode",
      "parameters": [
        "javax.servlet.http.HttpServletResponse",
        "int",
        "java.lang.Exception"
      ],
      "signature": "void org.apache.struts2.dispatcher.DefaultDispatcherErrorHandler.handleErrorInDevMode(javax.servlet.http.HttpServletResponse, int, java.lang.Exception)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.DefaultDispatcherErrorHandler",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileSystemUtils.parseDir",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "long org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileSystemUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.InitialDirContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.InitialDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.event.EventDirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.event.EventDirContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.event.EventDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.getCanonicalFile",
      "parameters": [],
      "signature": "java.io.File java.io.File.getCanonicalFile()",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/java/io/File.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the canonical form of this abstract pathname. Equivalent to new File(this.{@link #getCanonicalPath}).",
        "class": "An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An abstract pathname has two components: An optional system-dependent prefix string, such as a disk-drive specifier, \"/\" for the UNIX root directory, or \"\\\\\\\\\" for a Microsoft Windows UNC pathname, and A sequence of zero or more string names. The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an empty name sequence. The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made available in the public static fields {@link #separator} and {@link #separatorChar} of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the Java virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking the {@link #getParent} method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any File object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname \"/usr\" is an ancestor of the directory denoted by the pathname \"/usr/local/bin\". The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: For UNIX platforms, the prefix of an absolute pathname is always \"/\". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix \"/\" and an empty name sequence. For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by \":\" and possibly followed by \"\\\\\" if the pathname is absolute. The prefix of a UNC pathname is \"\\\\\\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a partition. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition named by some ancestor of the absolute form of this pathname. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object's owner, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. Interoperability with {@code java.nio.file} package The {@code java.nio.file} package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the {@code java.io.File} class. The {@link #toPath toPath} method may be used to obtain a {@link Path} that uses the abstract path represented by a {@code File} object to locate a file. The resulting {@code Path} may be used with the {@link java.nio.file.Files} class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails."
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.protocol.RequestTargetAuthentication.process",
      "parameters": [
        "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "void org.apache.http.client.protocol.RequestTargetAuthentication.process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.protocol.RequestTargetAuthentication",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileWriter.<init>",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "void java.io.FileWriter.<init>(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written.",
        "class": "Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream. Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one FileWriter (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open. FileWriter is meant for writing streams of characters. For writing streams of raw bytes, consider using a FileOutputStream."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.canonicalize",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.canonicalize(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Canonicalization is simply the operation of reducing a possibly encoded string down to its simplest form. This is important, because attackers frequently use encoding to change their input in a way that will bypass validation filters, but still be interpreted properly by the target of the attack. Note that data encoded more than once is not something that a normal user would generate and should be regarded as an attack. Everyone says you shouldn't do validation without canonicalizing the data first. This is easier said than done. The canonicalize method can be used to simplify just about any input down to its most basic form. Note that canonicalize doesn't handle Unicode issues, it focuses on higher level encoding and escaping schemes. In addition to simple decoding, canonicalize also handles: Perverse but legal variants of escaping schemes Multiple escaping (%2526 or &lt;) Mixed escaping (%26lt;) Nested escaping (%%316 or &%6ct;) All combinations of multiple, mixed, and nested encoding/escaping (%253c or ┦gt;) Using canonicalize is simple. The default is just...\n                    String clean = ESAPI.encoder().canonicalize( request.getParameter(\"input\"));\n                    You need to decode untrusted data so that it's safe for ANY downstream interpreter or decoder. For example, if your data goes into a Windows command shell, then into a database, and then to a browser, you're going to need to decode for all of those systems. You can build a custom encoder to canonicalize for your application like this...\n                    ArrayList list = new ArrayList();\n                    list.add( new WindowsCodec() );\n                    list.add( new MySQLCodec() );\n                    list.add( new PercentCodec() );\n                    Encoder encoder = new DefaultEncoder( list );\n                    String clean = encoder.canonicalize( request.getParameter( \"input\" ));\n                    In ESAPI, the Validator uses the canonicalize method before it does validation. So all you need to do is to validate as normal and you'll be protected against a host of encoded attacks.      String input = request.getParameter( \"name\" );\n                    String name = ESAPI.validator().isValidInput( \"test\", input, \"FirstName\", 20, false);\n                    However, the default canonicalize() method only decodes HTMLEntity, percent (URL) encoding, and JavaScript encoding. If you'd like to use a custom canonicalizer with your validator, that's pretty easy too.\n                    ... setup custom encoder as above\n                    Validator validator = new DefaultValidator( encoder );\n                    String input = request.getParameter( \"name\" );\n                    String name = validator.isValidInput( \"test\", input, \"name\", 20, false);\n                    Although ESAPI is able to canonicalize multiple, mixed, or nested encoding, it's safer to not accept this stuff in the first place. In ESAPI, the default is \"strict\" mode that throws an IntrusionException if it receives anything not single-encoded with a single scheme. Currently this is not configurable in ESAPI.properties, but it probably should be. Even if you disable \"strict\" mode, you'll still get warning messages in the log about each multiple encoding and mixed encoding received.      // disabling strict mode to allow mixed encoding\n                    String url = ESAPI.encoder().canonicalize( request.getParameter(\"url\"), false);",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setClob",
      "parameters": [
        "int",
        "java.sql.Clob"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setClob(int, java.sql.Clob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.functors.WhileClosure.getPredicate",
      "parameters": [],
      "signature": "org.apache.commons.collections4.Predicate org.apache.commons.collections4.functors.WhileClosure.getPredicate()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.functors.WhileClosure",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.collections4.Predicate",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.builders.HttpSecurity.rememberMe",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer org.springframework.security.config.annotation.web.builders.HttpSecurity.rememberMe()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/builders/HttpSecurity.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildUnionSubQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "java.util.Set",
        "int",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "char",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "java.lang.Class"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.TextParseUtil.translateVariables(char, java.lang.String, com.opensymphony.xwork2.util.ValueStack, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.fatal(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.error(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.forName",
      "parameters": [
        "java.lang.String",
        "boolean",
        "java.lang.ClassLoader"
      ],
      "signature": "java.lang.Class java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the {@code Class} object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by {@code getName}) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter {@code loader} is null, the class is loaded through the bootstrap class loader. The class is initialized only if the {@code initialize} parameter is {@code true} and if it has not been initialized earlier. If {@code name} denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is {@code name}. Therefore, this method cannot be used to obtain any of the {@code Class} objects representing primitive types or void. If {@code name} denotes an array class, the component type of the array class is loaded but not initialized. For example, in an instance method the expression: {@code Class.forName(\"Foo\")} is equivalent to: {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())} Note that this method throws errors related to loading, linking or initializing as specified in Sections 12.2, 12.3 and 12.4 of The Java Language Specification. Note that this method does not check whether the requested class is accessible to its caller. If the {@code loader} is {@code null}, and a security manager is present, and the caller's class loader is not null, then this method calls the security manager's {@code checkPermission} method with a {@code RuntimePermission(\"getClassLoader\")} permission to ensure it's ok to access the bootstrap class loader.",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String",
        "boolean",
        "java.sql.Connection"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String, boolean, java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.info",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.info(java.lang.CharSequence)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setUnicodeStream",
      "parameters": [
        "int",
        "java.io.InputStream",
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setUnicodeStream(int, java.io.InputStream, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.RFC2965SpecFactory.newInstance",
      "parameters": [
        "org.apache.http.params.HttpParams"
      ],
      "signature": "org.apache.http.cookie.CookieSpec org.apache.http.impl.cookie.RFC2965SpecFactory.newInstance(org.apache.http.params.HttpParams)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.RFC2965SpecFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.cookie.CookieSpec",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.mapper.AttributeAliasingMapper.attributeForAlias",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.thoughtworks.xstream.mapper.AttributeAliasingMapper.attributeForAlias(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.mapper.AttributeAliasingMapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyReader.read",
      "parameters": [],
      "signature": "int org.apache.commons.io.input.ProxyReader.read()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.createStatement",
      "parameters": [
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.Statement com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.createStatement(int, int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Statement",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeLargeUpdate",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "long java.sql.PreparedStatement.executeLargeUpdate(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.node.ObjectNode.putAll",
      "parameters": [
        "java.util.Map"
      ],
      "signature": "com.fasterxml.jackson.databind.JsonNode com.fasterxml.jackson.databind.node.ObjectNode.putAll(java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.node.ObjectNode",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.fasterxml.jackson.databind.JsonNode",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.fine",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.fine(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.persistence.EntityManager.createNativeQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.persistence.EntityManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.persistence.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.persistence.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.trace(java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.isNull",
      "parameters": [
        "int"
      ],
      "signature": "boolean com.mysql.jdbc.PreparedStatement.isNull(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppName",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppName()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.getProperty",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.System.getProperty(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mitchellbosecke.pebble.utils.PathUtils.sanitize",
      "parameters": [
        "java.lang.String",
        "char"
      ],
      "signature": "java.lang.String com.mitchellbosecke.pebble.utils.PathUtils.sanitize(java.lang.String, char)",
      "framework": "pebble",
      "link": "https://github.com/PebbleTemplates/pebble/blob/master/src/main/java/com/mitchellbosecke/pebble/utils/PathUtils.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Utility class to handle relative paths."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getLargeRowSizeThreshold",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getLargeRowSizeThreshold()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.configurers.LogoutConfigurer.getLogoutHandlers",
      "parameters": [],
      "signature": "java.util.List org.springframework.security.config.annotation.web.configurers.LogoutConfigurer.getLogoutHandlers()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source",
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Gets the {@link LogoutHandler} instances that will be used.",
        "class": "Adds logout support. Other {@link SecurityConfigurer} instances may invoke {@link #addLogoutHandler(LogoutHandler)} in the {@link #init(HttpSecurity)} phase. Security Filters The following Filters are populated {@link LogoutFilter} Shared Objects Created No shared Objects are created Shared Objects Used No shared objects are used."
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "java.lang.String[]",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, int, java.lang.String[], org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "com.sun.org.apache.xpath.internal.objects.XObject com.sun.org.apache.xpath.internal.XPathAPI.eval(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.sun.org.apache.xpath.internal.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.info",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.pmw.tinylog.Logger.info(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.spel.standard.SpelExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String",
        "org.springframework.expression.ParserContext"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.spel.standard.SpelExpressionParser.parseExpression(java.lang.String, org.springframework.expression.ParserContext)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.spel.standard.SpelExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.getSessionLockedCalendar",
      "parameters": [],
      "signature": "java.util.Calendar com.mysql.jdbc.ConnectionImpl.getSessionLockedCalendar()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Calendar",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setLocalSocketAddress",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setLocalSocketAddress(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.getColumnsToIndexMapForTableAndDB",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.util.Map com.mysql.jdbc.UpdatableResultSet.getColumnsToIndexMapForTableAndDB(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.query",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.debug(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.updateCharacterStream",
      "parameters": [
        "int",
        "java.io.Reader",
        "long"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ResultSet.updateCharacterStream(int, java.io.Reader, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.warn",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.warn(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.append",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "int"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence, int, int)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getContinueBatchOnError",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getContinueBatchOnError()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForOS",
      "parameters": [
        "org.owasp.esapi.codecs.Codec",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForOS(org.owasp.esapi.codecs.Codec, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE77"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode for an operating system command shell according to the selected codec (appropriate codecs include the WindowsCodec and UnixCodec). Please note the following recommendations before choosing to use this method: 1) It is strongly recommended that applications avoid making direct OS system calls if possible as such calls are not portable, and they are potentially unsafe. Please use language provided features if at all possible, rather than native OS calls to implement the desired feature. 2) If an OS call cannot be avoided, then it is recommended that the program to be invoked be invoked directly (e.g., System.exec(\"nameofcommand\" + \"parameterstocommand\");) as this avoids the use of the command shell. The \"parameterstocommand\" should of course be validated before passing them to the OS command. 3) If you must use this method, then we recommend validating all user supplied input passed to the command shell as well, in addition to using this method in order to make the command shell invocation safe. An example use of this method would be: System.exec(\"dir \" + ESAPI.encodeForOS(WindowsCodec, \"parameter(s)tocommandwithuserinput\");",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.valueParameters",
      "parameters": [
        "java.lang.String",
        "java.util.Map"
      ],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpFields.valueParameters(java.lang.String, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentials",
      "parameters": [
        "com.google.api.client.http.HttpTransport"
      ],
      "signature": "com.google.auth.oauth2.GoogleCredentials com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentials(com.google.api.client.http.HttpTransport)",
      "framework": "oauth",
      "link": "https://github.com/google/google-auth-library-java/blob/master/oauth2_http/java/com/google/auth/oauth2/DefaultCredentialsProvider.java",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the Application Default Credentials. Returns the Application Default Credentials which are credentials that identify and authorize the whole application. This is the built-in service account if running on Google Compute Engine or credentials specified by an environment variable or a file in a well-known location.",
        "class": "Provides the Application Default Credential from the environment. An instance represents the per-process state used to get and cache the credential and allows overriding the state and environment for testing purposes."
      },"return": "com.google.auth.oauth2.GoogleCredentials",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.afterWrite",
      "parameters": [
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ProxyWriter.afterWrite(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrSubstitutor.replace",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.text.StrSubstitutor.replace(java.lang.CharSequence)",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/text/StrSubstitutor.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces all the occurrences of variables with their matching values from the resolver using the given source as a template. The source is not altered by this method.",
        "class": "Substitutes variables within a string by values. This class takes a piece of text and substitutes all the variables within it. The default definition of a variable is {@code ${variableName}}. The prefix and suffix can be changed via constructors and set methods. Variable values are typically resolved from a map, but could also be resolved from system properties, or by supplying a custom variable resolver. The simplest example is to use this class to replace Java System properties. For example:  StrSubstitutor.replaceSystemProperties(\n      \"You are running with java.version = ${java.version} and os.name = ${os.name}.\");\n Typical usage of this class follows the following pattern: First an instance is created and initialized with the map that contains the values for the available variables. If a prefix and/or suffix for variables should be used other than the default ones, the appropriate settings can be performed. After that the {@code replace()} method can be called passing in the source text for interpolation. In the returned text all variable references (as long as their values are known) will be resolved. The following example demonstrates this:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog.\n Also, this class allows to set a default value for unresolved variables. The default value for a variable can be appended to the variable name after the variable default value delimiter. The default value of the variable default value delimiter is ':-', as in bash and other *nix shells, as those are arguably where the default ${} delimiter set originated. The variable default value delimiter can be manually set by calling {@link #setValueDelimiterMatcher(StrMatcher)}, {@link #setValueDelimiter(char)} or {@link #setValueDelimiter(String)}. The following shows an example with variable default value settings:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}. ${undefined.number:-1234567890}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog. 1234567890.\n In addition to this usage pattern there are some static convenience methods that cover the most common use cases. These methods can be used without the need of manually creating an instance. However if multiple replace operations are to be performed, creating and reusing an instance of this class will be more efficient. Variable replacement works in a recursive way. Thus, if a variable value contains a variable then that variable will also be replaced. Cyclic replacements are detected and will cause an exception to be thrown. Sometimes the interpolation's result must contain a variable prefix. As an example take the following source text:    The variable ${${name}} must be used.\n Here only the variable's name referred to in the text should be replaced resulting in the text (assuming that the value of the {@code name} variable is {@code x}):    The variable ${x} must be used.\n To achieve this effect there are two possibilities: Either set a different prefix and suffix for variables which do not conflict with the result text you want to produce. The other possibility is to use the escape character, by default '$'. If this character is placed before a variable reference, this reference is ignored and won't be replaced. For example:    The variable $${${name}} must be used.\n In some complex scenarios you might even want to perform substitution in the names of variables, for instance  ${jre-${java.specification.version}}\n {@code StrSubstitutor} supports this recursive substitution in variable names, but it has to be enabled explicitly by setting the {@link #setEnableSubstitutionInVariables(boolean) enableSubstitutionInVariables} property to true. This class is not thread safe."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.exception.ExceptionUtils.getFullStackTrace",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "java.lang.String org.apache.commons.lang.exception.ExceptionUtils.getFullStackTrace(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.exception.ExceptionUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.http.LogoutBeanDefinitionParser.getLogoutRequestMatcher",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.beans.factory.config.BeanDefinition org.springframework.security.config.http.LogoutBeanDefinitionParser.getLogoutRequestMatcher(java.lang.String)",
      "framework": "spring",
      "link": "https://github.com/spring-projects/spring-security/blob/master/config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source",
        "auth-no-change"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE601",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.beans.factory.config.BeanDefinition",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findString",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.ValueStack.findString(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.internet.InternetAddress.<init>",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.mail.internet.InternetAddress.<init>(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Construct an InternetAddress given the address and personal name. The address is assumed to be a syntactically valid RFC822 address.",
        "class": "This class represents an Internet email address using the syntax of RFC822. Typical address syntax is of the form \"user@host.domain\" or \"Personal Name \"."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.stratos.cli-4.0.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperties(java.util.Map, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.getName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.Cookie.getName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.util.XMLCatalogResolver.resolveEntity",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "org.xml.sax.InputSource com.google.gxp.org.apache.xerces.util.XMLCatalogResolver.resolveEntity(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.util.XMLCatalogResolver",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.xml.sax.InputSource",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.touch",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void org.apache.commons.io.FileUtils.touch(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.message.ParserCursor.getLowerBound",
      "parameters": [],
      "signature": "int org.apache.http.message.ParserCursor.getLowerBound()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.message.ParserCursor",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.xmldb.api.base.XMLDBException.printStackTrace",
      "parameters": [
        "java.io.PrintWriter"
      ],
      "signature": "void org.xmldb.api.base.XMLDBException.printStackTrace(java.io.PrintWriter)",
      "framework": "generalJava",
      "link": "http://xmldb-org.sourceforge.net/xapi/api/org/xmldb/api/base/XMLDBException.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "XMLDBException is thrown for all errors in the XML:DB API. It contains two error codes one an XML:DB error code as defined in ErrorCodes and one vendor specific. If the error being thrown is only vendor specific then errorCode MUST be set to ErrorCodes.VENDOR_ERROR."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setConnectTimeout",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setConnectTimeout(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "float"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(float)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.XmlStreamWriter.close",
      "parameters": [],
      "signature": "void org.apache.commons.io.output.XmlStreamWriter.close()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.XmlStreamWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.RequestData.getMethod",
      "parameters": [],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.RequestData.getMethod()",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/RequestData.html",
      "comment": "Counter example for sanitizer.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the request method.",
        "class": "Web servers extension of {@link org.apache.xmlrpc.common.XmlRpcHttpRequestConfig}, which allows to store additional per request data."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.absolute",
      "parameters": [
        "int"
      ],
      "signature": "boolean com.mysql.jdbc.UpdatableResultSet.absolute(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.AbstractFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.AbstractFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.l7dlog",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getRef",
      "parameters": [
        "int"
      ],
      "signature": "java.sql.Ref com.mysql.jdbc.CallableStatement.getRef(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Ref",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forUri",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forUri(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs percent-encoding of a URL according to RFC 3986. The provided URL is assumed to a valid URL. This method does not do any checking on the quality or safety of the URL itself. In many applications it may be better to use {@link java.net.URI} instead. Note: this is a particularly dangerous context to put untrusted content in, as for example a \"javascript:\" URL provided by a malicious user would be \"properly\" escaped, and still execute. Encoding Table The following characters are not encoded:  U+20:   !   # $   & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ;   =   ?\n U+40: @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [   ]   _\n U+60:   a b c d e f g h i j k l m n o p q r s t u v w x y z       ~\n Encoding Notes The single-quote character({@code '}) is not encoded. This encoding is not intended to be used standalone. The output should be encoded to the target context. For example: {@code ...}. (Note, the single-quote character ({@code '}) is not encoded.) URL encoding is an encoding for bytes, not unicode. The input string is thus first encoded as a sequence of UTF-8 byte. The bytes are then encoded as {@code %xx} where {@code xx} is the two-digit hexidecimal representation of the byte. (The implementation does this as one step for performance.) Surrogate pairs are first decoded to a Unicode code point before encoding as UTF-8. Invalid characters (e.g. partial or invalid surrogate pairs), are replaced with a hyphen ({@code -}) character.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateClob",
      "parameters": [
        "int",
        "java.sql.Clob"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateClob(int, java.sql.Clob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForDN",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForDN(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in an LDAP distinguished name.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.LRUMap.writeExternal",
      "parameters": [
        "java.io.ObjectOutput"
      ],
      "signature": "void org.apache.commons.collections.LRUMap.writeExternal(java.io.ObjectOutput)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.LRUMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForHTMLAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForHTMLAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in HTML attributes.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "anorm.SimpleSql.as",
      "parameters": [
        "anorm.ResultSetParser",
        "java.sql.Connection"
      ],
      "signature": "java.lang.Object anorm.SimpleSql.as(anorm.ResultSetParser, java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "anorm.SimpleSql",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "anorm_2.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.authentication.CachingUserDetailsService.loadUserByUsername",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.security.core.userdetails.UserDetails org.springframework.security.config.authentication.CachingUserDetailsService.loadUserByUsername(java.lang.String)",
      "framework": "spring",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Locates the user based on the username. In the actual implementation, the search may possibly be case sensitive, or case insensitive depending on how the implementation instance is configured. In this case, the UserDetails object that comes back may have a username that is of a different case than what was actually requested..",
        "class": ""
      },"return": "org.springframework.security.core.userdetails.UserDetails",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.BeanUtils.copyProperties",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.beanutils.BeanUtils.copyProperties(java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.BeanUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "boolean",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, int, boolean, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletRequestImpl.readLine",
      "parameters": [
        "byte[]"
      ],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.HttpServletRequestImpl.readLine(byte[])",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletRequestImpl.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletRequest} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.<init>",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.Cookie.<init>(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Constructs a cookie with the specified name and value. The name must conform to RFC 2109. However, vendors may provide a configuration option that allows cookie names conforming to the original Netscape Cookie Specification to be accepted. The name of a cookie cannot be changed once the cookie has been created. The value can be anything the server chooses to send. Its value is probably of interest only to the server. The cookie's value can be changed after creation with the setValue method. By default, cookies are created according to the Netscape cookie specification. The version can be changed with the setVersion method.",
        "class": "Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server. A cookie's value can uniquely identify a client, so cookies are commonly used for session management. A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number. Some Web browsers have bugs in how they handle the optional attributes, so use them sparingly to improve the interoperability of your servlets. The servlet sends cookies to the browser by using the {@link HttpServletResponse#addCookie} method, which adds fields to HTTP response headers to send cookies to the browser, one at a time. The browser is expected to support 20 cookies for each Web server, 300 cookies total, and may limit cookie size to 4 KB each. The browser returns cookies to the servlet by adding fields to HTTP request headers. Cookies can be retrieved from a request by using the {@link HttpServletRequest#getCookies} method. Several cookies might have the same name but different path attributes. Cookies affect the caching of the Web pages that use them. HTTP 1.0 does not cache pages that use cookies created with this class. This class does not support the cache control defined with HTTP 1.1. This class supports both the Version 0 (by Netscape) and Version 1 (by RFC 2109) cookie specifications. By default, cookies are created using Version 0 to ensure the best interoperability."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.event.EventListenerSupport.readObject",
      "parameters": [
        "java.io.ObjectInputStream"
      ],
      "signature": "void org.apache.commons.lang3.event.EventListenerSupport.readObject(java.io.ObjectInputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.event.EventListenerSupport",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.pool.PoolStats.getPending",
      "parameters": [],
      "signature": "int org.apache.http.pool.PoolStats.getPending()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.pool.PoolStats",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.log",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.routing.RouteTracker.connectProxy",
      "parameters": [
        "org.apache.http.HttpHost",
        "boolean"
      ],
      "signature": "void org.apache.http.conn.routing.RouteTracker.connectProxy(org.apache.http.HttpHost, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.routing.RouteTracker",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.toByteArray",
      "parameters": [
        "java.net.URLConnection"
      ],
      "signature": "byte[] org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.portlet.PortletRequest.getParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setClob",
      "parameters": [
        "java.lang.String",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setClob(java.lang.String, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.warn",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.warn(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getPathInfo",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getPathInfo()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.NameClassPairCallbackHandler",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "void org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.NameClassPairCallbackHandler, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.RememberMeAuthenticationProvider.authenticate",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.Authentication org.springframework.security.authentication.RememberMeAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/3.1.8.CI-SNAPSHOT/apidocs/org/springframework/security/authentication/RememberMeAuthenticationProvider.html",
      "comment": "The input object is authenticated and returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs authentication with the same contract as {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)} .",
        "class": "An {@link AuthenticationProvider} implementation that validates {@link RememberMeAuthenticationToken}s. To be successfully validated, the {@link RememberMeAuthenticationToken#getKeyHash()} must match this class' {@link #getKey()}."
      },"return": "org.springframework.security.core.Authentication",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.error(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getHeaders",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequestWrapper.getHeaders(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.NameClassPairCallbackHandler",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "void org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.NameClassPairCallbackHandler, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.portlet.MockPortletRequest.setParameters",
      "parameters": [
        "java.util.Map"
      ],
      "signature": "void org.springframework.mock.web.portlet.MockPortletRequest.setParameters(java.util.Map)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/mock/web/portlet/MockPortletRequest.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Mock implementation of the {@link javax.portlet.PortletRequest} interface."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.error",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.pmw.tinylog.Logger.error(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild",
      "parameters": [
        "org.junit.runners.model.FrameworkMethod",
        "org.junit.runner.notification.RunNotifier"
      ],
      "signature": "void org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Perform the same logic as {@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)}, except that tests are determined to be ignored by {@link #isTestMethodIgnored(FrameworkMethod)}.",
        "class": "{@code SpringJUnit4ClassRunner} is a custom extension of JUnit's {@link BlockJUnit4ClassRunner} which provides functionality of the Spring TestContext Framework to standard JUnit tests by means of the {@link TestContextManager} and associated support classes and annotations. To use this class, simply annotate a JUnit 4 based test class with {@code @RunWith(SpringJUnit4ClassRunner.class)} or {@code @RunWith(SpringRunner.class)}. The following list constitutes all annotations currently supported directly or indirectly by {@code SpringJUnit4ClassRunner}. (Note that additional annotations may be supported by various {@link org.springframework.test.context.TestExecutionListener TestExecutionListener} or {@link org.springframework.test.context.TestContextBootstrapper TestContextBootstrapper} implementations.) {@link Test#expected() @Test(expected=...)} {@link Test#timeout() @Test(timeout=...)} {@link org.springframework.test.annotation.Timed @Timed} {@link org.springframework.test.annotation.Repeat @Repeat} {@link Ignore @Ignore} {@link org.springframework.test.annotation.ProfileValueSourceConfiguration @ProfileValueSourceConfiguration} {@link org.springframework.test.annotation.IfProfileValue @IfProfileValue} If you would like to use the Spring TestContext Framework with a runner other than this one, use {@link SpringClassRule} and {@link SpringMethodRule}. NOTE: As of Spring Framework 4.3, this class requires JUnit 4.12 or higher."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setDontTrackOpenResources",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setDontTrackOpenResources(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.trace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.trace(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.debug",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.pmw.tinylog.Logger.debug(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.getenv",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.System.getenv(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.getParameterMetaData",
      "parameters": [],
      "signature": "java.sql.ParameterMetaData com.mysql.jdbc.PreparedStatement.getParameterMetaData()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ParameterMetaData",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareCall",
      "parameters": [
        "java.lang.String",
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.CallableStatement java.sql.Connection.prepareCall(java.lang.String, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.CallableStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.html.PolicyFactory.sanitize",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.html.PolicyFactory.sanitize(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "A convenience function that sanitizes a string of HTML.",
        "class": "A factory that can be used to link a sanitizer to an output receiver and that provides a convenient {@link PolicyFactory#sanitize sanitize} method and a {@link PolicyFactory#and and} method to compose policies."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "owasp-java-html-sanitizer-r239.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.error(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getDeclaredMethod",
      "parameters": [
        "java.lang.String",
        "java.lang.Class[]"
      ],
      "signature": "java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code Method} object that reflects the specified declared method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a {@code String} that specifies the simple name of the desired method, and the {@code parameterTypes} parameter is an array of {@code Class} objects that identify the method's formal parameter types, in declared order. If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily. If the name is \"\"or \"\" a {@code NoSuchMethodException} is raised. If this {@code Class} object represents an array type, then this method does not find the {@code clone()} method.",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.lang.reflect.Method",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "java.io.Writer"
      ],
      "signature": "int org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.UnicodeUnescaper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateObject",
      "parameters": [
        "int",
        "java.lang.Object"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateObject(int, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForXPath",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForXPath(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in an XPath query. NB: The reference implementation encodes almost everything and may over-encode. The difficulty with XPath encoding is that XPath has no built in mechanism for escaping characters. It is possible to use XQuery in a parameterized way to prevent injection. For more information, refer to this article which specifies the following list of characters as the most dangerous: ^&\"*';<>(). This paper suggests disallowing ' and \" in queries.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "java.lang.Class",
        "com.opensymphony.xwork2.util.TextParseUtil.ParsedValueEvaluator"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.TextParseUtil.translateVariables(java.lang.String, com.opensymphony.xwork2.util.ValueStack, java.lang.Class, com.opensymphony.xwork2.util.TextParseUtil.ParsedValueEvaluator)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts.action.ActionForward.setPath",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts.action.ActionForward.setPath(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts.action.ActionForward",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-struts-1.2.4.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.ObjectWriter.hasPrefetchedSerializer",
      "parameters": [],
      "signature": "boolean com.fasterxml.jackson.databind.ObjectWriter.hasPrefetchedSerializer()",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.ObjectWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.info",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.info(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getResourceAsStream",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.Class",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.error(java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.XmlRpcServlet.log",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.xmlrpc.webserver.XmlRpcServlet.log(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xmlrpc.webserver.XmlRpcServlet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org-apache-xmlrpc.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getCookies",
      "parameters": [],
      "signature": "javax.servlet.http.Cookie[] javax.servlet.http.HttpServletRequest.getCookies()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.servlet.http.Cookie[]",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.EofSensorInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.conn.EofSensorInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.EofSensorInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.content.ContentProvider.update",
      "parameters": [
        "android.net.Uri",
        "android.content.ContentValues",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "int android.content.ContentProvider.update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.content.ContentProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getRunningCTS13",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getRunningCTS13()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.list",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.list(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.isTrue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean org.apache.struts2.util.StrutsUtil.isTrue(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.trace",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.trace(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "char[]",
        "int",
        "int"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(char[], int, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpCookie.asString",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpCookie.asString()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpCookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.extractStringFromNativeColumn",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.ResultSetImpl.extractStringFromNativeColumn(int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy.access$800",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Class[]"
      ],
      "signature": "java.lang.reflect.Method org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy.access$800(java.lang.String, java.lang.String, java.lang.Class[])",
      "framework": "spring",
      "link": "",
      "comment": "Counter example for sanitizer (implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Method",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.AbstractHttpServerConnection.sendResponseHeader",
      "parameters": [
        "org.apache.http.HttpResponse"
      ],
      "signature": "void org.apache.http.impl.AbstractHttpServerConnection.sendResponseHeader(org.apache.http.HttpResponse)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.AbstractHttpServerConnection",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.LoggingInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int org.apache.http.impl.conn.LoggingInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.LoggingInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize",
      "parameters": [
        "int",
        "org.apache.commons.codec.binary.BaseNCodec$Context"
      ],
      "signature": "byte[] org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int, org.apache.commons.codec.binary.BaseNCodec$Context)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.codec.binary.BaseNCodec",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.DirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.DirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.copyFileToDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.Message.setDescription",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.mail.Message.setDescription(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getRemoteAddr",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getRemoteAddr()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getRemoteAddr() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.delete",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.hibernate.internal.SessionImpl.delete(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Remove a persistent instance from the datastore. The object argument may be an instance associated with the receiving Session or a transient instance with an identifier associated with existing persistent state. This operation cascades to associated instances if the association is mapped with {@code cascade=\"delete\"}",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setBinaryStream",
      "parameters": [
        "int",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setBinaryStream(int, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetMetaData.isReadOnly",
      "parameters": [
        "int"
      ],
      "signature": "boolean com.mysql.jdbc.ResultSetMetaData.isReadOnly(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.core.util.TypedNull.getType",
      "parameters": [],
      "signature": "java.lang.Class com.thoughtworks.xstream.core.util.TypedNull.getType()",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.core.util.TypedNull",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.append",
      "parameters": [
        "char"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.append(char)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.NTLMScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.NTLMScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/NTLMScheme.html",
      "comment": "Produces an authentication string for the given credentials.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces an authorization string for the given set of {@link Credentials}.",
        "class": "NTLM is a proprietary authentication scheme developed by Microsoft and optimized for Windows platforms."
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setShort",
      "parameters": [
        "int",
        "short"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setShort(int, short)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.execSQL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void android.database.sqlite.SQLiteDatabase.execSQL(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ClassLoader.getResource",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.net.URL java.lang.ClassLoader.getResource(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URL",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.exception.NestableDelegate.getStackFrames",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "java.lang.String[] org.apache.commons.lang.exception.NestableDelegate.getStackFrames(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.exception.NestableDelegate",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.XmlRpcServletServer.getConfig",
      "parameters": [
        "javax.servlet.http.HttpServletRequest"
      ],
      "signature": "org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl org.apache.xmlrpc.webserver.XmlRpcServletServer.getConfig(javax.servlet.http.HttpServletRequest)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/XmlRpcServletServer.html",
      "comment": "Counter example for sanitizer.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "An extension of {@link org.apache.xmlrpc.server.XmlRpcServer}, which is suitable for processing servlet requests."
      },"return": "org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.ws.rs.core.MultivaluedMap.getFirst",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.Object javax.ws.rs.core.MultivaluedMap.getFirst(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "javax.ws.rs.core.MultivaluedMap",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.ws.rs.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.update",
      "parameters": [
        "java.lang.String",
        "android.content.ContentValues",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "int android.database.sqlite.SQLiteDatabase.update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.GlobalLocalizedTextProvider.findText",
      "parameters": [
        "java.util.ResourceBundle",
        "java.lang.String",
        "java.util.Locale"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.GlobalLocalizedTextProvider.findText(java.util.ResourceBundle, java.lang.String, java.util.Locale)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.GlobalLocalizedTextProvider",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.parsers.AbstractSAXParser.getAttributePSVI",
      "parameters": [
        "int"
      ],
      "signature": "com.google.gxp.org.apache.xerces.xs.AttributePSVI com.google.gxp.org.apache.xerces.parsers.AbstractSAXParser.getAttributePSVI(int)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.parsers.AbstractSAXParser",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.google.gxp.org.apache.xerces.xs.AttributePSVI",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ThresholdingOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ThresholdingOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ThresholdingOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.log",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.write",
      "parameters": [
        "int"
      ],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.write(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.saveOrUpdate",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.hibernate.internal.SessionImpl.saveOrUpdate(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Either {@link #save(String, Object)} or {@link #update(String, Object)} the given instance, depending upon resolution of the unsaved-value checks (see the manual for discussion of unsaved-value checking). This operation cascades to associated instances if the association is mapped with {@code cascade=\"save-update\"}",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.copyLarge",
      "parameters": [
        "java.io.InputStream",
        "java.io.OutputStream",
        "byte[]"
      ],
      "signature": "long org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.InitialLdapContext.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.ldap.InitialLdapContext.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.InitialLdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "java.lang.String",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.log",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.log(org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.DigestScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.DigestScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/DigestScheme.html",
      "comment": "Produces an authentication string for the given credentials.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces a digest authorization string for the given set of {@link Credentials}, method name and URI.",
        "class": "Digest authentication scheme as defined in RFC 2617. Both MD5 (default) and MD5-sess are supported. Currently only qop=auth or no qop is supported. qop=auth-int is unsupported. If auth and auth-int are provided, auth is used. Credential charset is configured via the {@link org.apache.http.auth.params.AuthPNames#CREDENTIAL_CHARSET} parameter of the HTTP request. Since the digest username is included as clear text in the generated Authentication header, the charset of the username must be compatible with the {@link org.apache.http.params.CoreProtocolPNames#HTTP_ELEMENT_CHARSET http element charset}. The following parameters can be used to customize the behavior of this class: {@link org.apache.http.auth.params.AuthPNames#CREDENTIAL_CHARSET}"
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletResponseWrapper.setCharacterEncoding",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.ServletResponseWrapper.setCharacterEncoding(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call setCharacterEncoding(String charset) on the wrapped response object.",
        "class": "Provides a convenient implementation of the ServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getAlwaysSendSetIsolation",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getAlwaysSendSetIsolation()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forJavaScriptBlock",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forJavaScriptBlock(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This method encodes for JavaScript strings contained within HTML script blocks. It is NOT safe for use in script attributes (such as onclick). The caller must provide the surrounding quotation characters. This method performs the same encode as {@link #forJavaScript(String)} with the exception that \" and ' are encoded as \\\" and \\' respectively. Unless you are interested in saving a few bytes of output or are writing a framework on top of this library, it is recommend that you use {@link #forJavaScript(String)} over this method. Example JSP Usage:     \n        var data = \"\";",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.print",
      "parameters": [
        "int"
      ],
      "signature": "void java.io.PrintWriter.print(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Prints an integer. The string produced by {@link java.lang.String#valueOf(int)} is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the {@link #write(int)} method.",
        "class": "Prints formatted representations of objects to a text-output stream. This class implements all of the print methods found in {@link PrintStream}. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams. Unlike the {@link PrintStream} class, if automatic flushing is enabled it will be done only when one of the println, printf, or format methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character. Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking {@link #checkError checkError()}."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "char"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(char)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapContext.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.ldap.LdapContext.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setValue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.Cookie.setValue(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.info(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.error",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.error(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.LoggingOutputStream.write",
      "parameters": [
        "byte[]"
      ],
      "signature": "void org.apache.http.impl.conn.LoggingOutputStream.write(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.LoggingOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateDate",
      "parameters": [
        "java.lang.String",
        "java.sql.Date"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateDate(java.lang.String, java.sql.Date)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xpath.regex.RegexParser.processBacksolidus_C",
      "parameters": [],
      "signature": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Token com.google.gxp.org.apache.xerces.impl.xpath.regex.RegexParser.processBacksolidus_C()",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xpath.regex.RegexParser",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Token",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.copy",
      "parameters": [
        "java.io.InputStream",
        "java.io.Writer",
        "java.nio.charset.Charset"
      ],
      "signature": "void org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "kotlin.io.FilesKt.createTempDir$default",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.io.File",
        "Ijava.lang.Object"
      ],
      "signature": "java.io.File kotlin.io.FilesKt.createTempDir$default(java.lang.String, java.lang.String, java.io.File, Ijava.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "kotlin.io.FilesKt",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "kotlin-stdlib-1.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getRequestURL",
      "parameters": [],
      "signature": "java.lang.StringBuffer javax.servlet.http.HttpServletRequest.getRequestURL()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuffer",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.log",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.log(org.apache.log4j.Priority, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetMetaData.getColumnName",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.ResultSetMetaData.getColumnName(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getQualityCSV",
      "parameters": [
        "org.eclipse.jetty.http.HttpHeader"
      ],
      "signature": "java.util.List org.eclipse.jetty.http.HttpFields.getQualityCSV(org.eclipse.jetty.http.HttpHeader)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.getParameterBindings",
      "parameters": [],
      "signature": "com.mysql.jdbc.ParameterBindings com.mysql.jdbc.PreparedStatement.getParameterBindings()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.ParameterBindings",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBytes",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBytes(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.error",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.error(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.ComparatorUtils.reversedComparator",
      "parameters": [
        "java.util.Comparator"
      ],
      "signature": "java.util.Comparator org.apache.commons.collections.ComparatorUtils.reversedComparator(java.util.Comparator)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.ComparatorUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Comparator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.info(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringEscapeUtils.escapeCsv",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.StringEscapeUtils.escapeCsv(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.StringEscapeUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.message.ParserCursor.updatePos",
      "parameters": [
        "int"
      ],
      "signature": "void org.apache.http.message.ParserCursor.updatePos(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.message.ParserCursor",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.nativeSQL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.sql.Connection.nativeSQL(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.moveDirectoryToDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getLocalName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequest.getLocalName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getSetMethod",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Method com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getSetMethod(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Method",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.decodeFromURL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.decodeFromURL(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Decode from URL. Implementations should first canonicalize and detect any double-encoding. If this check passes, then the data is decoded using URL decoding.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getURL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.net.URL com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getURL(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URL",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.ArrayUtils.toObject",
      "parameters": [
        "int[]"
      ],
      "signature": "java.lang.Integer[] org.apache.commons.lang.ArrayUtils.toObject(int[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.ArrayUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Integer[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.BufferedWriter.write",
      "parameters": [
        "int"
      ],
      "signature": "void java.io.BufferedWriter.write(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Writes a single character.",
        "class": "Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings. The buffer size may be specified, or the default size may be accepted. The default is large enough for most purposes. A newLine() method is provided, which uses the platform's own notion of line separator as defined by the system property line.separator. Not all platforms use the newline character ('\\n') to terminate lines. Calling this method to terminate each output line is therefore preferred to writing a newline character directly. In general, a Writer sends its output immediately to the underlying character or byte stream. Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters. For example,  PrintWriter out\n   = new PrintWriter(new BufferedWriter(new FileWriter(\"foo.out\")));\n will buffer the PrintWriter's output to the file. Without buffering, each invocation of a print() method would cause characters to be converted into bytes that would then be written immediately to the file, which can be very inefficient."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPath.evaluate",
      "parameters": [
        "java.lang.String",
        "org.xml.sax.InputSource",
        "javax.xml.namespace.QName"
      ],
      "signature": "java.lang.Object javax.xml.xpath.XPath.evaluate(java.lang.String, org.xml.sax.InputSource, javax.xml.namespace.QName)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.xpath.XPath",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.ObjectMessage.readObject",
      "parameters": [
        "java.io.ObjectInputStream"
      ],
      "signature": "void org.apache.logging.log4j.message.ObjectMessage.readObject(java.io.ObjectInputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.ObjectMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getObject",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.Object com.mysql.jdbc.CallableStatement.getObject(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.info",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.info(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.error(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileInputStream.<init>",
      "parameters": [],
      "signature": "void java.io.FileInputStream.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.FileInputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.exception.ExceptionUtils.getStackTrace",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "java.lang.String org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.exception.ExceptionUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.DatabaseUtils.blobFileDescriptorForQuery",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "android.os.ParcelFileDescriptor android.database.DatabaseUtils.blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.DatabaseUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.os.ParcelFileDescriptor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, int, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectSingleNode",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.Node org.apache.xpath.XPathAPI.selectSingleNode(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.escapeCsv",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.escapeCsv(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code String} value for a CSV column enclosed in double quotes, if required. If the value contains a comma, newline or double quote, then the String value is returned enclosed in double quotes. Any double quote characters in the value are escaped with another double quote. If the value does not contain a comma, newline or double quote, then the String value is returned unchanged. see Wikipedia and RFC 4180.",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockJspWriter.println",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.springframework.mock.web.MockJspWriter.println(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/MockJspWriter.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Print a String and then terminate the line. This method behaves as though it invokes {@link #print(String)} and then {@link #println()}.",
        "class": "Mock implementation of the {@link javax.servlet.jsp.JspWriter} class. Used for testing the web framework; only necessary for testing applications when testing custom JSP tags."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppVersion",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppVersion()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.XmlRpcServlet.class$",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Class org.apache.xmlrpc.webserver.XmlRpcServlet.class$(java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/XmlRpcServlet.html",
      "comment": "Counter example for sanitizer (String as param, but implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getParameterValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] javax.servlet.ServletRequestWrapper.getParameterValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getParameterValues(String name) on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.debug(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.LDAPConnection.disconnect",
      "parameters": [
        "com.novell.ldap.LDAPConstraints"
      ],
      "signature": "void com.novell.ldap.LDAPConnection.disconnect(com.novell.ldap.LDAPConstraints)",
      "framework": "generaljava",
      "link": "https://www.novell.com/documentation/developer/jldap/jldapenu/api/com/novell/ldap/LDAPConnection.html",
      "comment": "Puts the program in a unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Synchronously disconnects from the LDAP server. Before the object can perform LDAP operations again, it must reconnect to the server by calling connect. The disconnect method abandons any outstanding requests, issues an unbind request to the server, and then closes the socket.",
        "class": "The central class that encapsulates the connection to a directory server through the LDAP protocol. LDAPConnection objects are used to perform common LDAP operations such as search, modify and add. In addition, LDAPConnection objects allow you to bind to an LDAP server, set connection and search constraints, and perform several other tasks. An LDAPConnection object is not connected on construction and can only be connected to one server at one port. Multiple threads may share this single connection, typically by cloning the connection object, one for each thread. An application may have more than one LDAPConnection object, connected to the same or different directory servers. Sample Code: Search.java"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forXml",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forXml(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encoder for XML and XHTML. See {@link #forHtml(String)} for a description of the encoding and context.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.ExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.ExpressionParser.parseExpression(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.ExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.DigestScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.DigestScheme.authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/DigestScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces a digest authorization string for the given set of {@link Credentials}, method name and URI.",
        "class": "Digest authentication scheme as defined in RFC 2617. Both MD5 (default) and MD5-sess are supported. Currently only qop=auth or no qop is supported. qop=auth-int is unsupported. If auth and auth-int are provided, auth is used. Credential charset is configured via the {@link org.apache.commons.httpclient.params.HttpMethodParams#CREDENTIAL_CHARSET credential charset} parameter. Since the digest username is included as clear text in the generated Authentication header, the charset of the username must be compatible with the {@link org.apache.commons.httpclient.params.HttpMethodParams#HTTP_ELEMENT_CHARSET http element charset}. TODO: make class more stateful regarding repeated authentication requests"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getValue(java.lang.String, java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ProcessBuilder.command",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "java.lang.ProcessBuilder java.lang.ProcessBuilder.command(java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.ProcessBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.ProcessBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringEscapeUtils.unescapeCsv",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.StringEscapeUtils.unescapeCsv(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.StringEscapeUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForVBScript",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForVBScript(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for insertion inside a data value in a Visual Basic script. Putting user data directly inside a script is quite dangerous. Great care must be taken to prevent putting user data directly into script code itself, as no amount of encoding will prevent attacks there. This method is not recommended as VBScript is only supported by Internet Explorer",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.query",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapName.<init>",
      "parameters": [],
      "signature": "void javax.naming.ldap.LdapName.<init>()",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapName",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager.getDefaultRegistry",
      "parameters": [],
      "signature": "org.apache.http.config.Registry org.apache.http.impl.conn.PoolingHttpClientConnectionManager.getDefaultRegistry()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.config.Registry",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringUtils.wrap",
      "parameters": [
        "java.lang.String",
        "char"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringUtils.wrap(java.lang.String, char)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.StringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getRemoteHost",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getRemoteHost()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getRemoteHost() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.setNString",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.setNString(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.substring",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String java.lang.String.substring(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileSystemUtils.performCommand",
      "parameters": [
        "java.lang.String[]",
        "int",
        "long"
      ],
      "signature": "java.util.List org.apache.commons.io.FileSystemUtils.performCommand(java.lang.String[], int, long)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileSystemUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.server.ReflectiveXmlRpcHandler.execute",
      "parameters": [
        "org.apache.xmlrpc.XmlRpcRequest"
      ],
      "signature": "java.lang.Object org.apache.xmlrpc.server.ReflectiveXmlRpcHandler.execute(org.apache.xmlrpc.XmlRpcRequest)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/ReflectiveXmlRpcHandler.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79",
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs the request and returns the result object.",
        "class": "Default implementation of {@link XmlRpcHandler}."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequestWrapper.getParameterNames()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.TeeInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int org.apache.commons.io.input.TeeInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.TeeInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getLocalName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getLocalName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.message.AbstractHttpMessage.addHeader",
      "parameters": [
        "org.apache.http.Header"
      ],
      "signature": "void org.apache.http.message.AbstractHttpMessage.addHeader(org.apache.http.Header)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.message.AbstractHttpMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.ServletOutputStreamImpl.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.xmlrpc.webserver.ServletOutputStreamImpl.write(byte[], int, int)",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/org.apache.xmlrpc/xmlrpc-server/3.1/org/apache/xmlrpc/webserver/ServletOutputStreamImpl.java",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Default implementation of a servlet output stream. Handles output of HTTP headers."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getCSV",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.util.List org.eclipse.jetty.http.HttpFields.getCSV(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.jsp.ui.OgnlTool.findValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object org.apache.struts2.views.jsp.ui.OgnlTool.findValue(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.jsp.ui.OgnlTool",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.l7dlog",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.HttpClientBuilder.setRetryHandler",
      "parameters": [
        "org.apache.http.client.HttpRequestRetryHandler"
      ],
      "signature": "org.apache.http.impl.client.HttpClientBuilder org.apache.http.impl.client.HttpClientBuilder.setRetryHandler(org.apache.http.client.HttpRequestRetryHandler)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.HttpClientBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.impl.client.HttpClientBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.getField",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Field com.opensymphony.xwork2.util.reflection.ReflectionProvider.getField(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Field",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setValue(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getPadCharsWithSpace",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getPadCharsWithSpace()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jca.work.DelegatingWork.run",
      "parameters": [],
      "signature": "void org.springframework.jca.work.DelegatingWork.run()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/work/DelegatingWork.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Delegates execution to the underlying Runnable.",
        "class": "Simple Work adapter that delegates to a given Runnable."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.<init>",
      "parameters": [
        "java.nio.channels.ReadableByteChannel"
      ],
      "signature": "void java.util.Scanner.<init>(java.nio.channels.ReadableByteChannel)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Constructs a new Scanner that produces values scanned from the specified channel. Bytes from the source are converted into characters using the underlying platform's {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.",
        "class": "A simple text scanner which can parse primitive types and strings using regular expressions. A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods. For example, this code allows a user to read a number from System.in: {@code\n     Scanner sc = new Scanner(System.in);\n     int i = sc.nextInt();\n } As another example, this code allows long types to be assigned from entries in a file myNumbers: {@code\n      Scanner sc = new Scanner(new File(\"myNumbers\"));\n      while (sc.hasNextLong()) {\n          long aLong = sc.nextLong();\n      }\n } The scanner can also use delimiters other than whitespace. This example reads several items in from a string: {@code\n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input).useDelimiter(\"\\\\s*fish\\\\s*\");\n     System.out.println(s.nextInt());\n     System.out.println(s.nextInt());\n     System.out.println(s.next());\n     System.out.println(s.next());\n     s.close();\n } prints the following output: {@code\n     1\n     2\n     red\n     blue\n } The same output can be generated with this code, which uses a regular expression to parse all four tokens at once: {@code\n     String input = \"1 fish 2 fish red fish blue fish\";\n     Scanner s = new Scanner(input);\n     s.findInLine(\"(\\\\d+) fish (\\\\d+) fish (\\\\w+) fish (\\\\w+)\");\n     MatchResult result = s.match();\n     for (int i=1; i<=result.groupCount(); i++)\n         System.out.println(result.group(i));\n     s.close();\n } The default whitespace delimiter used by a scanner is as recognized by {@link java.lang.Character}.{@link java.lang.Character#isWhitespace(char) isWhitespace}. The {@link #reset} method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed. A scanning operation may block waiting for input. The {@link #next} and {@link #hasNext} methods and their primitive-type companion methods (such as {@link #nextInt} and {@link #hasNextInt}) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both hasNext and next methods may block waiting for further input. Whether a hasNext method blocks has no connection to whether or not its associated next method will block. The {@link #findInLine}, {@link #findWithinHorizon}, and {@link #skip} methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input. When a scanner throws an {@link InputMismatchException}, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method. Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern \"\\\\s+\" will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern \"\\\\s\" could return empty tokens since it only passes one space at a time. A scanner can read text from any object which implements the {@link java.lang.Readable} interface. If an invocation of the underlying readable's {@link java.lang.Readable#read} method throws an {@link java.io.IOException} then the scanner assumes that the end of the input has been reached. The most recent IOException thrown by the underlying readable can be retrieved via the {@link #ioException} method. When a Scanner is closed, it will close its input source if the source implements the {@link java.io.Closeable} interface. A Scanner is not safe for multithreaded use without external synchronization. Unless otherwise mentioned, passing a null parameter into any method of a Scanner will cause a NullPointerException to be thrown. A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the {@link #useRadix} method. The {@link #reset} method will reset the value of the scanner's radix to 10 regardless of whether it was previously changed. Localized numbers An instance of this class is capable of scanning numbers in the standard formats as well as in the formats of the scanner's locale. A scanner's initial locale is the value returned by the {@link java.util.Locale#getDefault(Locale.Category) Locale.getDefault(Locale.Category.FORMAT)} method; it may be changed via the {@link #useLocale} method. The {@link #reset} method will reset the value of the scanner's locale to the initial locale regardless of whether it was previously changed. The localized formats are defined in terms of the following parameters, which for a particular locale are taken from that locale's {@link java.text.DecimalFormat DecimalFormat} object, df, and its and {@link java.text.DecimalFormatSymbols DecimalFormatSymbols} object, dfs. LocalGroupSeparator The character used to separate thousands groups, i.e., dfs.{@link java.text.DecimalFormatSymbols#getGroupingSeparator getGroupingSeparator()} LocalDecimalSeparator The character used for the decimal point, i.e., dfs.{@link java.text.DecimalFormatSymbols#getDecimalSeparator getDecimalSeparator()} LocalPositivePrefix The string that appears before a positive number (may be empty), i.e., df.{@link java.text.DecimalFormat#getPositivePrefix getPositivePrefix()} LocalPositiveSuffix The string that appears after a positive number (may be empty), i.e., df.{@link java.text.DecimalFormat#getPositiveSuffix getPositiveSuffix()} LocalNegativePrefix The string that appears before a negative number (may be empty), i.e., df.{@link java.text.DecimalFormat#getNegativePrefix getNegativePrefix()} LocalNegativeSuffix The string that appears after a negative number (may be empty), i.e., df.{@link java.text.DecimalFormat#getNegativeSuffix getNegativeSuffix()} LocalNaN The string that represents not-a-number for floating-point values, i.e., dfs.{@link java.text.DecimalFormatSymbols#getNaN getNaN()} LocalInfinity The string that represents infinity for floating-point values, i.e., dfs.{@link java.text.DecimalFormatSymbols#getInfinity getInfinity()} Number syntax The strings that can be parsed as numbers by an instance of this class are specified in terms of the following regular-expression grammar, where Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10). NonAsciiDigit: A non-ASCII character c for which {@link java.lang.Character#isDigit Character.isDigit}(c) returns true Non0Digit: [1-Rmax] | NonASCIIDigit Digit: [0-Rmax] | NonASCIIDigit GroupedNumeral: ( Non0Digit Digit? Digit? ( LocalGroupSeparator Digit Digit Digit )+ ) Numeral: ( ( Digit+ ) | GroupedNumeral ) Integer: ( [-+]? ( Numeral ) ) | LocalPositivePrefix Numeral LocalPositiveSuffix | LocalNegativePrefix Numeral LocalNegativeSuffix DecimalNumeral: Numeral | Numeral LocalDecimalSeparator Digit* | LocalDecimalSeparator Digit+ Exponent: ( [eE] [+-]? Digit+ ) Decimal: ( [-+]? DecimalNumeral Exponent? ) | LocalPositivePrefix DecimalNumeral LocalPositiveSuffix Exponent? | LocalNegativePrefix DecimalNumeral LocalNegativeSuffix Exponent? HexFloat: [-+]? 0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+ ([pP][-+]?[0-9]+)? NonNumber: NaN | LocalNan | Infinity | LocalInfinity SignedNonNumber: ( [-+]? NonNumber ) | LocalPositivePrefix NonNumber LocalPositiveSuffix | LocalNegativePrefix NonNumber LocalNegativeSuffix Float: Decimal | HexFloat | SignedNonNumber Whitespace is not significant in the above regular expressions."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setMaintainTimeStats",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setMaintainTimeStats(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.addBatch",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.sql.PreparedStatement.addBatch(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.wasNull",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.CallableStatement.wasNull()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getRequestURI",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getRequestURI()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.monitor.FileAlterationObserver.getListeners",
      "parameters": [],
      "signature": "java.lang.Iterable org.apache.commons.io.monitor.FileAlterationObserver.getListeners()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.monitor.FileAlterationObserver",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Iterable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String[]"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String[], java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.BasicScheme.authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces basic authorization string for the given set of {@link Credentials}.",
        "class": "Basic authentication scheme as defined in RFC 2617."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.DirectoryWalker.handleRestricted",
      "parameters": [
        "java.io.File",
        "int",
        "java.util.Collection"
      ],
      "signature": "void org.apache.commons.io.DirectoryWalker.handleRestricted(java.io.File, int, java.util.Collection)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.DirectoryWalker",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.DirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.DirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.BasicClientCookie.toString",
      "parameters": [],
      "signature": "java.lang.String org.apache.http.impl.cookie.BasicClientCookie.toString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.BasicClientCookie",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.mysql.jdbc.CallableStatement.getString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.exiting",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void java.util.logging.Logger.exiting(java.lang.String, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.spml.NoAuthImpl.logout",
      "parameters": [],
      "signature": "void com.novell.ldap.spml.NoAuthImpl.logout()",
      "framework": "ldap",
      "link": "https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/LoginContext.html",
      "comment": "Puts the program is an unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.MysqlIO.getServerVersion",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.MysqlIO.getServerVersion()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.MysqlIO",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForHTML",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForHTML(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in HTML using HTML entity encoding Note that the following characters: 00-08, 0B-0C, 0E-1F, and 7F-9F cannot be used in HTML.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getTreatUtilDateAsTimestamp",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getTreatUtilDateAsTimestamp()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.getProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.System.getProperty(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppCodeName",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorAppCodeName()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.PrefixFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.PrefixFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.PrefixFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.event.EventDirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.event.EventDirContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.event.EventDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xalan.xsltc.runtime.BasisLibrary.replace",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.xalan.xsltc.runtime.BasisLibrary.replace(java.lang.String, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://xml.apache.org/xalan-j/apidocs/org/apache/xalan/xsltc/runtime/BasisLibrary.html",
      "comment": "String replacement",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replace a certain character in a string with a new substring.",
        "class": "Standard XSLT functions. All standard functions expect the current node and the DOM as their last two arguments."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getFieldNames",
      "parameters": [],
      "signature": "java.util.Enumeration org.eclipse.jetty.http.HttpFields.getFieldNames()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.println",
      "parameters": [
        "char[]"
      ],
      "signature": "void java.io.PrintWriter.println(char[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.log",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.log(org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setTcpRcvBuf",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setTcpRcvBuf(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.NegotiateScheme.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.http.impl.auth.NegotiateScheme.getParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.auth.NegotiateScheme",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.error(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.util.PublicSuffixListParser.parse",
      "parameters": [
        "java.io.Reader"
      ],
      "signature": "org.apache.http.conn.util.PublicSuffixList org.apache.http.conn.util.PublicSuffixListParser.parse(java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.util.PublicSuffixListParser",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.conn.util.PublicSuffixList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.RFC2617Scheme.readObject",
      "parameters": [
        "java.io.ObjectInputStream"
      ],
      "signature": "void org.apache.http.impl.auth.RFC2617Scheme.readObject(java.io.ObjectInputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.auth.RFC2617Scheme",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.Rdn.unescapeValue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.ldap.Rdn.unescapeValue(java.lang.String)",
      "framework": "ldap",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Given an attribute value string formated according to the rules specified in RFC 2253, returns the unformated value. Escapes and quotes are stripped away, and hex-encoded UTF-8 is converted to equivalent UTF-16 characters. Returns a string value as a String, and a binary value as a byte array. Legal and illegal values are defined in RFC 2253. This method is generous in accepting the values and does not catch all illegal values. Therefore, passing in an illegal value might not necessarily trigger an IllegalArgumentException.",
        "class": "This class represents a relative distinguished name, or RDN, which is a component of a distinguished name as specified by RFC 2253. An example of an RDN is \"OU=Sales+CN=J.Smith\". In this example, the RDN consist of multiple attribute type/value pairs. The RDN is parsed as described in the class description for {@link javax.naming.ldap.LdapName LdapName}. The Rdn class represents an RDN as attribute type/value mappings, which can be viewed using {@link javax.naming.directory.Attributes Attributes}. In addition, it contains convenience methods that allow easy retrieval of type and value when the Rdn consist of a single type/value pair, which is how it appears in a typical usage. It also contains helper methods that allow escaping of the unformatted attribute value and unescaping of the value formatted according to the escaping syntax defined in RFC2253. For methods that take or return attribute value as an Object, the value is either a String (in unescaped form) or a byte array. Rdn will properly parse all valid RDNs, but does not attempt to detect all possible violations when parsing invalid RDNs. It is \"generous\" in accepting invalid RDNs. The \"validity\" of a name is determined ultimately when it is supplied to an LDAP server, which may accept or reject the name based on factors such as its schema information and interoperability considerations. The following code example shows how to construct an Rdn using the constructor that takes type and value as arguments:       Rdn rdn = new Rdn(\"cn\", \"Juicy, Fruit\");\n      System.out.println(rdn.toString());\n The last line will print cn=Juicy\\, Fruit. The {@link #unescapeValue(String) unescapeValue()} method can be used to unescape the escaped comma resulting in the original value \"Juicy, Fruit\". The {@link #escapeValue(Object) escapeValue()} method adds the escape back preceding the comma. This class can be instantiated by a string representation of the RDN defined in RFC 2253 as shown in the following code example:       Rdn rdn = new Rdn(\"cn=Juicy\\\\, Fruit\");\n      System.out.println(rdn.toString());\n The last line will print cn=Juicy\\, Fruit. Concurrent multithreaded read-only access of an instance of Rdn need not be synchronized. Unless otherwise noted, the behavior of passing a null argument to a constructor or method in this class will cause NullPointerException to be thrown."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.MapMessage.asString",
      "parameters": [],
      "signature": "java.lang.String org.apache.logging.log4j.message.MapMessage.asString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.MapMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findValue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.ValueStack.findValue(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateDefault",
      "parameters": [
        "org.apache.commons.httpclient.HttpMethod",
        "org.apache.commons.httpclient.HttpConnection",
        "org.apache.commons.httpclient.HttpState"
      ],
      "signature": "boolean org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/HttpAuthenticator.html",
      "comment": "Depricated method. The credentials are provided in the HttpState. The authentication is added to the header of the HttpMethod.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          2,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempt to provide default authentication credentials to the given method in the given context using basic authentication scheme.",
        "class": "Utility methods for HTTP authorization and authentication. This class provides utility methods for generating responses to HTTP www and proxy authentication challenges. A client SHOULD assume that all paths at or deeper than the depth of the last symbolic element in the path field of the Request-URI also are within the protection space specified by the basic realm value of the current challenge. A client MAY preemptively send the corresponding Authorization header with requests for resources in that space without receipt of another challenge from the server. Similarly, when a client sends a request to a proxy, it may reuse a userid and password in the Proxy-Authorization header field without receiving another challenge from the proxy server."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "java.lang.StringBuffer",
        "java.io.OutputStream",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.LogFactory.getConfigurationFile",
      "parameters": [
        "java.lang.ClassLoader",
        "java.lang.String"
      ],
      "signature": "java.util.Properties org.apache.commons.logging.LogFactory.getConfigurationFile(java.lang.ClassLoader, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.LogFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Properties",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.error",
      "parameters": [
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.error(org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.UserCredentials.getClientSecret",
      "parameters": [],
      "signature": "java.lang.String com.google.auth.oauth2.UserCredentials.getClientSecret()",
      "framework": "oauth",
      "link": "http://google.github.io/google-auth-library-java/releases/0.6.0/apidocs/com/google/auth/oauth2/UserCredentials.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns client secret of the credential from the console.",
        "class": "OAuth2 Credentials representing a user's identity and consent."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.security.auth.login.LoginContext.login",
      "parameters": [],
      "signature": "void javax.security.auth.login.LoginContext.login()",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/LoginContext.html",
      "comment": "Login",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Perform the authentication. This method invokes the {@code login} method for each LoginModule configured for the name specified to the {@code LoginContext} constructor, as determined by the login {@code Configuration}. Each {@code LoginModule} then performs its respective type of authentication (username/password, smart card pin verification, etc.). This method completes a 2-phase authentication process by calling each configured LoginModule's {@code commit} method if the overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT, and OPTIONAL LoginModules succeeded), or by calling each configured LoginModule's {@code abort} method if the overall authentication failed. If authentication succeeded, each successful LoginModule's {@code commit} method associates the relevant Principals and Credentials with the {@code Subject}. If authentication failed, each LoginModule's {@code abort} method removes/destroys any previously stored state. If the {@code commit} phase of the authentication process fails, then the overall authentication fails and this method invokes the {@code abort} method for each configured {@code LoginModule}. If the {@code abort} phase fails for any reason, then this method propagates the original exception thrown either during the {@code login} phase or the {@code commit} phase. In either case, the overall authentication fails. In the case where multiple LoginModules fail, this method propagates the exception raised by the first {@code LoginModule} which failed. Note that if this method enters the {@code abort} phase (either the {@code login} or {@code commit} phase failed), this method invokes all LoginModules configured for the application regardless of their respective {@code Configuration} flag parameters. Essentially this means that {@code Requisite} and {@code Sufficient} semantics are ignored during the {@code abort} phase. This guarantees that proper cleanup and state restoration can take place.",
        "class": "The {@code LoginContext} class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A {@code Configuration} specifies the authentication technology, or {@code LoginModule}, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself. In addition to supporting pluggable authentication, this class also supports the notion of stacked authentication. Applications may be configured to use more than one LoginModule. For example, one could configure both a Kerberos LoginModule and a smart card LoginModule under an application. A typical caller instantiates a LoginContext with a name and a {@code CallbackHandler}. LoginContext uses the name as the index into a Configuration to determine which LoginModules should be used, and which ones must succeed in order for the overall authentication to succeed. The {@code CallbackHandler} is passed to the underlying LoginModules so they may communicate and interact with users (prompting for a username and password via a graphical user interface, for example). Once the caller has instantiated a LoginContext, it invokes the {@code login} method to authenticate a {@code Subject}. The {@code login} method invokes the configured modules to perform their respective types of authentication (username/password, smart card pin verification, etc.). Note that the LoginModules will not attempt authentication retries nor introduce delays if the authentication fails. Such tasks belong to the LoginContext caller. If the {@code login} method returns without throwing an exception, then the overall authentication succeeded. The caller can then retrieve the newly authenticated Subject by invoking the {@code getSubject} method. Principals and Credentials associated with the Subject may be retrieved by invoking the Subject's respective {@code getPrincipals}, {@code getPublicCredentials}, and {@code getPrivateCredentials} methods. To logout the Subject, the caller calls the {@code logout} method. As with the {@code login} method, this {@code logout} method invokes the {@code logout} method for the configured modules. A LoginContext should not be used to authenticate more than one Subject. A separate LoginContext should be used to authenticate each different Subject. The following documentation applies to all LoginContext constructors: {@code Subject} If the constructor has a Subject input parameter, the LoginContext uses the caller-specified Subject object. If the caller specifies a {@code null} Subject and a {@code null} value is permitted, the LoginContext instantiates a new Subject. If the constructor does not have a Subject input parameter, the LoginContext instantiates a new Subject. {@code Configuration} If the constructor has a Configuration input parameter and the caller specifies a non-null Configuration, the LoginContext uses the caller-specified Configuration. If the constructor does not have a Configuration input parameter, or if the caller specifies a {@code null} Configuration object, the constructor uses the following call to get the installed Configuration:       config = Configuration.getConfiguration();\n For both cases, the name argument given to the constructor is passed to the {@code Configuration.getAppConfigurationEntry} method. If the Configuration has no entries for the specified name, then the {@code LoginContext} calls {@code getAppConfigurationEntry} with the name, \"other\" (the default entry name). If there is no entry for \"other\", then a {@code LoginException} is thrown. When LoginContext uses the installed Configuration, the caller requires the createLoginContext.name and possibly createLoginContext.other AuthPermissions. Furthermore, the LoginContext will invoke configured modules from within an {@code AccessController.doPrivileged} call so that modules that perform security-sensitive tasks (such as connecting to remote hosts, and updating the Subject) will require the respective permissions, but the callers of the LoginContext will not require those permissions. When LoginContext uses a caller-specified Configuration, the caller does not require any createLoginContext AuthPermission. The LoginContext saves the {@code AccessControlContext} for the caller, and invokes the configured modules from within an {@code AccessController.doPrivileged} call constrained by that context. This means the caller context (stored when the LoginContext was created) must have sufficient permissions to perform any security-sensitive tasks that the modules may perform. {@code CallbackHandler} If the constructor has a CallbackHandler input parameter, the LoginContext uses the caller-specified CallbackHandler object. If the constructor does not have a CallbackHandler input parameter, or if the caller specifies a {@code null} CallbackHandler object (and a {@code null} value is permitted), the LoginContext queries the {@code auth.login.defaultCallbackHandler} security property for the fully qualified class name of a default handler implementation. If the security property is not set, then the underlying modules will not have a CallbackHandler for use in communicating with users. The caller thus assumes that the configured modules have alternative means for authenticating the user. When the LoginContext uses the installed Configuration (instead of a caller-specified Configuration, see above), then this LoginContext must wrap any caller-specified or default CallbackHandler implementation in a new CallbackHandler implementation whose {@code handle} method implementation invokes the specified CallbackHandler's {@code handle} method in a {@code java.security.AccessController.doPrivileged} call constrained by the caller's current {@code AccessControlContext}."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.UserAuthorizer.getCredentials",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "com.google.auth.oauth2.UserCredentials com.google.auth.oauth2.UserAuthorizer.getCredentials(java.lang.String)",
      "framework": "oauth",
      "link": "https://github.com/google/google-auth-library-java/blob/master/oauth2_http/java/com/google/auth/oauth2/UserAuthorizer.java",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempts to retrieve credentials for the approved end user consent.",
        "class": "Handles an interactive 3-Legged-OAuth2 (3LO) user consent authorization."
      },"return": "com.google.auth.oauth2.UserCredentials",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.util.ResourceBundle",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.debug",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.pmw.tinylog.Logger.debug(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xerces.impl.xs.models.XSDFACM.dumpTree",
      "parameters": [
        "org.apache.xerces.impl.dtd.models.CMNode",
        "int"
      ],
      "signature": "void org.apache.xerces.impl.xs.models.XSDFACM.dumpTree(org.apache.xerces.impl.dtd.models.CMNode, int)",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/xerces/xerces/2.4.0/org/apache/xerces/impl/xs/models/XSDFACM.java?av=h",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Dumps the tree of the current node to standard output.",
        "class": "DFAContentModel is the implementation of XSCMValidator that does all of the non-trivial element content validation. This class does the conversion from the regular expression to the DFA that it then uses in its validation algorithm."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.FormattedMessage.getParameters",
      "parameters": [],
      "signature": "java.lang.Object[] org.apache.logging.log4j.message.FormattedMessage.getParameters()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.FormattedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4UpdatableResultSet.updateBinaryStream",
      "parameters": [
        "java.lang.String",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.JDBC4UpdatableResultSet.updateBinaryStream(java.lang.String, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.CopyUtils.copy",
      "parameters": [
        "byte[]",
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.commons.io.CopyUtils.copy(byte[], java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.CopyUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.BundleImpl.getEntry",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.net.URL org.apache.felix.framework.BundleImpl.getEntry(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.BundleImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URL",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.AbstractSessionOutputBuffer.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.http.impl.io.AbstractSessionOutputBuffer.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.AbstractSessionOutputBuffer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.RowDataStatic.isBeforeFirst",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.RowDataStatic.isBeforeFirst()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.RowDataStatic",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.next",
      "parameters": [
        "java.util.regex.Pattern"
      ],
      "signature": "java.lang.String java.util.Scanner.next(java.util.regex.Pattern)",
      "framework": "",
      "link": "",
      "comment": "java.util.Scanner",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetMetaData.isCurrency",
      "parameters": [
        "int"
      ],
      "signature": "boolean com.mysql.jdbc.ResultSetMetaData.isCurrency(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ProcessBuilder.command",
      "parameters": [
        "java.util.List"
      ],
      "signature": "java.lang.ProcessBuilder java.lang.ProcessBuilder.command(java.util.List)",
      "framework": "",
      "link": "",
      "comment": "java.lang.ProcessBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.ProcessBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.sendError",
      "parameters": [
        "int"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.sendError(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call sendError(int sc) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.entering",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.entering(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getPortletMode",
      "parameters": [],
      "signature": "javax.portlet.PortletMode javax.portlet.PortletRequest.getPortletMode()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.portlet.PortletMode",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.ResultSet.getString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.sql.ResultSet.getString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.ResultSet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.streamFileToDisk",
      "parameters": [
        "org.apache.commons.fileupload.FileItemStream",
        "java.io.File"
      ],
      "signature": "boolean org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.streamFileToDisk(org.apache.commons.fileupload.FileItemStream, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.createLock",
      "parameters": [],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.createLock()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getStringForClob",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.ResultSetImpl.getStringForClob(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.isNoBackslashEscapesSet",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionImpl.isNoBackslashEscapesSet()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.Context.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.Context.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.Context",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.write",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.write(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.execute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean java.sql.Statement.execute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.previous",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ResultSetImpl.previous()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.prepareCall",
      "parameters": [
        "java.lang.String",
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.CallableStatement com.mysql.jdbc.ConnectionImpl.prepareCall(java.lang.String, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.CallableStatement",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.finest",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.finest(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForLDAP",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForLDAP(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in LDAP queries.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "java.lang.String[]",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, int, java.lang.String[], org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.trace(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.text.StrBuilder.replaceFirst",
      "parameters": [
        "org.apache.commons.lang.text.StrMatcher",
        "java.lang.String"
      ],
      "signature": "org.apache.commons.lang.text.StrBuilder org.apache.commons.lang.text.StrBuilder.replaceFirst(org.apache.commons.lang.text.StrMatcher, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.text.StrBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.lang.text.StrBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.getFilesystemName",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.getFilesystemName(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.write",
      "parameters": [
        "char[]",
        "int",
        "int"
      ],
      "signature": "void java.io.PrintWriter.write(char[], int, int)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.lookup",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapOperations.lookup(java.lang.String, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.util.EntityUtils.toString",
      "parameters": [
        "org.apache.http.HttpEntity",
        "org.apache.http.entity.ContentType"
      ],
      "signature": "java.lang.String org.apache.http.util.EntityUtils.toString(org.apache.http.HttpEntity, org.apache.http.entity.ContentType)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.util.EntityUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.TeeOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.TeeOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.TeeOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.http.CsrfBeanDefinitionParser.getCsrfLogoutHandler",
      "parameters": [],
      "signature": "org.springframework.beans.factory.config.BeanDefinition org.springframework.security.config.http.CsrfBeanDefinitionParser.getCsrfLogoutHandler()",
      "framework": "spring",
      "link": "",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source",
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.beans.factory.config.BeanDefinition",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage",
      "parameters": [
        "org.springframework.web.socket.TextMessage"
      ],
      "signature": "void org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage(org.springframework.web.socket.TextMessage)",
      "framework": "spring",
      "link": "https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A {@link WebSocketSession} for use with the standard WebSocket for Java API."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.CopyUtils.copy",
      "parameters": [
        "java.io.Reader",
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.CopyUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.HtmlUtils.htmlUnescape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.HtmlUtils.htmlUnescape(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Turn HTML character references into their plain text UNICODE equivalent. Handles complete character set defined in HTML 4.01 recommendation and all reference types (decimal, hex, and entity). Correctly converts the following formats: &#Entity; - (Example: &amp;) case sensitive &#Decimal; - (Example: &#68;) &#xHex; - (Example: &#xE5;) case insensitive Gracefully handles malformed character references by copying original characters as is when encountered. Reference: http://www.w3.org/TR/html4/sgml/entities.html",
        "class": "Utility class for HTML escaping. Escapes and unescapes based on the W3C HTML 4.01 recommendation, handling character entity references. Reference: http://www.w3.org/TR/html4/charset.html For a comprehensive set of String escaping utilities, consider Apache Commons Lang and its StringEscapeUtils class. We are not using that class here to avoid a runtime dependency on Commons Lang just for HTML escaping. Furthermore, Spring's HTML escaping is more flexible and 100% HTML 4.0 compliant."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-web-4.3.9.RELEASE.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String",
        "org.springframework.expression.ParserContext"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(java.lang.String, org.springframework.expression.ParserContext)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.common.TemplateAwareExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.closeConnection",
      "parameters": [
        "java.sql.Connection"
      ],
      "signature": "void org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.closeConnection(java.sql.Connection)",
      "framework": "spring",
      "link": "https://static.javadoc.io/org.springframework/spring/2.0.4/org/springframework/orm/hibernate3/LocalDataSourceConnectionProvider.html",
      "comment": "Puts the state of the program to unauthenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE89",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This implementation simply calls Connection.close.",
        "class": "Hibernate connection provider for local DataSource instances in an application context. This provider will be used if LocalSessionFactoryBean's \"dataSource\" property is set without a Hibernate TransactionManagerLookup."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.github.scribejava.core.oauth.OAuth20Service.sendAccessTokenRequestAsync",
      "parameters": [
        "com.github.scribejava.core.model.OAuthRequestAsync",
        "com.github.scribejava.core.model.OAuthAsyncRequestCallback"
      ],
      "signature": "java.util.concurrent.Future com.github.scribejava.core.oauth.OAuth20Service.sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync, com.github.scribejava.core.model.OAuthAsyncRequestCallback)",
      "framework": "scribejava",
      "link": "https://github.com/scribejava/scribejava/blob/master/scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java",
      "comment": "Authenticates the request",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "auth-safe-state"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.concurrent.Future",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.util.function.Supplier"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.util.function.Supplier)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.read",
      "parameters": [
        "java.io.InputStream",
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.IOUtils.read(java.io.InputStream, byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.RandomAccessFile.<init>",
      "parameters": [],
      "signature": "void java.io.RandomAccessFile.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.RandomAccessFile",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.InitialLdapContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.InitialLdapContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.InitialLdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, int, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest.requestEntity",
      "parameters": [],
      "signature": "org.dmfs.httpclient.HttpRequestEntity org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest.requestEntity()",
      "framework": "oauth",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862",
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.dmfs.httpclient.HttpRequestEntity",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.CopyUtils.copy",
      "parameters": [
        "java.io.Reader",
        "java.io.Writer"
      ],
      "signature": "int org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.CopyUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.disk.DiskFileItem.get",
      "parameters": [],
      "signature": "byte[] org.apache.commons.fileupload.disk.DiskFileItem.get()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.disk.DiskFileItem",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ByteArrayOutputStream.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.NameFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.NameFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.NameFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.monitor.FileAlterationObserver.toString",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.io.monitor.FileAlterationObserver.toString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.monitor.FileAlterationObserver",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "io.vertx.sqlclient.SqlConnection.prepare",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "io.vertx.core.Future io.vertx.sqlclient.SqlConnection.prepare(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "io.vertx.sqlclient.SqlConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "io.vertx.core.Future",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "vertx-sql-client-4.2.7.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.callMethod",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlUtil.callMethod(java.lang.String, java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getDate",
      "parameters": [
        "java.lang.String",
        "java.util.Calendar"
      ],
      "signature": "java.sql.Date com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getDate(java.lang.String, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Date",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.portlet.ModelAndView.<init>",
      "parameters": [
        "java.lang.String",
        "java.util.Map"
      ],
      "signature": "void org.springframework.web.portlet.ModelAndView.<init>(java.lang.String, java.util.Map)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/portlet/ModelAndView.html",
      "comment": "Counter example for sanitizer (String as param, but init)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Create a new ModelAndView given a view name and a model.",
        "class": "Holder for both Model and View in the web MVC framework. Note that these are entirely distinct. This class merely holds both to make it possible for a controller to return both model and view in a single return value. Represents a model and view returned by a handler, to be resolved by a DispatcherPortlet. The view can take the form of a String view name which will need to be resolved by a ViewResolver object; alternatively a view object can be specified directly. The model is a Map, allowing the use of multiple objects keyed by name."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.log",
      "parameters": [
        "java.lang.String",
        "org.apache.log4j.Priority",
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.log(java.lang.String, org.apache.log4j.Priority, java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.DataInputStream.readUTF",
      "parameters": [
        "java.io.DataInput"
      ],
      "signature": "java.lang.String java.io.DataInputStream.readUTF(java.io.DataInput)",
      "framework": "",
      "link": "",
      "comment": "java.io.DataInputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.println",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.PrintWriter.println(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findValue",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.ValueStack.findValue(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.contentEquals",
      "parameters": [
        "java.io.Reader",
        "java.io.Reader"
      ],
      "signature": "boolean org.apache.commons.io.IOUtils.contentEquals(java.io.Reader, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.WildcardFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.WildcardFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.ServletRequestWrapper.getParameterNames()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getParameterNames() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "anorm.SimpleSql.executeUpdate",
      "parameters": [
        "java.sql.Connection"
      ],
      "signature": "int anorm.SimpleSql.executeUpdate(java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "anorm.SimpleSql",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "anorm_2.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getMethod",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getMethod()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getMethod() on the wrapped request object.",
        "class": "Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.warn(org.slf4j.Marker, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.apache.xpath.objects.XObject org.apache.xpath.XPathAPI.eval(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.xpath.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forHtml",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forHtml(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for (X)HTML text content and text attributes. Since this method encodes for both contexts, it may be slightly less efficient to use this method over the methods targeted towards the specific contexts ({@link #forHtmlAttribute(String)} and {@link #forHtmlContent(String)}. In general this method should be preferred unless you are really concerned with saving a few bytes or are writing a framework that utilizes this package. Example JSP Usage      \n\n     \" />\n Encoding Table Input Result {@code &} {@code &} {@code } {@code >} {@code \"} {@code \"} {@code '} {@code '} Additional Notes The encoding of the greater-than sign ({@code >}) is not strictly required, but is included for maximum compatibility. Numeric encoding is used for double-quote character ({@code \"}) as it shorter than the also valid {@code \"}. Carriage return (U+0D), line-feed (U+0A), horizontal tab (U+09) and space (U+20) are valid in quoted attributes and in block in an unescaped form. Surrogate pairs are passed through only if valid. Characters that are not valid according to the XML specification are replaced by a space character as they could lead to parsing errors. In particular only {@code #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]} are considered valid.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.DefaultClientConnection.sendRequestHeader",
      "parameters": [
        "org.apache.http.HttpRequest"
      ],
      "signature": "void org.apache.http.impl.conn.DefaultClientConnection.sendRequestHeader(org.apache.http.HttpRequest)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/conn/DefaultClientConnection.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Sends the request line and all headers over the connection.",
        "class": "Default implementation of an operated client connection. The following parameters can be used to customize the behavior of this class: {@link org.apache.http.params.CoreProtocolPNames#STRICT_TRANSFER_ENCODING} {@link org.apache.http.params.CoreProtocolPNames#HTTP_ELEMENT_CHARSET} {@link org.apache.http.params.CoreConnectionPNames#SOCKET_BUFFER_SIZE} {@link org.apache.http.params.CoreConnectionPNames#MAX_LINE_LENGTH} {@link org.apache.http.params.CoreConnectionPNames#MAX_HEADER_COUNT}"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setObject",
      "parameters": [
        "int",
        "java.lang.Object",
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setObject(int, java.lang.Object, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.ClassFile.setMinorVersion",
      "parameters": [
        "int"
      ],
      "signature": "void javassist.bytecode.ClassFile.setMinorVersion(int)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.ClassFile",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.tsccm.ConnPoolByRoute.newWaitingThread",
      "parameters": [
        "java.util.concurrent.locks.Condition",
        "org.apache.http.impl.conn.tsccm.RouteSpecificPool"
      ],
      "signature": "org.apache.http.impl.conn.tsccm.WaitingThread org.apache.http.impl.conn.tsccm.ConnPoolByRoute.newWaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.tsccm.ConnPoolByRoute",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.impl.conn.tsccm.WaitingThread",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.debug(java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.content.ContentProvider.query",
      "parameters": [
        "android.net.Uri",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.content.ContentProvider.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.content.ContentProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.LdapContext.search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.warn",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.warn(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setDynamicCalendars",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setDynamicCalendars(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forHtmlContent",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forHtmlContent(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This method encodes for HTML text content. It does not escape quotation characters and is thus unsafe for use with HTML attributes. Use either forHtml or forHtmlAttribute for those methods. Example JSP Usage      \n Encoding Table Input Result {@code &} {@code &} {@code } {@code >} Additional Notes Single-quote character ({@code '}) and double-quote character ({@code \"}) do not require encoding in HTML blocks, unlike other HTML contexts. The encoding of the greater-than sign ({@code >}) is not strictly required, but is included for maximum compatibility. Carriage return (U+0D), line-feed (U+0A), horizontal tab (U+09) and space (U+20) are valid in quoted attributes and in block in an unescaped form. Surrogate pairs are passed through only if valid. Characters that are not valid according to the XML specification are replaced by a space character as they could lead to parsing errors. In particular only {@code #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]} are considered valid.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.info(java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.FastByteArrayOutputStream.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.struts2.util.FastByteArrayOutputStream.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.FastByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getNativeBlob",
      "parameters": [
        "int"
      ],
      "signature": "java.sql.Blob com.mysql.jdbc.ResultSetImpl.getNativeBlob(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Blob",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getHostname",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getHostname()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectSingleNode",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.NodeList com.sun.org.apache.xpath.internal.XPathAPI.selectSingleNode(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.write",
      "parameters": [
        "char[]"
      ],
      "signature": "void org.apache.commons.io.output.ProxyWriter.write(char[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPath.evaluate",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "java.lang.String javax.xml.xpath.XPath.evaluate(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.xpath.XPath",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.translateVariables",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.struts2.util.StrutsUtil.translateVariables(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.list",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.list(java.lang.String, org.springframework.ldap.core.NameClassPairMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.info",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.pmw.tinylog.Logger.info(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.warn",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.warn(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildUnionSubQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "java.util.Set",
        "int",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.BinaryMessage.<init>",
      "parameters": [
        "byte[]"
      ],
      "signature": "void org.springframework.web.socket.BinaryMessage.<init>(byte[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/socket/BinaryMessage.html",
      "comment": "Counter example for sanitizer (byte[] as param, but init)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Create a new binary WebSocket message with the given byte[] payload.",
        "class": "A binary WebSocket message."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getLocalAddr",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequest.getLocalAddr()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Component.end",
      "parameters": [
        "java.io.Writer",
        "java.lang.String",
        "boolean"
      ],
      "signature": "boolean org.apache.struts2.components.Component.end(java.io.Writer, java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Component",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetMetaData.getColumnType",
      "parameters": [
        "int"
      ],
      "signature": "int com.mysql.jdbc.ResultSetMetaData.getColumnType(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.info(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getDouble",
      "parameters": [
        "int"
      ],
      "signature": "double com.mysql.jdbc.CallableStatement.getDouble(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "double",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getWindowID",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.PortletRequest.getWindowID()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.print",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.PrintWriter.print(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.sendRedirect",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.sendRedirect(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponse",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.ContextMapper",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.ContextMapper, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseFastIntParsing",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseFastIntParsing(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.context.request.RequestContextListener.requestInitialized",
      "parameters": [
        "javax.servlet.ServletRequestEvent"
      ],
      "signature": "void org.springframework.web.context.request.RequestContextListener.requestInitialized(javax.servlet.ServletRequestEvent)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/request/RequestContextListener.html",
      "comment": "Counter example for source",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Servlet 2.4+ listener that exposes the request to the current thread, through both {@link org.springframework.context.i18n.LocaleContextHolder} and {@link RequestContextHolder}. To be registered as listener in web.xml. Alternatively, Spring's {@link org.springframework.web.filter.RequestContextFilter} and Spring's {@link org.springframework.web.servlet.DispatcherServlet} also expose the same request context to the current thread. In contrast to this listener, advanced options are available there (e.g. \"threadContextInheritable\"). This listener is mainly for use with third-party servlets, e.g. the JSF FacesServlet. Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.methods.HttpGet.<init>",
      "parameters": [],
      "signature": "void org.apache.http.client.methods.HttpGet.<init>()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.methods.HttpGet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE233"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-httpcomponents-httpclient.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.ResultSet.getNString",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String java.sql.ResultSet.getNString(int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.ResultSet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xpath.regex.REUtil.quoteMeta",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.google.gxp.org.apache.xerces.impl.xpath.regex.REUtil.quoteMeta(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xpath.regex.REUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.debug(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.getValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object",
        "java.lang.Class"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlUtil.getValue(java.lang.String, java.util.Map, java.lang.Object, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage",
      "parameters": [
        "org.springframework.web.socket.TextMessage",
        "org.springframework.web.socket.WebSocketSession"
      ],
      "signature": "void org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(org.springframework.web.socket.TextMessage, org.springframework.web.socket.WebSocketSession)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/web/socket/sockjs/transport/session/WebSocketServerSockJsSession.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A SockJS session for use with the WebSocket transport."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forXmlAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forXmlAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encoder for XML and XHTML attribute content. See {@link #forHtmlAttribute(String)} for description of encoding and context.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.wasNull",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.wasNull()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseUsageAdvisor",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseUsageAdvisor(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getFloat",
      "parameters": [
        "int"
      ],
      "signature": "float com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getFloat(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "float",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xs.util.XSObjectListImpl.clear",
      "parameters": [],
      "signature": "void com.google.gxp.org.apache.xerces.impl.xs.util.XSObjectListImpl.clear()",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xs.util.XSObjectListImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core.TextBlock.getParameterCount",
      "parameters": [],
      "signature": "int freemarker.core.TextBlock.getParameterCount()",
      "framework": "",
      "link": "",
      "comment": "freemarker.core.TextBlock",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.print",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void java.io.PrintWriter.print(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorLanguage",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorLanguage()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.EndianUtils.readSwappedUnsignedShort",
      "parameters": [
        "java.io.InputStream"
      ],
      "signature": "int org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.EndianUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "char",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.TextParseUtil.translateVariables(char, java.lang.String, com.opensymphony.xwork2.util.ValueStack)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.compiler.TypeChecker.atCallExpr",
      "parameters": [
        "javassist.compiler.ast.CallExpr"
      ],
      "signature": "void javassist.compiler.TypeChecker.atCallExpr(javassist.compiler.ast.CallExpr)",
      "framework": "",
      "link": "",
      "comment": "javassist.compiler.TypeChecker",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateObject",
      "parameters": [
        "int",
        "java.lang.Object",
        "int"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateObject(int, java.lang.Object, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.XmlStreamWriter.detectEncoding",
      "parameters": [
        "char[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.XmlStreamWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getHeaders",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequest.getHeaders(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.throwing",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void java.util.logging.Logger.throwing(java.lang.String, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setEmulateUnsupportedPstmts",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setEmulateUnsupportedPstmts(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.ComponentUrlProvider.setValue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.components.ComponentUrlProvider.setValue(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.ComponentUrlProvider",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "java.lang.String",
        "java.io.OutputStream",
        "java.nio.charset.Charset"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.portlet.PortletRequest.getParameterNames()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPath.evaluate",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "javax.xml.namespace.QName"
      ],
      "signature": "java.lang.Object javax.xml.xpath.XPath.evaluate(java.lang.String, java.lang.Object, javax.xml.namespace.QName)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.xpath.XPath",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core._ObjectBuilderSettingEvaluator.fetchClassName",
      "parameters": [
        "boolean"
      ],
      "signature": "java.lang.String freemarker.core._ObjectBuilderSettingEvaluator.fetchClassName(boolean)",
      "framework": "",
      "link": "",
      "comment": "freemarker.core._ObjectBuilderSettingEvaluator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getContentType",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getContentType()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.BasicAuthCache.get",
      "parameters": [
        "org.apache.http.HttpHost"
      ],
      "signature": "org.apache.http.auth.AuthScheme org.apache.http.impl.client.BasicAuthCache.get(org.apache.http.HttpHost)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.BasicAuthCache",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.auth.AuthScheme",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.format",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.lang.String java.lang.String.format(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.String",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.warn",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.pmw.tinylog.Logger.warn(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.get",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpFields.get(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getParameterValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] javax.servlet.http.HttpServletRequest.getParameterValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.clearProperty",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.System.clearProperty(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.beans.BeanUtils.copyProperties",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.springframework.beans.BeanUtils.copyProperties(java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.beans.BeanUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "springframework-5.1.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.simple.SimpleLogger.isEnabled",
      "parameters": [
        "org.apache.logging.log4j.Level",
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "boolean org.apache.logging.log4j.simple.SimpleLogger.isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.simple.SimpleLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.transform.TransformerFactory.newTransformer",
      "parameters": [
        "javax.xml.transform.Source"
      ],
      "signature": "javax.xml.transform.Transformer javax.xml.transform.TransformerFactory.newTransformer(javax.xml.transform.Source)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.transform.TransformerFactory",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE91"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.xml.transform.Transformer",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.initializeWithMetadata",
      "parameters": [],
      "signature": "void com.mysql.jdbc.ResultSetImpl.initializeWithMetadata()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.LogFactory.getFactory",
      "parameters": [],
      "signature": "org.apache.commons.logging.LogFactory org.apache.commons.logging.LogFactory.getFactory()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.LogFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.logging.LogFactory",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.MagicNumberFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateInt",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateInt(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.ProviderUtil.getProviders",
      "parameters": [],
      "signature": "java.lang.Iterable org.apache.logging.log4j.util.ProviderUtil.getProviders()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.ProviderUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Iterable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.LDAPConnection.disconnect",
      "parameters": [],
      "signature": "void com.novell.ldap.LDAPConnection.disconnect()",
      "framework": "ldap",
      "link": "https://www.novell.com/documentation/developer/jldap/jldapenu/api/com/novell/ldap/LDAPConnection.html",
      "comment": "Puts the program in a unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Synchronously disconnects from the LDAP server. Before the object can perform LDAP operations again, it must reconnect to the server by calling connect. The disconnect method abandons any outstanding requests, issues an unbind request to the server, and then closes the socket.",
        "class": "The central class that encapsulates the connection to a directory server through the LDAP protocol. LDAPConnection objects are used to perform common LDAP operations such as search, modify and add. In addition, LDAPConnection objects allow you to bind to an LDAP server, set connection and search constraints, and perform several other tasks. An LDAPConnection object is not connected on construction and can only be connected to one server at one port. Multiple threads may share this single connection, typically by cloning the connection object, one for each thread. An application may have more than one LDAPConnection object, connected to the same or different directory servers. Sample Code: Search.java"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.Query.setGrouping",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.jdo.Query.setGrouping(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.Query",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.content.ContentProvider.delete",
      "parameters": [
        "android.net.Uri",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "int android.content.ContentProvider.delete(android.net.Uri, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.content.ContentProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.handleRequest",
      "parameters": [
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse"
      ],
      "signature": "void org.springframework.web.socket.server.support.WebSocketHttpRequestHandler.handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Process the given request, generating a response.",
        "class": "A {@link HttpRequestHandler} for processing WebSocket handshake requests. This is the main class to use when configuring a server WebSocket at a specific URL. It is a very thin wrapper around a {@link WebSocketHandler} and a {@link HandshakeHandler}, also adapting the {@link HttpServletRequest} and {@link HttpServletResponse} to {@link ServerHttpRequest} and {@link ServerHttpResponse}, respectively."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.fillSendPacket",
      "parameters": [
        "byte[][]",
        "java.io.InputStream[]",
        "boolean[]",
        "int[]"
      ],
      "signature": "com.mysql.jdbc.Buffer com.mysql.jdbc.ServerPreparedStatement.fillSendPacket(byte[][], java.io.InputStream[], boolean[], int[])",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.Buffer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletOutputStream.print",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.ServletOutputStream.print(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletOutputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.AttributesMapper",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.AttributesMapper, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Include.addParameter",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.apache.struts2.components.Include.addParameter(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Include",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.BOMInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.BOMInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.BOMInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.JavaScriptUtils.javaScriptEscape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.JavaScriptUtils.javaScriptEscape(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Turn special characters into escaped characters conforming to JavaScript. Handles complete character set defined in HTML 4.01 recommendation.",
        "class": "Utility class for JavaScript escaping. Escapes based on the JavaScript 1.5 recommendation. Reference: Core JavaScript 1.5 Guide"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-web-4.3.9.RELEASE.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int org.apache.commons.io.input.ProxyInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getUseSqlStateCodes",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getUseSqlStateCodes()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String, java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.map.LazySortedMap.comparator",
      "parameters": [],
      "signature": "java.util.Comparator org.apache.commons.collections4.map.LazySortedMap.comparator()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.map.LazySortedMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Comparator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.digester.Rule.getNamespaceURI",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.digester.Rule.getNamespaceURI()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.digester.Rule",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getLocalAddr",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getLocalAddr()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getLocalAddr() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.servlet.http.HttpServletRequestWrapper.getParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.kohsuke.args4j.CmdLineParser.printUsage",
      "parameters": [
        "java.io.Writer",
        "java.util.ResourceBundle"
      ],
      "signature": "void org.kohsuke.args4j.CmdLineParser.printUsage(java.io.Writer, java.util.ResourceBundle)",
      "framework": "",
      "link": "",
      "comment": "org.kohsuke.args4j.CmdLineParser",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.framework.util.SecureAction.getFileInputStream",
      "parameters": [
        "java.io.File"
      ],
      "signature": "java.io.FileInputStream org.apache.felix.framework.util.SecureAction.getFileInputStream(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.framework.util.SecureAction",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.FileInputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseUnicode",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseUnicode()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "byte[]",
        "java.io.Writer",
        "java.nio.charset.Charset"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(byte[], java.io.Writer, java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.format",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.lang.String java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.String",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getUserPrincipal",
      "parameters": [],
      "signature": "java.security.Principal javax.portlet.PortletRequest.getUserPrincipal()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.security.Principal",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.error(org.slf4j.Marker, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.list",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.list(java.lang.String, org.springframework.ldap.core.NameClassPairMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getHeader",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getHeader(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.lookup",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapTemplate.lookup(java.lang.String, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setCacheServerConfiguration",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setCacheServerConfiguration(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.DirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.DirContext.search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.DirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.subject.support.DelegatingSubject.logout",
      "parameters": [],
      "signature": "void org.apache.shiro.subject.support.DelegatingSubject.logout()",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/subject/support/DelegatingSubject.html",
      "comment": "Logout",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Logs out this Subject and invalidates and/or removes any associated entities, such as a {@link Session Session} and authorization data. After this method is called, the Subject is considered 'anonymous' and may continue to be used for another log-in if desired. Web Environment Warning Calling this method in web environments will usually remove any associated session cookie as part of session invalidation. Because cookies are part of the HTTP header, and headers can only be set before the response body (html, image, etc) is sent, this method in web environments must be called before any content has been rendered. The typical approach most applications use in this scenario is to redirect the user to a different location (e.g. home page) immediately after calling this method. This is an effect of the HTTP protocol itself and not a reflection of Shiro's implementation. Non-HTTP environments may of course use a logged-out subject for login again if desired.",
        "class": "Implementation of the {@code Subject} interface that delegates method calls to an underlying {@link org.apache.shiro.mgt.SecurityManager SecurityManager} instance for security checks. It is essentially a {@code SecurityManager} proxy. This implementation does not maintain state such as roles and permissions (only {@code Subject} {@link #getPrincipals() principals}, such as usernames or user primary keys) for better performance in a stateless architecture. It instead asks the underlying {@code SecurityManager} every time to perform the authorization check. A common misconception in using this implementation is that an EIS resource (RDBMS, etc) would be \"hit\" every time a method is called. This is not necessarily the case and is up to the implementation of the underlying {@code SecurityManager} instance. If caching of authorization data is desired (to eliminate EIS round trips and therefore improve database performance), it is considered much more elegant to let the underlying {@code SecurityManager} implementation or its delegate components manage caching, not this class. A {@code SecurityManager} is considered a business-tier component, where caching strategies are better managed. Applications from large and clustered to simple and JVM-local all benefit from stateless architectures. This implementation plays a part in the stateless programming paradigm and should be used whenever possible."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jca.cci.connection.SingleConnectionFactory.<init>",
      "parameters": [],
      "signature": "void org.springframework.jca.cci.connection.SingleConnectionFactory.<init>()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jca/cci/connection/SingleConnectionFactory.html",
      "comment": "Counter example for authentication (init)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Create a new SingleConnectionFactory for bean-style usage.",
        "class": "A CCI ConnectionFactory adapter that returns the same Connection on all {@code getConnection} calls, and ignores calls to {@code Connection.close()}. Useful for testing and standalone environments, to keep using the same Connection for multiple CciTemplate calls, without having a pooling ConnectionFactory, also spanning any number of transactions. You can either pass in a CCI Connection directly, or let this factory lazily create a Connection via a given target ConnectionFactory."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.ServletConnection.run",
      "parameters": [],
      "signature": "void org.apache.xmlrpc.webserver.ServletConnection.run()",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/ServletConnection.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs the task.",
        "class": "{@link org.apache.xmlrpc.webserver.ServletWebServer ServletWebServer's} {@link org.apache.xmlrpc.util.ThreadPool.Task} for handling a single servlet connection."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.System.setProperty(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.lang.System",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xerces.impl.xpath.regex.REUtil.dumpString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.xerces.impl.xpath.regex.REUtil.dumpString(java.lang.String)",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/xerces/xercesImpl/2.6.2/org/apache/xerces/impl/xpath/regex/REUtil.java",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.pool.BasicConnPool.validate",
      "parameters": [
        "org.apache.http.pool.PoolEntry"
      ],
      "signature": "boolean org.apache.http.impl.pool.BasicConnPool.validate(org.apache.http.pool.PoolEntry)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.pool.BasicConnPool",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "byte[]",
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(byte[], java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.StatementWrapper.getQueryTimeout",
      "parameters": [],
      "signature": "int com.mysql.jdbc.jdbc2.optional.StatementWrapper.getQueryTimeout()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.StatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpField.getValue",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpField.getValue()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpField",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.GenericServlet.getInitParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.GenericServlet.getInitParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a String containing the value of the named initialization parameter, or null if the parameter does not exist. See {@link ServletConfig#getInitParameter}. This method is supplied for convenience. It gets the value of the named parameter from the servlet's ServletConfig object.",
        "class": "Defines a generic, protocol-independent servlet. To write an HTTP servlet for use on the Web, extend {@link javax.servlet.http.HttpServlet} instead. GenericServlet implements the Servlet and ServletConfig interfaces. GenericServlet may be directly extended by a servlet, although it's more common to extend a protocol-specific subclass such as HttpServlet. GenericServlet makes writing servlets easier. It provides simple versions of the lifecycle methods init and destroy and of the methods in the ServletConfig interface. GenericServlet also implements the log method, declared in the ServletContext interface. To write a generic servlet, you need only override the abstract service method."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getNativeInt",
      "parameters": [
        "int",
        "boolean"
      ],
      "signature": "int com.mysql.jdbc.ResultSetImpl.getNativeInt(int, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getMethod",
      "parameters": [
        "java.lang.String",
        "java.lang.Class[]"
      ],
      "signature": "java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String, java.lang.Class[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code Method} object that reflects the specified public member method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a {@code String} specifying the simple name of the desired method. The {@code parameterTypes} parameter is an array of {@code Class} objects that identify the method's formal parameter types, in declared order. If {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. If the {@code name} is \"{@code }\" or \"{@code }\" a {@code NoSuchMethodException} is raised. Otherwise, the method to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object: C is searched for a matching method, as defined below. If a matching method is found, it is reflected. If no matching method is found by step 1 then: If C is a class other than {@code Object}, then this algorithm is invoked recursively on the superclass of C. If C is the class {@code Object}, or if C is an interface, then the superinterfaces of C (if any) are searched for a matching method. If any such method is found, it is reflected. To find a matching method in a class or interface C: If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not. This increased flexibility in the virtual machine can be used to implement various language features. For example, covariant returns can be implemented with {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the method being overridden would have the same signature but different return types. If this {@code Class} object represents an array type, then this method does not find the {@code clone()} method. Static methods declared in superinterfaces of the class or interface represented by this {@code Class} object are not considered members of the class or interface.",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.lang.reflect.Method",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.findString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.apache.struts2.util.StrutsUtil.findString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.warn",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.pmw.tinylog.Logger.warn(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.debug",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.debug(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.util.Streams.copy",
      "parameters": [
        "java.io.InputStream",
        "java.io.OutputStream",
        "boolean",
        "byte[]"
      ],
      "signature": "long org.apache.commons.fileupload.util.Streams.copy(java.io.InputStream, java.io.OutputStream, boolean, byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.util.Streams",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.validation.HTMLValidationRule.sanitize",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.validation.HTMLValidationRule.sanitize(java.lang.String, java.lang.String)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/reference/validation/CreditCardValidationRule.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The method is similar to ValidationRuile.getSafe except that it returns a harmless object that <b>may or may not have any similarity to the original input (in some cases you may not care)</b>. In most cases this should be the same as the getSafe method only instead of throwing an exception, return some default value.",
        "class": "A validator performs syntax and possibly semantic validation of a single piece of data from an untrusted source."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [],
      "signature": "void java.io.FileOutputStream.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.FileOutputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.fatal",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.fatal(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.fatal",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.fatal(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.supportsLikeEscapeClause",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.DatabaseMetaData.supportsLikeEscapeClause()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.Security.createKeyFromOldPassword",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] com.mysql.jdbc.Security.createKeyFromOldPassword(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.Security",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.setIntHeader",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.setIntHeader(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call setIntHeader(String name, int value) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.github.scribejava.core.oauth.OAuth20Service.sendAccessTokenRequestSync",
      "parameters": [
        "com.github.scribejava.core.model.OAuthRequest"
      ],
      "signature": "com.github.scribejava.core.model.OAuth2AccessToken com.github.scribejava.core.oauth.OAuth20Service.sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)",
      "framework": "scribejava",
      "link": "https://github.com/scribejava/scribejava/blob/master/scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java",
      "comment": "Returns a tocken for the given request.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "auth-safe-state"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.github.scribejava.core.model.OAuth2AccessToken",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.setResultSetConcurrency",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.setResultSetConcurrency(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL",
      "parameters": [
        "java.io.Reader",
        "java.io.Reader"
      ],
      "signature": "boolean org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.HttpMethodDirector.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "void org.apache.commons.httpclient.HttpMethodDirector.authenticate(org.apache.commons.httpclient.HttpMethod)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/xref/org/apache/commons/httpclient/HttpMethodDirector.html",
      "comment": "The authentication string is added to the http method.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Handles the process of executing a method including authentication, redirection and retries."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.entity.LazyDecompressingInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.client.entity.LazyDecompressingInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.entity.LazyDecompressingInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPath.evaluate",
      "parameters": [
        "java.lang.String",
        "org.xml.sax.InputSource"
      ],
      "signature": "java.lang.String javax.xml.xpath.XPath.evaluate(java.lang.String, org.xml.sax.InputSource)",
      "framework": "",
      "link": "",
      "comment": "javax.xml.xpath.XPath",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getCalendarInstanceForSessionOrNew",
      "parameters": [],
      "signature": "java.util.Calendar com.mysql.jdbc.ResultSetImpl.getCalendarInstanceForSessionOrNew()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Calendar",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.PropertyUtilsBean.setIndexedProperty",
      "parameters": [
        "java.lang.Object",
        "java.lang.String",
        "int",
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.beanutils.PropertyUtilsBean.setIndexedProperty(java.lang.Object, java.lang.String, int, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.PropertyUtilsBean",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.compiler.base.TemplateType.toString",
      "parameters": [],
      "signature": "java.lang.String com.google.gxp.compiler.base.TemplateType.toString()",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.compiler.base.TemplateType",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.write",
      "parameters": [
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ProxyWriter.write(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getPathInfo",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getPathInfo()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.beforeFirst",
      "parameters": [],
      "signature": "void com.mysql.jdbc.ResultSetImpl.beforeFirst()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.swing.text.JTextComponent.getText",
      "parameters": [],
      "signature": "java.lang.String javax.swing.text.JTextComponent.getText()",
      "framework": "",
      "link": "",
      "comment": "javax.swing.text.JTextComponent",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getName",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getName()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the original filename in the client's filesystem, as provided by the browser (or other client software). In most cases, this will be the base file name, without path information. However, some clients, such as the Opera browser, do include path information.",
        "class": "An adapter of Servlet 3.0 {@link Part} to Apache Commons FileUpload's {@link FileItem}"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "wicket-core-7.8.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getArray",
      "parameters": [
        "int"
      ],
      "signature": "java.sql.Array com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getArray(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Array",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.freemarker.FreemarkerResult.doExecute",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.ActionInvocation"
      ],
      "signature": "void org.apache.struts2.views.freemarker.FreemarkerResult.doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.freemarker.FreemarkerResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.debug(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.trace",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.trace(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.debug",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.debug(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.SerializableEntity.createBytes",
      "parameters": [
        "java.io.Serializable"
      ],
      "signature": "void org.apache.http.entity.SerializableEntity.createBytes(java.io.Serializable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.SerializableEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.replaceFirst",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.String.replaceFirst(java.lang.String, java.lang.String)",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html",
      "comment": "String manipulation",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str{@code .replaceFirst(}regex{@code ,} repl{@code )} yields exactly the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile compile}(regex).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(str).{@link java.util.regex.Matcher#replaceFirst replaceFirst}(repl) Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceFirst}. Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special meaning of these characters, if desired.",
        "class": "The {@code String} class represents character strings. All string literals in Java programs, such as {@code \"abc\"}, are implemented as instances of this class. Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:      String str = \"abc\";\n is equivalent to:      char data[] = {'a', 'b', 'c'};\n     String str = new String(data);\n Here are some more examples of how strings can be used:      System.out.println(\"abc\");\n     String cde = \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c = \"abc\".substring(2,3);\n     String d = cde.substring(1, 2);\n The class {@code String} includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the {@code StringBuilder}(or {@code StringBuffer}) class and its {@code append} method. String conversions are implemented through the method {@code toString}, defined by {@code Object} and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, The Java Language Specification. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown. A {@code String} represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the {@code Character} class for more information). Index values refer to {@code char} code units, so a supplementary character uses two positions in a {@code String}. The {@code String} class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., {@code char} values)."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.jndi.ldap.LdapCtx.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration com.sun.jndi.ldap.LdapCtx.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "com.sun.jndi.ldap.LdapCtx",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sun-jndi-ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.DatabaseUtils.createDbFromSqlStatements",
      "parameters": [
        "android.content.Context",
        "java.lang.String",
        "int",
        "java.lang.String"
      ],
      "signature": "void android.database.DatabaseUtils.createDbFromSqlStatements(android.content.Context, java.lang.String, int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.DatabaseUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.LogKitLogger.trace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.impl.LogKitLogger.trace(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.LogKitLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.XmlRpcServletServer.setResponseHeader",
      "parameters": [
        "org.apache.xmlrpc.common.ServerStreamConnection",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void org.apache.xmlrpc.webserver.XmlRpcServletServer.setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/XmlRpcServletServer.html",
      "comment": "Counter example for sanitizer (set)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "An extension of {@link org.apache.xmlrpc.server.XmlRpcServer}, which is suitable for processing servlet requests."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getFieldNamesCollection",
      "parameters": [],
      "signature": "java.util.Set org.eclipse.jetty.http.HttpFields.getFieldNamesCollection()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Set",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.BooleanUtils.toBoolean",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean org.apache.commons.lang.BooleanUtils.toBoolean(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.BooleanUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.messaging.simp.stomp.StompDecoder.unescape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.messaging.simp.stomp.StompDecoder.unescape(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/messaging/simp/stomp/StompDecoder.html",
      "comment": "Counter example for sanitizer (unescape)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "See STOMP Spec 1.2: \"Value Encoding\".",
        "class": "Decodes one or more STOMP frames contained in a {@link ByteBuffer}. An attempt is made to read all complete STOMP frames from the buffer, which could be zero, one, or more. If there is any left-over content, i.e. an incomplete STOMP frame, at the end the buffer is reset to point to the beginning of the partial content. The caller is then responsible for dealing with that incomplete content by buffering until there is more input available."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setArray",
      "parameters": [
        "int",
        "java.sql.Array"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setArray(int, java.sql.Array)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.toString",
      "parameters": [
        ""
      ],
      "signature": "java.lang.String java.lang.StringBuilder.toString()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.finer",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.finer(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.readblock",
      "parameters": [
        "java.io.InputStream",
        "byte[]"
      ],
      "signature": "int com.mysql.jdbc.PreparedStatement.readblock(java.io.InputStream, byte[])",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.ResultSet java.sql.PreparedStatement.executeQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.LogManager.getLogger",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "org.apache.logging.log4j.Logger org.apache.logging.log4j.LogManager.getLogger(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.LogManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.logging.log4j.Logger",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getDoubleInternal",
      "parameters": [
        "int"
      ],
      "signature": "double com.mysql.jdbc.ResultSetImpl.getDoubleInternal(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "double",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.FieldError.evaluateExtraParams",
      "parameters": [],
      "signature": "void org.apache.struts2.components.FieldError.evaluateExtraParams()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.FieldError",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.ConnectionServer.writeResponse",
      "parameters": [
        "org.apache.xmlrpc.common.XmlRpcStreamRequestConfig",
        "java.io.OutputStream",
        "java.lang.Object"
      ],
      "signature": "void org.apache.xmlrpc.webserver.ConnectionServer.writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig, java.io.OutputStream, java.lang.Object)",
      "framework": "apache",
      "link": "",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core.DynamicKeyName.deepCloneWithIdentifierReplaced_inner",
      "parameters": [
        "java.lang.String",
        "freemarker.core.Expression",
        "freemarker.core.Expression$ReplacemenetState"
      ],
      "signature": "freemarker.core.Expression freemarker.core.DynamicKeyName.deepCloneWithIdentifierReplaced_inner(java.lang.String, freemarker.core.Expression, freemarker.core.Expression$ReplacemenetState)",
      "framework": "",
      "link": "",
      "comment": "freemarker.core.DynamicKeyName",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "freemarker.core.Expression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForSQL",
      "parameters": [
        "org.owasp.esapi.codecs.Codec",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForSQL(org.owasp.esapi.codecs.Codec, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode input for use in a SQL query, according to the selected codec (appropriate codecs include the MySQLCodec and OracleCodec). This method is not recommended. The use of the PreparedStatement interface is the preferred approach. However, if for some reason this is impossible, then this method is provided as a weaker alternative. The best approach is to make sure any single-quotes are double-quoted. Another possible approach is to use the {escape} syntax described in the JDBC specification in section 1.5.6. However, this syntax does not work with all drivers, and requires modification of all queries.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.DatabaseUtils.concatenateWhere",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.DatabaseUtils.concatenateWhere(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.DatabaseUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.servlet.FileCleanerCleanup.getFileCleaningTracker",
      "parameters": [
        "javax.servlet.ServletContext"
      ],
      "signature": "org.apache.commons.io.FileCleaningTracker org.apache.commons.fileupload.servlet.FileCleanerCleanup.getFileCleaningTracker(javax.servlet.ServletContext)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.servlet.FileCleanerCleanup",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.io.FileCleaningTracker",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.compile",
      "parameters": [
        "java.lang.String",
        "java.util.Map"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlUtil.compile(java.lang.String, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.NTLMScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.NTCredentials",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.NTLMScheme.authenticate(org.apache.commons.httpclient.NTCredentials, java.lang.String)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/NTLMScheme.html",
      "comment": "Depricated method. The credentials are provided. The authentication string is returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Create a NTLM authorization string for the given challenge and NT credentials.",
        "class": "An implementation of the Microsoft proprietary NTLM authentication scheme. For a detailed explanation of the NTLM scheme please see http://davenport.sourceforge.net/ntlm.html."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletRequestImpl.parseParameters",
      "parameters": [],
      "signature": "void org.apache.xmlrpc.webserver.HttpServletRequestImpl.parseParameters()",
      "framework": "apache",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletRequest} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.replace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "boolean org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.replace(java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "hibernate",
      "link": "https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/util/ConcurrentReferenceHashMap.java",
      "comment": "Counter example for sanitizer",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1,
          2,
          0,
          1,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to  {@code\n if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) {\n   map.put(key, newValue);\n   return true;\n } else\n   return false;\n } except that the action is performed atomically.",
        "class": "An advanced hash table supporting configurable garbage collection semantics of keys and values, optional referential-equality, full concurrency of retrievals, and adjustable expected concurrency for updates. This table is designed around specific advanced use-cases. If there is any doubt whether this table is for you, you most likely should be using {@link java.util.concurrent.ConcurrentHashMap} instead. This table supports strong, weak, and soft keys and values. By default keys are weak, and values are strong. Such a configuration offers similar behavior to {@link java.util.WeakHashMap}, entries of this table are periodically removed once their corresponding keys are no longer referenced outside of this table. In other words, this table will not prevent a key from being discarded by the garbage collector. Once a key has been discarded by the collector, the corresponding entry is no longer visible to this table; however, the entry may occupy space until a future table operation decides to reclaim it. For this reason, summary functions such as {@code size} and {@code isEmpty} might return a value greater than the observed number of entries. In order to support a high level of concurrency, stale entries are only reclaimed during blocking (usually mutating) operations. Enabling soft keys allows entries in this table to remain until their space is absolutely needed by the garbage collector. This is unlike weak keys which can be reclaimed as soon as they are no longer referenced by a normal strong reference. The primary use case for soft keys is a cache, which ideally occupies memory that is not in use for as long as possible. By default, values are held using a normal strong reference. This provides the commonly desired guarantee that a value will always have at least the same life-span as it's key. For this reason, care should be taken to ensure that a value never refers, either directly or indirectly, to its key, thereby preventing reclamation. If this is unavoidable, then it is recommended to use the same reference type in use for the key. However, it should be noted that non-strong values may disappear before their corresponding key. While this table does allow the use of both strong keys and values, it is recommended to use {@link java.util.concurrent.ConcurrentHashMap} for such a configuration, since it is optimized for that case. Just like {@link java.util.concurrent.ConcurrentHashMap}, this class obeys the same functional specification as {@link java.util.Hashtable}, and includes versions of methods corresponding to each method of {@code Hashtable}. However, even though all operations are thread-safe, retrieval operations do not entail locking, and there is not any support for locking the entire table in a way that prevents all access. This class is fully interoperable with {@code Hashtable} in programs that rely on its thread safety but not on its synchronization details. Retrieval operations (including {@code get}) generally do not block, so may overlap with update operations (including {@code put} and {@code remove}). Retrievals reflect the results of the most recently completed update operations holding upon their onset. For aggregate operations such as {@code putAll} and {@code clear}, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do not throw {@link ConcurrentModificationException}. However, iterators are designed to be used by only one thread at a time. The allowed concurrency among update operations is guided by the optional {@code concurrencyLevel} constructor argument (default {@code 16}), which is used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because placement in hash tables is essentially random, the actual concurrency will vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one is appropriate when it is known that only one thread will modify and all others will only read. Also, resizing this or any other kind of hash table is a relatively slow operation, so, when possible, it is a good idea to provide estimates of expected table sizes in constructors. This class and its views and iterators implement all of the optional methods of the {@link Map} and {@link Iterator} interfaces. Like {@link Hashtable} but unlike {@link HashMap}, this class does not allow {@code null} to be used as a key or value. This class is a member of the Java Collections Framework."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.setClob",
      "parameters": [
        "java.lang.String",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.setClob(java.lang.String, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.subject.support.DelegatingSubject.isAuthenticated",
      "parameters": [],
      "signature": "boolean org.apache.shiro.subject.support.DelegatingSubject.isAuthenticated()",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/subject/support/DelegatingSubject.html",
      "comment": "Check if the program is authenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns {@code true} if this Subject/user proved their identity during their current session by providing valid credentials matching those known to the system, {@code false} otherwise. Note that even if this Subject's identity has been remembered via 'remember me' services, this method will still return {@code false} unless the user has actually logged in with proper credentials during their current session. See the {@link #isRemembered() isRemembered()} method JavaDoc for more.",
        "class": "Implementation of the {@code Subject} interface that delegates method calls to an underlying {@link org.apache.shiro.mgt.SecurityManager SecurityManager} instance for security checks. It is essentially a {@code SecurityManager} proxy. This implementation does not maintain state such as roles and permissions (only {@code Subject} {@link #getPrincipals() principals}, such as usernames or user primary keys) for better performance in a stateless architecture. It instead asks the underlying {@code SecurityManager} every time to perform the authorization check. A common misconception in using this implementation is that an EIS resource (RDBMS, etc) would be \"hit\" every time a method is called. This is not necessarily the case and is up to the implementation of the underlying {@code SecurityManager} instance. If caching of authorization data is desired (to eliminate EIS round trips and therefore improve database performance), it is considered much more elegant to let the underlying {@code SecurityManager} implementation or its delegate components manage caching, not this class. A {@code SecurityManager} is considered a business-tier component, where caching strategies are better managed. Applications from large and clustered to simple and JVM-local all benefit from stateless architectures. This implementation plays a part in the stateless programming paradigm and should be used whenever possible."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getAttributeNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.ServletRequestWrapper.getAttributeNames()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getAttributeNames() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.dom.TreeWalkerImpl.getFirstChild",
      "parameters": [
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.Node com.google.gxp.org.apache.xerces.dom.TreeWalkerImpl.getFirstChild(org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.dom.TreeWalkerImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getWindowState",
      "parameters": [],
      "signature": "javax.portlet.WindowState javax.portlet.PortletRequest.getWindowState()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.portlet.WindowState",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setNClob",
      "parameters": [
        "int",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setNClob(int, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.toFile",
      "parameters": [
        "java.net.URL"
      ],
      "signature": "java.io.File org.apache.commons.io.FileUtils.toFile(java.net.URL)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.TeeOutputStream.write",
      "parameters": [
        "byte[]"
      ],
      "signature": "void org.apache.commons.io.output.TeeOutputStream.write(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.TeeOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpSession.setAttribute",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void javax.servlet.http.HttpSession.setAttribute(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpSession",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE501"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.incrementNumberOfPreparedExecutes",
      "parameters": [],
      "signature": "void com.mysql.jdbc.ConnectionImpl.incrementNumberOfPreparedExecutes()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "java.lang.String",
        "boolean"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.BasicScheme.authenticate(org.apache.http.auth.Credentials, java.lang.String, boolean)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a basic Authorization header value for the given {@link Credentials} and charset.",
        "class": "Basic authentication scheme as defined in RFC 2617. The following parameters can be used to customize the behavior of this class: {@link org.apache.http.auth.params.AuthPNames#CREDENTIAL_CHARSET}"
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.isLast",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.UpdatableResultSet.isLast()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getContinueBatchOnError",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getContinueBatchOnError()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.unescapeJava",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.unescapeJava(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Unescapes any Java literals found in the {@code String}. For example, it will turn a sequence of {@code '\\'} and {@code 'n'} into a newline character, unless the {@code '\\'} is preceded by another {@code '\\'}.",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.analysis.Type.arrayName",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "java.lang.String javassist.bytecode.analysis.Type.arrayName(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.analysis.Type",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.HttpParameters.containsValue",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean org.apache.struts2.dispatcher.HttpParameters.containsValue(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.HttpParameters",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.amazonaws.services.simpledb.model.SelectRequest.withSelectExpression",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "com.amazonaws.services.simpledb.model.SelectRequest com.amazonaws.services.simpledb.model.SelectRequest.withSelectExpression(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.amazonaws.services.simpledb.model.SelectRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.amazonaws.services.simpledb.model.SelectRequest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "aws-java-sdk.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setPath",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.Cookie.setPath(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, /catalog, which makes the cookie visible to all directories on the server under /catalog. Consult RFC 2109 (available on the Internet) for more information on setting path names for cookies.",
        "class": "Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server. A cookie's value can uniquely identify a client, so cookies are commonly used for session management. A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number. Some Web browsers have bugs in how they handle the optional attributes, so use them sparingly to improve the interoperability of your servlets. The servlet sends cookies to the browser by using the {@link HttpServletResponse#addCookie} method, which adds fields to HTTP response headers to send cookies to the browser, one at a time. The browser is expected to support 20 cookies for each Web server, 300 cookies total, and may limit cookie size to 4 KB each. The browser returns cookies to the servlet by adding fields to HTTP request headers. Cookies can be retrieved from a request by using the {@link HttpServletRequest#getCookies} method. Several cookies might have the same name but different path attributes. Cookies affect the caching of the Web pages that use them. HTTP 1.0 does not cache pages that use cookies created with this class. This class does not support the cache control defined with HTTP 1.1. This class supports both the Version 0 (by Netscape) and Version 1 (by RFC 2109) cookie specifications. By default, cookies are created using Version 0 to ensure the best interoperability."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.list",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapOperations.list(java.lang.String, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.InitialDirContext.search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.InitialDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper.isConvertAttributeToUpperCase",
      "parameters": [],
      "signature": "boolean org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper.isConvertAttributeToUpperCase()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/authority/mapping/SimpleAttributes2GrantedAuthoritiesMapper.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities. Optionally a prefix can be added, and the attribute name can be converted to upper or lower case. By default, the attribute is prefixed with \"ROLE_\" unless it already starts with \"ROLE_\", and no case conversion is done."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringUtils.isNumericSpace",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "boolean org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.StringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.util.PublicSuffixMatcher.matches",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean org.apache.http.conn.util.PublicSuffixMatcher.matches(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.util.PublicSuffixMatcher",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.updateNString",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ResultSet.updateNString(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.contentEquals",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.FileUtils.contentEquals(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.error(org.slf4j.Marker, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.event.EventDirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.event.EventDirContext.search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.event.EventDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getObject",
      "parameters": [
        "java.lang.String",
        "java.util.Map"
      ],
      "signature": "java.lang.Object com.mysql.jdbc.CallableStatement.getObject(java.lang.String, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate",
      "parameters": [
        "int",
        "java.io.Writer"
      ],
      "signature": "boolean org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.NumericEntityEscaper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "long"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(long)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.builder.StandardToStringStyle.setSizeStartText",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang3.builder.StandardToStringStyle.setSizeStartText(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.builder.StandardToStringStyle",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.InputTransferSelect.setRemoveLabel",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.components.InputTransferSelect.setRemoveLabel(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.InputTransferSelect",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.getComment",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.Cookie.getComment()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.swing.text.JTextComponent.getSelectedText",
      "parameters": [],
      "signature": "java.lang.String javax.swing.text.JTextComponent.getSelectedText()",
      "framework": "",
      "link": "",
      "comment": "javax.swing.text.JTextComponent",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.Query.setFilter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.jdo.Query.setFilter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.Query",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.entity.DeflateInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.client.entity.DeflateInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.entity.DeflateInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.moveDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "void org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getServerName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getServerName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.HexDump.dump",
      "parameters": [
        "byte[]",
        "long",
        "java.io.OutputStream",
        "int"
      ],
      "signature": "void org.apache.commons.io.HexDump.dump(byte[], long, java.io.OutputStream, int)",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/HexDump.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Dump an array of bytes to an OutputStream. The output is formatted for human inspection, with a hexadecimal offset followed by the hexadecimal values of the next 16 bytes of data and the printable ASCII characters (if any) that those bytes represent printed per each line of output. The offset argument specifies the start offset of the data array within a larger entity like a file or an incoming stream. For example, if the data array contains the third kibibyte of a file, then the offset argument should be set to 2048. The offset value printed at the beginning of each line indicates where in that larger entity the first byte on that line is located. All bytes between the given index (inclusive) and the end of the data array are dumped.",
        "class": "Dumps data in hexadecimal format. Provides a single function to take an array of bytes and display it in hexadecimal form. Origin of code: POI."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Property.start",
      "parameters": [
        "java.io.Writer"
      ],
      "signature": "boolean org.apache.struts2.components.Property.start(java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Property",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String",
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.domain.Comment.setAuthenticated",
      "parameters": [
        "boolean"
      ],
      "signature": "void net.sourceforge.pebble.domain.Comment.setAuthenticated(boolean)",
      "framework": "pebble",
      "link": "http://help.collab.net/index.jsp?topic=/iaf-700/pebble-soap-javadocs/net/sourceforge/pebble/domain/Comment.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Represents a blog comment."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.validation.StringValidationRule.addBlacklistPattern",
      "parameters": [
        "java.util.regex.Pattern"
      ],
      "signature": "void org.owasp.esapi.reference.validation.StringValidationRule.addBlacklistPattern(java.util.regex.Pattern)",
      "framework": "owaspesapi",
      "link": "",
      "comment": "Counter example for sanitizer (validation)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A validator performs syntax and possibly semantic validation of a single piece of data from an untrusted source."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.unboundid.ldap.sdk.LDAPConnection.search",
      "parameters": [
        "java.lang.String",
        "com.unboundid.ldap.sdk.SearchScope",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "com.unboundid.ldap.sdk.SearchResult com.unboundid.ldap.sdk.LDAPConnection.search(java.lang.String, com.unboundid.ldap.sdk.SearchScope, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "com.unboundid.ldap.sdk.LDAPConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.unboundid.ldap.sdk.SearchResult",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "unboundid-ldapsdk.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.trace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.trace(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.moveToCurrentRow",
      "parameters": [],
      "signature": "void com.mysql.jdbc.ResultSetImpl.moveToCurrentRow()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.LDAPConnection.connect",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "void com.novell.ldap.LDAPConnection.connect(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "com.novell.ldap.LDAPConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.PersistenceManager.newQuery",
      "parameters": [
        "javax.jdo.Extent",
        "java.lang.String"
      ],
      "signature": "javax.jdo.Query javax.jdo.PersistenceManager.newQuery(javax.jdo.Extent, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.PersistenceManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.jdo.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jsoup.nodes.Entities.unescape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.jsoup.nodes.Entities.unescape(java.lang.String)",
      "framework": "jsoup",
      "link": "https://jsoup.org/apidocs/org/jsoup/nodes/Entities.html",
      "comment": "Counter example for sanitizer (unescape)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Un-escape an HTML escaped string.",
        "class": "HTML entities, and escape routines. Source: W3C HTML named character references."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getRemoteHost",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequest.getRemoteHost()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setCachePreparedStatements",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setCachePreparedStatements(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.InitialLdapContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.InitialLdapContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.InitialLdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.trace(org.slf4j.Marker, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.SortedArrayStringMap.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.logging.log4j.util.SortedArrayStringMap.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.SortedArrayStringMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.object.RdbmsOperation.setQueryTimeout",
      "parameters": [
        "int"
      ],
      "signature": "void org.springframework.jdbc.object.RdbmsOperation.setQueryTimeout(int)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/object/RdbmsOperation.html",
      "comment": "Counter example for cwe89",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.servlet.tags.EscapeBodyTag.readBodyContent",
      "parameters": [],
      "signature": "java.lang.String org.springframework.web.servlet.tags.EscapeBodyTag.readBodyContent()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/2.5.x/api/org/springframework/web/servlet/tags/EscapeBodyTag.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Read the unescaped body content from the page.",
        "class": "Custom JSP tag to escape its enclosed body content, applying HTML escaping and/or JavaScript escaping. Provides a \"htmlEscape\" property for explicitly specifying whether to apply HTML escaping. If not set, a page-level default (e.g. from the HtmlEscapeTag) or an application-wide default (the \"defaultHtmlEscape\" context-param in web.xml) is used. Provides a \"javaScriptEscape\" property for specifying whether to apply JavaScript escaping. Can be combined with HTML escaping or used standalone."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.processFileItemStreamAsFileField",
      "parameters": [
        "org.apache.commons.fileupload.FileItemStream",
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.processFileItemStreamAsFileField(org.apache.commons.fileupload.FileItemStream, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.ReusableParameterizedMessage.reserve",
      "parameters": [],
      "signature": "org.apache.logging.log4j.message.ReusableParameterizedMessage org.apache.logging.log4j.message.ReusableParameterizedMessage.reserve()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.ReusableParameterizedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.logging.log4j.message.ReusableParameterizedMessage",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.getCachedMetaData",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "com.mysql.jdbc.CachedResultSetMetaData com.mysql.jdbc.ConnectionImpl.getCachedMetaData(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.CachedResultSetMetaData",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xalan.templates.ElemTemplateElement.replaceChild",
      "parameters": [
        "org.w3c.dom.Node",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.Node org.apache.xalan.templates.ElemTemplateElement.replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)",
      "framework": "apache",
      "link": "https://xalan.apache.org/xalan-j/apidocs/org/apache/xalan/templates/ElemTemplateElement.html",
      "comment": "Counter example for sanitizer (replace but for Nodes only)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replace the old child with a new child.",
        "class": "An instance of this class represents an element inside an xsl:template class. It has a single \"execute\" method which is expected to perform the given action on the result tree. This class acts like a Element node, and implements the Element interface, but is not a full implementation of that interface... it only implements enough for basic traversal of the tree."
      },"return": "org.w3c.dom.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ByteArrayRow.getColumnValue",
      "parameters": [
        "int"
      ],
      "signature": "byte[] com.mysql.jdbc.ByteArrayRow.getColumnValue(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ByteArrayRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getScheme",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getScheme()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getScheme() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.prepareStatement",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "java.sql.PreparedStatement com.mysql.jdbc.ConnectionImpl.prepareStatement(java.lang.String, int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getHighAvailability",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getHighAvailability()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.loadLibrary",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.lang.System.loadLibrary(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Loads the native library specified by the libname argument. The libname argument must not contain any platform specific prefix, file extension or path. If a native library called libname is statically linked with the VM, then the JNI_OnLoad_libname function exported by the library is invoked. See the JNI Specification for more details. Otherwise, the libname argument is loaded from a system library location and mapped to a native library image in an implementation- dependent manner. The call System.loadLibrary(name) is effectively equivalent to the call  Runtime.getRuntime().loadLibrary(name)",
        "class": "The System class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.setAsciiStream",
      "parameters": [
        "int",
        "java.io.InputStream",
        "int"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.setAsciiStream(int, java.io.InputStream, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.getMaxFieldSize",
      "parameters": [],
      "signature": "int com.mysql.jdbc.StatementImpl.getMaxFieldSize()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpCookie.getName",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpCookie.getName()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpCookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.checkColumnBounds",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.checkColumnBounds(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.concurrent.DelegatingSecurityContextExecutorService.getDelegate",
      "parameters": [],
      "signature": "java.util.concurrent.ExecutorService org.springframework.security.concurrent.DelegatingSecurityContextExecutorService.getDelegate()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/concurrent/DelegatingSecurityContextExecutorService.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "An {@link ExecutorService} which wraps each {@link Runnable} in a {@link DelegatingSecurityContextRunnable} and each {@link Callable} in a {@link DelegatingSecurityContextCallable}."
      },"return": "java.util.concurrent.ExecutorService",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.LoggingInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.impl.conn.LoggingInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.LoggingInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getLocalName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getLocalName()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getLocalName() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.query",
      "parameters": [
        "boolean",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.servlet.ServletPartFileItem.get",
      "parameters": [],
      "signature": "byte[] org.apache.wicket.protocol.http.servlet.ServletPartFileItem.get()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the contents of the file item as an array of bytes.",
        "class": "An adapter of Servlet 3.0 {@link Part} to Apache Commons FileUpload's {@link FileItem}"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "wicket-core-7.8.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setProfileSQL",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setProfileSQL(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.TextParseUtil.translateVariables(java.lang.String, com.opensymphony.xwork2.util.ValueStack)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties(java.util.Map, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.BoundedInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.BoundedInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.BoundedInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.util.ResourceBundle",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.execute",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "boolean java.sql.Statement.execute(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setSecondsBeforeRetryMaster",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setSecondsBeforeRetryMaster(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.builder.ToStringBuilder.getStyle",
      "parameters": [],
      "signature": "org.apache.commons.lang3.builder.ToStringStyle org.apache.commons.lang3.builder.ToStringBuilder.getStyle()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.builder.ToStringBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.lang3.builder.ToStringStyle",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.print",
      "parameters": [
        "char[]"
      ],
      "signature": "void java.io.PrintWriter.print(char[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ChunkedOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ChunkedOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ChunkedOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "java.io.Writer"
      ],
      "signature": "int org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginProcessingUrl",
      "parameters": [],
      "signature": "java.lang.String org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginProcessingUrl()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/http/FormLoginBeanDefinitionParser.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source",
        "auth-no-change"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE601",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.ext.beans.SimpleMapModel.size",
      "parameters": [],
      "signature": "int freemarker.ext.beans.SimpleMapModel.size()",
      "framework": "",
      "link": "",
      "comment": "freemarker.ext.beans.SimpleMapModel",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.rawQueryWithFactory",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase$CursorFactory",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.ArrayUtils.lastIndexOf",
      "parameters": [
        "int[]",
        "int"
      ],
      "signature": "int org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.ArrayUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String, int, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.warn(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.functors.InvokerTransformer.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.commons.collections.functors.InvokerTransformer.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.functors.InvokerTransformer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.RowDataDynamic.removeRow",
      "parameters": [
        "int"
      ],
      "signature": "void com.mysql.jdbc.RowDataDynamic.removeRow(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.RowDataDynamic",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.config",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.config(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.servlet.ServletRequestWrapper.getParameterMap()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getParameterMap() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.util.Map",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getRequestedSessionId",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.PortletRequest.getRequestedSessionId()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.StreamResult.doExecute",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.ActionInvocation"
      ],
      "signature": "void org.apache.struts2.result.StreamResult.doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.StreamResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.TimeUtil.fastTimestampCreate",
      "parameters": [
        "java.util.TimeZone",
        "int",
        "int",
        "int",
        "int",
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.Timestamp com.mysql.jdbc.TimeUtil.fastTimestampCreate(java.util.TimeZone, int, int, int, int, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.TimeUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Timestamp",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.Connection.writeResponseHeader",
      "parameters": [
        "org.apache.xmlrpc.webserver.RequestData",
        "int"
      ],
      "signature": "void org.apache.xmlrpc.webserver.Connection.writeResponseHeader(org.apache.xmlrpc.webserver.RequestData, int)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/Connection.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Writes the response header to the output stream.",
        "class": "Handler for a single clients connection. This implementation is able to do HTTP keepalive. In other words, it can serve multiple requests via a single, physical connection."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "char[]"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(char[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.codehaus.plexus.util.FileUtils.cleanDirectoryOnExit",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void org.codehaus.plexus.util.FileUtils.cleanDirectoryOnExit(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.codehaus.plexus.util.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileReader.<init>",
      "parameters": [],
      "signature": "void java.io.FileReader.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.io.FileReader",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.format",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintStream java.io.PrintStream.format(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getParameterValues",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] javax.servlet.http.HttpServletRequestWrapper.getParameterValues(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.updateBinaryStream",
      "parameters": [
        "int",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ResultSet.updateBinaryStream(int, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.xslt.SimpleAdapterDocument.getInputEncoding",
      "parameters": [],
      "signature": "java.lang.String org.apache.struts2.views.xslt.SimpleAdapterDocument.getInputEncoding()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.xslt.SimpleAdapterDocument",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setBinaryStream",
      "parameters": [
        "java.lang.String",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setBinaryStream(java.lang.String, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.MysqlIO.checkForCharsetMismatch",
      "parameters": [],
      "signature": "void com.mysql.jdbc.MysqlIO.checkForCharsetMismatch()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.MysqlIO",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getRemoteUser",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getRemoteUser()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Number.getMaximumIntegerDigits",
      "parameters": [],
      "signature": "java.lang.Integer org.apache.struts2.components.Number.getMaximumIntegerDigits()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Number",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Integer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetRow.getTimestampFast",
      "parameters": [
        "int",
        "java.util.Calendar",
        "java.util.TimeZone",
        "boolean",
        "com.mysql.jdbc.MySQLConnection",
        "com.mysql.jdbc.ResultSetImpl"
      ],
      "signature": "java.sql.Timestamp com.mysql.jdbc.ResultSetRow.getTimestampFast(int, java.util.Calendar, java.util.TimeZone, boolean, com.mysql.jdbc.MySQLConnection, com.mysql.jdbc.ResultSetImpl)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Timestamp",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ByteArrayRow.getNativeTimestamp",
      "parameters": [
        "int",
        "java.util.Calendar",
        "java.util.TimeZone",
        "boolean",
        "com.mysql.jdbc.ConnectionImpl",
        "com.mysql.jdbc.ResultSetImpl"
      ],
      "signature": "java.sql.Timestamp com.mysql.jdbc.ByteArrayRow.getNativeTimestamp(int, java.util.Calendar, java.util.TimeZone, boolean, com.mysql.jdbc.ConnectionImpl, com.mysql.jdbc.ResultSetImpl)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ByteArrayRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Timestamp",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xml.serialize.OutputFormat.getLineSeparator",
      "parameters": [],
      "signature": "java.lang.String org.apache.xml.serialize.OutputFormat.getLineSeparator()",
      "framework": "",
      "link": "",
      "comment": "org.apache.xml.serialize.OutputFormat",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forJavaScript",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forJavaScript(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for a JavaScript string. It is safe for use in HTML script attributes (such as {@code onclick}), script blocks, JSON files, and JavaScript source. The caller MUST provide the surrounding quotation characters for the string. Since this performs additional encoding so it can work in all of the JavaScript contexts listed, it may be slightly less efficient than using one of the methods targetted to a specific JavaScript context ({@link #forJavaScriptAttribute(String)}, {@link #forJavaScriptBlock}, {@link #forJavaScriptSource}). Unless you are interested in saving a few bytes of output or are writing a framework on top of this library, it is recommend that you use this method over the others. Example JSP Usage:     ');\">\n    \n        var data = \"\";\n    \n Encoding Description Input Character Encoded Result Notes U+0008 BS \\b Backspace character U+0009 HT \\t Horizontal tab character U+000A LF \\n Line feed character U+000C FF \\f Form feed character U+000D CR \\r Carriage return character U+0022 \" \\x22 The encoding \\\" is not used here because it is not safe for use in HTML attributes. (In HTML attributes, it would also be correct to use \"\\&quot;\".) U+0026 & \\x26 Ampersand character U+0027 ' \\x27 The encoding \\' is not used here because it is not safe for use in HTML attributes. (In HTML attributes, it would also be correct to use \"\\&#39;\".) U+002F / \\/ This encoding is used to avoid an input sequence \" block. U+005C \\ \\\\ U+0000 to U+001F \\x## Hexadecimal encoding is used for characters in this range that were not already mentioned in above.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.updateBlob",
      "parameters": [
        "int",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ResultSet.updateBlob(int, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.supportsResultSetType",
      "parameters": [
        "int"
      ],
      "signature": "boolean com.mysql.jdbc.DatabaseMetaData.supportsResultSetType(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.addHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.addHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponse",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.ArrayUtils.lastIndexOf",
      "parameters": [
        "byte[]",
        "byte"
      ],
      "signature": "int org.apache.commons.lang.ArrayUtils.lastIndexOf(byte[], byte)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.ArrayUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.LineIterator.close",
      "parameters": [],
      "signature": "void org.apache.commons.io.LineIterator.close()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.LineIterator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getDeclaredField",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code Field} object that reflects the specified declared field of the class or interface represented by this {@code Class} object. The {@code name} parameter is a {@code String} that specifies the simple name of the desired field. If this {@code Class} object represents an array type, then this method does not find the {@code length} field of the array type.",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.lang.reflect.Field",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.SingleByteCharsetConverter.toBytes",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] com.mysql.jdbc.SingleByteCharsetConverter.toBytes(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.SingleByteCharsetConverter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.LineIterator.hasNext",
      "parameters": [],
      "signature": "boolean org.apache.commons.io.LineIterator.hasNext()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.LineIterator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.trace",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.pmw.tinylog.Logger.trace(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.mysql.jdbc.ResultSetImpl.getString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.util.ServerController.getSystemProperties",
      "parameters": [],
      "signature": "java.util.Properties com.mysql.jdbc.util.ServerController.getSystemProperties()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.util.ServerController",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Properties",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.toFiles",
      "parameters": [
        "java.net.URL[]"
      ],
      "signature": "java.io.File[] org.apache.commons.io.FileUtils.toFiles(java.net.URL[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletOutputStream.print",
      "parameters": [
        "double"
      ],
      "signature": "void javax.servlet.ServletOutputStream.print(double)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Writes a double value to the client, with no carriage return-line feed (CRLF) at the end.",
        "class": "Provides an output stream for sending binary data to the client. A ServletOutputStream object is normally retrieved via the {@link ServletResponse#getOutputStream} method. This is an abstract class that the servlet container implements. Subclasses of this class must implement the java.io.OutputStream.write(int) method."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.write",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "void java.io.PrintWriter.write(java.lang.String, int, int)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.apache.xml.utils.PrefixResolver"
      ],
      "signature": "org.apache.xpath.objects.XObject org.apache.xpath.XPathAPI.eval(org.w3c.dom.Node, java.lang.String, org.apache.xml.utils.PrefixResolver)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.xpath.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getCSV",
      "parameters": [
        "org.eclipse.jetty.http.HttpHeader",
        "boolean"
      ],
      "signature": "java.util.List org.eclipse.jetty.http.HttpFields.getCSV(org.eclipse.jetty.http.HttpHeader, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.setValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.util.ValueStack.setValue(java.lang.String, java.lang.Object, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.NetscapeDomainHandler.match",
      "parameters": [
        "org.apache.http.cookie.Cookie",
        "org.apache.http.cookie.CookieOrigin"
      ],
      "signature": "boolean org.apache.http.impl.cookie.NetscapeDomainHandler.match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.NetscapeDomainHandler",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.felix.shell.impl.LogOptions.getMinLevel",
      "parameters": [],
      "signature": "int org.apache.felix.shell.impl.LogOptions.getMinLevel()",
      "framework": "",
      "link": "",
      "comment": "org.apache.felix.shell.impl.LogOptions",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.getContent",
      "parameters": [],
      "signature": "java.lang.Object java.net.URL.getContent()",
      "framework": "",
      "link": "",
      "comment": "java.net.URL",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE918"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.list.CursorableLinkedList.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.commons.collections.list.CursorableLinkedList.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.list.CursorableLinkedList",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ClientInfoProviderSP.getClientInfo",
      "parameters": [
        "java.sql.Connection"
      ],
      "signature": "java.util.Properties com.mysql.jdbc.JDBC4ClientInfoProviderSP.getClientInfo(java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ClientInfoProviderSP",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Properties",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "java.lang.String[]",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, int, java.lang.String[], org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.jaas.JaasAuthenticationProvider.authenticate",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.Authentication org.springframework.security.authentication.jaas.JaasAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/3.1.8.CI-SNAPSHOT/apidocs/org/springframework/security/authentication/jaas/JaasAuthenticationProvider.html",
      "comment": "The input object is authenticated and returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempts to login the user given the Authentication objects principal and credential",
        "class": "An {@link AuthenticationProvider} implementation that retrieves user details from a JAAS login configuration. This AuthenticationProvider is capable of validating {@link org.springframework.security.authentication.UsernamePasswordAuthenticationToken} requests contain the correct username and password. This implementation is backed by a JAAS configuration. The loginConfig property must be set to a given JAAS configuration file. This setter accepts a Spring {@link org.springframework.core.io.Resource} instance. It should point to a JAAS configuration file containing an index matching the {@link #setLoginContextName(java.lang.String) loginContextName} property. For example: If this JaasAuthenticationProvider were configured in a Spring WebApplicationContext the xml to set the loginConfiguration could be as follows...  \n   /WEB-INF/login.conf\n \n The loginContextName should coincide with a given index in the loginConfig specifed. The loginConfig file used in the JUnit tests appears as the following...  JAASTest {\n   org.springframework.security.authentication.jaas.TestLoginModule required;\n };\n Using the example login configuration above, the loginContextName property would be set as JAASTest...    JAASTest \n When using JAAS login modules as the authentication source, sometimes the LoginContext will require CallbackHandlers. The JaasAuthenticationProvider uses an internal CallbackHandler to wrap the {@link JaasAuthenticationCallbackHandler}s configured in the ApplicationContext. When the LoginContext calls the internal CallbackHandler, control is passed to each {@link JaasAuthenticationCallbackHandler} for each Callback passed. {@link JaasAuthenticationCallbackHandler}s are passed to the JaasAuthenticationProvider through the {@link #setCallbackHandlers(org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler[]) callbackHandlers} property.  \n   \n     \n     \n     \n  \n \n After calling LoginContext.login(), the JaasAuthenticationProvider will retrieve the returned Principals from the Subject (LoginContext.getSubject().getPrincipals). Each returned principal is then passed to the configured {@link AuthorityGranter}s. An AuthorityGranter is a mapping between a returned Principal, and a role name. If an AuthorityGranter wishes to grant an Authorization a role, it returns that role name from it's {@link AuthorityGranter#grant(java.security.Principal)} method. The returned role will be applied to the Authorization object as a {@link GrantedAuthority}. AuthorityGranters are configured in spring xml as follows...  \n   \n     \n   \n  \n A configuration note: The JaasAuthenticationProvider uses the security properites &quote;login.config.url.X&quote; to configure jaas. If you would like to customize the way Jaas gets configured, create a subclass of this and override the {@link #configureJaas(Resource)} method."
      },"return": "org.springframework.security.core.Authentication",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jca.cci.connection.ConnectionFactoryUtils.<init>",
      "parameters": [],
      "signature": "void org.springframework.jca.cci.connection.ConnectionFactoryUtils.<init>()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/jca/cci/connection/ConnectionFactoryUtils.html",
      "comment": "Counter example for authentication (init)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.UserAuthorizer.getCredentialsFromCode",
      "parameters": [
        "java.lang.String",
        "java.net.URI"
      ],
      "signature": "com.google.auth.oauth2.UserCredentials com.google.auth.oauth2.UserAuthorizer.getCredentialsFromCode(java.lang.String, java.net.URI)",
      "framework": "oauth",
      "link": "http://google.github.io/google-auth-library-java/releases/0.7.1/apidocs/com/google/auth/oauth2/UserAuthorizer.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a UserCredentials instance by exchanging an OAuth2 authorization code for tokens.",
        "class": "Handles an interactive 3-Legged-OAuth2 (3LO) user consent authorization."
      },"return": "com.google.auth.oauth2.UserCredentials",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.io.binary.Token.writeString",
      "parameters": [
        "java.io.DataOutput",
        "java.lang.String"
      ],
      "signature": "void com.thoughtworks.xstream.io.binary.Token.writeString(java.io.DataOutput, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.io.binary.Token",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectNodeList",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.NodeList com.sun.org.apache.xpath.internal.XPathAPI.selectNodeList(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.analysis.FramePrinter.printLocals",
      "parameters": [
        "javassist.bytecode.analysis.Frame"
      ],
      "signature": "void javassist.bytecode.analysis.FramePrinter.printLocals(javassist.bytecode.analysis.Frame)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.analysis.FramePrinter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.debug",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.debug(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.warn",
      "parameters": [
        "java.lang.Throwable",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.warn(java.lang.Throwable, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForXMLAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForXMLAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in an XML attribute. The implementation should follow the XML Encoding Standard from the W3C. The use of a real XML parser is highly encouraged. However, in the hopefully rare case that you need to make sure that data is safe for inclusion in an XML document and cannot use a parse, this method provides a safe mechanism to do so.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.getStatementComment",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.ConnectionImpl.getStatementComment()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.ser.SerializerCache._makeReadOnlyLookupMap",
      "parameters": [],
      "signature": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap com.fasterxml.jackson.databind.ser.SerializerCache._makeReadOnlyLookupMap()",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.ser.SerializerCache",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.ProxyOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.getText",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.struts2.util.StrutsUtil.getText(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest.getFile",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.apache.struts2.dispatcher.multipart.UploadedFile[] org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest.getFile(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.struts2.dispatcher.multipart.UploadedFile[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getHeaderNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequest.getHeaderNames()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.append",
      "parameters": [
        "char"
      ],
      "signature": "java.lang.Appendable org.apache.commons.io.output.ProxyWriter.append(char)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Appendable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.next",
      "parameters": [],
      "signature": "java.lang.String java.util.Scanner.next()",
      "framework": "",
      "link": "",
      "comment": "java.util.Scanner",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.Buffer.getPosition",
      "parameters": [],
      "signature": "int com.mysql.jdbc.Buffer.getPosition()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.Buffer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyReader.read",
      "parameters": [
        "char[]"
      ],
      "signature": "int org.apache.commons.io.input.ProxyReader.read(char[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.append",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.append(java.lang.CharSequence)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.Tailer.readLines",
      "parameters": [
        "org.apache.commons.io.input.Tailer.RandomAccessResourceBridge"
      ],
      "signature": "long org.apache.commons.io.input.Tailer.readLines(org.apache.commons.io.input.Tailer.RandomAccessResourceBridge)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.Tailer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.FastByteArrayOutputStream.decodeAndWriteOut",
      "parameters": [
        "java.io.Writer",
        "byte[]",
        "int",
        "java.nio.ByteBuffer",
        "java.nio.CharBuffer",
        "java.nio.charset.CharsetDecoder",
        "boolean"
      ],
      "signature": "void org.apache.struts2.util.FastByteArrayOutputStream.decodeAndWriteOut(java.io.Writer, byte[], int, java.nio.ByteBuffer, java.nio.CharBuffer, java.nio.charset.CharsetDecoder, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.FastByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.InitialLdapContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.InitialLdapContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.InitialLdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.debug(org.slf4j.Marker, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.error(org.slf4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getPathTranslated",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getPathTranslated()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.getErrorMessageEncoding",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.ConnectionImpl.getErrorMessageEncoding()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.execute",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "boolean java.sql.PreparedStatement.execute(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.trace(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.SecurityConfigurerAdapter.and",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.SecurityBuilder org.springframework.security.config.annotation.SecurityConfigurerAdapter.and()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/SecurityConfigurerAdapter.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.SecurityBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.LineNumberReader.readLine",
      "parameters": [],
      "signature": "java.lang.String java.io.LineNumberReader.readLine()",
      "framework": "",
      "link": "",
      "comment": "java.io.LineNumberReader",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockHttpServletRequest.authenticate",
      "parameters": [
        "javax.servlet.http.HttpServletResponse"
      ],
      "signature": "boolean org.springframework.mock.web.MockHttpServletRequest.authenticate(javax.servlet.http.HttpServletResponse)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/mock/web/MockHttpServletRequest.html",
      "comment": "The authentication is added to the response.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Use the container login mechanism configured for the ServletContext to authenticate the user making this request. This method may modify and commit the argument HttpServletResponse.",
        "class": "Mock implementation of the {@link javax.servlet.http.HttpServletRequest} interface. The default, preferred {@link Locale} for the server mocked by this request is {@link Locale#ENGLISH}. This value can be changed via {@link #addPreferredLocale} or {@link #setPreferredLocales}. As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getServerName",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.PortletRequest.getServerName()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.FastByteArrayOutputStream.writeTo",
      "parameters": [
        "java.io.RandomAccessFile"
      ],
      "signature": "void org.apache.struts2.util.FastByteArrayOutputStream.writeTo(java.io.RandomAccessFile)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.FastByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forXmlContent",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forXmlContent(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encoder for XML and XHTML text content. See {@link #forHtmlContent(String)} for description of encoding and context.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.config.RequestConfig.clone",
      "parameters": [],
      "signature": "org.apache.http.client.config.RequestConfig org.apache.http.client.config.RequestConfig.clone()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.config.RequestConfig",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.client.config.RequestConfig",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.util.SecurityUtils.runAsUnauthenticated",
      "parameters": [],
      "signature": "void net.sourceforge.pebble.util.SecurityUtils.runAsUnauthenticated()",
      "framework": "pebble",
      "link": "http://help.collab.net/topic/iaf-700/pebble-soap-javadocs/net/sourceforge/pebble/util/SecurityUtils.html",
      "comment": "Puts the state of the program to unauthenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A collection of utility methods for security."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.warn",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.commons.logging.Log.warn(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.sendError",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.sendError(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponseWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getTcpSndBuf",
      "parameters": [],
      "signature": "int com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getTcpSndBuf()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.ObjectMapper.setVisibility",
      "parameters": [
        "com.fasterxml.jackson.databind.introspect.VisibilityChecker"
      ],
      "signature": "com.fasterxml.jackson.databind.ObjectMapper com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker)",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.ObjectMapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.fasterxml.jackson.databind.ObjectMapper",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.getProcedureColumns",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.sql.ResultSet com.mysql.jdbc.DatabaseMetaData.getProcedureColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xpath.regex.RegularExpression.equals",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean com.google.gxp.org.apache.xerces.impl.xpath.regex.RegularExpression.equals(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xpath.regex.RegularExpression",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.xinclude.XIncludeHandler.startGeneralEntity",
      "parameters": [
        "java.lang.String",
        "com.google.gxp.org.apache.xerces.xni.XMLResourceIdentifier",
        "java.lang.String",
        "com.google.gxp.org.apache.xerces.xni.Augmentations"
      ],
      "signature": "void com.google.gxp.org.apache.xerces.xinclude.XIncludeHandler.startGeneralEntity(java.lang.String, com.google.gxp.org.apache.xerces.xni.XMLResourceIdentifier, java.lang.String, com.google.gxp.org.apache.xerces.xni.Augmentations)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.xinclude.XIncludeHandler",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "kotlin.io.FilesKt.createTempFile$default",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.io.File",
        "int",
        "java.lang.Object"
      ],
      "signature": "java.io.File kotlin.io.FilesKt.createTempFile$default(java.lang.String, java.lang.String, java.io.File, int, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "kotlin.io.FilesKt",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "kotlin-stdlib-1.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateProxyDefault",
      "parameters": [
        "org.apache.commons.httpclient.HttpMethod",
        "org.apache.commons.httpclient.HttpConnection",
        "org.apache.commons.httpclient.HttpState"
      ],
      "signature": "boolean org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateProxyDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/HttpAuthenticator.html",
      "comment": "Depricated method. The credentials are provided in the HttpState. The authentication is added to the header of the HttpMethod.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          2,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempt to provide default proxy authentication credentials to the given method in the given context using basic authentication scheme.",
        "class": "Utility methods for HTTP authorization and authentication. This class provides utility methods for generating responses to HTTP www and proxy authentication challenges. A client SHOULD assume that all paths at or deeper than the depth of the last symbolic element in the path field of the Request-URI also are within the protection space specified by the basic realm value of the current challenge. A client MAY preemptively send the corresponding Authorization header with requests for resources in that space without receipt of another challenge from the server. Similarly, when a client sends a request to a proxy, it may reuse a userid and password in the Proxy-Authorization header field without receiving another challenge from the proxy server."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.setClob",
      "parameters": [
        "java.lang.String",
        "java.sql.Clob"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.setClob(java.lang.String, java.sql.Clob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setParanoid",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setParanoid(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.AttributesMapper",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.AttributesMapper, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Date.end",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "boolean org.apache.struts2.components.Date.end(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Date",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyOutputStream.write",
      "parameters": [
        "byte[]"
      ],
      "signature": "void org.apache.commons.io.output.ProxyOutputStream.write(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.WebServer.class$",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Class org.apache.xmlrpc.webserver.WebServer.class$(java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/WebServer.html",
      "comment": "Counter example for sanitizer (String as param, but implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.directoryContains",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.FileUtils.directoryContains(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateInt",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateInt(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getGetMethod",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Method com.opensymphony.xwork2.ognl.OgnlReflectionProvider.getGetMethod(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Method",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ResourceRequest.getResourceID",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.ResourceRequest.getResourceID()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ResourceRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpField.getName",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpField.getName()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpField",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.protocol.RequestDefaultHeaders.process",
      "parameters": [
        "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "void org.apache.http.client.protocol.RequestDefaultHeaders.process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.protocol.RequestDefaultHeaders",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.registerOutParameter",
      "parameters": [
        "java.lang.String",
        "int",
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.registerOutParameter(java.lang.String, int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.setDate",
      "parameters": [
        "int",
        "java.sql.Date",
        "java.util.Calendar"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.setDate(int, java.sql.Date, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.setBlob",
      "parameters": [
        "java.lang.String",
        "java.io.InputStream",
        "long"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.setBlob(java.lang.String, java.io.InputStream, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass",
      "parameters": [
        "java.io.ObjectStreamClass"
      ],
      "signature": "java.lang.Class org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(java.io.ObjectStreamClass)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ClassLoaderObjectInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.warn(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.createTempFile",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.io.File java.io.File.createTempFile(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.io.File",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties(java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jsoup.parser.Parser.parse",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "org.jsoup.nodes.Document org.jsoup.parser.Parser.parse(java.lang.String, java.lang.String)",
      "framework": "jsoup",
      "link": "https://jsoup.org/apidocs/org/jsoup/parser/Parser.html#parseInput-java.lang.String-java.lang.String-",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "source"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Parse HTML into a Document.",
        "class": "Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the more convenient parse methods in {@link org.jsoup.Jsoup}."
      },"return": "org.jsoup.nodes.Document",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.servlet.ServletRequestWrapper.getAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call getAttribute(String name) on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.analysis.Util.isJumpInstruction",
      "parameters": [
        "int"
      ],
      "signature": "boolean javassist.bytecode.analysis.Util.isJumpInstruction(int)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.analysis.Util",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.BoundedReader.read",
      "parameters": [],
      "signature": "int org.apache.commons.io.input.BoundedReader.read()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.BoundedReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.spml.SunIdm.logout",
      "parameters": [],
      "signature": "void com.novell.ldap.spml.SunIdm.logout()",
      "framework": "ldap",
      "link": "https://github.com/aptivate/openldap-jldap/blob/master/com/novell/ldap/spml/SunIdm.java",
      "comment": "Puts the program is an unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.executeQuery",
      "parameters": [],
      "signature": "java.sql.ResultSet com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.executeQuery()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "anorm.SimpleSql.executeQuery",
      "parameters": [
        "java.sql.Connection"
      ],
      "signature": "anorm.SqlQueryResult anorm.SimpleSql.executeQuery(java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "anorm.SimpleSql",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "anorm.SqlQueryResult",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "anorm_2.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Properties.load",
      "parameters": [
        "java.io.InputStream"
      ],
      "signature": "void java.util.Properties.load(java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Reads a property list (key and element pairs) from the input byte stream. The input stream is in a simple line-oriented format as specified in {@link #load(java.io.Reader) load(Reader)} and is assumed to use the ISO 8859-1 character encoding; that is each byte is one Latin1 character. Characters not in Latin1, and certain special characters, are represented in keys and elements using Unicode escapes as defined in section 3.3 of The Java™ Language Specification. The specified stream remains open after this method returns.",
        "class": "The {@code Properties} class represents a persistent set of properties. The {@code Properties} can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string. A property list can contain another property list as its \"defaults\"; this second property list is searched if the property key is not found in the original property list. Because {@code Properties} inherits from {@code Hashtable}, the {@code put} and {@code putAll} methods can be applied to a {@code Properties} object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not {@code Strings}. The {@code setProperty} method should be used instead. If the {@code store} or {@code save} method is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key or value, the call will fail. Similarly, the call to the {@code propertyNames} or {@code list} method will fail if it is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key. The {@link #load(java.io.Reader) load(Reader)} / {@link #store(java.io.Writer, java.lang.String) store(Writer, String)} methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The {@link #load(java.io.InputStream) load(InputStream)} / {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)} methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of The Java™ Language Specification; only a single 'u' character is allowed in an escape sequence. The native2ascii tool can be used to convert property files to and from other character encodings. The {@link #loadFromXML(InputStream)} and {@link #storeToXML(OutputStream, String, String)} methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration:  \n Note that the system URI (http://java.sun.com/dtd/properties.dtd) is not accessed when exporting or importing properties; it merely serves as a string to uniquely identify the DTD, which is:     \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n This class is thread-safe: multiple threads can share a single Properties object without the need for external synchronization."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Thread.sleep",
      "parameters": [
        "long",
        "int"
      ],
      "signature": "void java.lang.Thread.sleep(long, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.",
        "class": "A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently. Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon. When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs: The exit method of class Runtime has been called and the security manager has permitted the exit operation to take place. All threads that are not daemon threads have died, either by returning from the call to the run method or by throwing an exception that propagates beyond the run method. There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started. For example, a thread that computes primes larger than a stated value could be written as follows:      class PrimeThread extends Thread {\n         long minPrime;\n         PrimeThread(long minPrime) {\n             this.minPrime = minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n              . . .\n         }\n     }\n The following code would then create a thread and start it running:      PrimeThread p = new PrimeThread(143);\n     p.start();\n The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started. The same example in this other style looks like the following:      class PrimeRun implements Runnable {\n         long minPrime;\n         PrimeRun(long minPrime) {\n             this.minPrime = minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n              . . .\n         }\n     }\n The following code would then create a thread and start it running:      PrimeRun p = new PrimeRun(143);\n     new Thread(p).start();\n Every thread has a name for identification purposes. More than one thread may have the same name. If a name is not specified when a thread is created, a new name is generated for it. Unless otherwise noted, passing a {@code null} argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.comparator.PathFileComparator.compare",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "int org.apache.commons.io.comparator.PathFileComparator.compare(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.comparator.PathFileComparator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled",
      "parameters": [
        "java.lang.String",
        "org.apache.logging.log4j.Level",
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setString",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setString(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "kotlin.io.FilesKt.createTempDir",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.io.File"
      ],
      "signature": "java.io.File kotlin.io.FilesKt.createTempDir(java.lang.String, java.lang.String, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "kotlin.io.FilesKt",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "kotlin-stdlib-1.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionImpl.registerStatement",
      "parameters": [
        "com.mysql.jdbc.StatementImpl"
      ],
      "signature": "void com.mysql.jdbc.ConnectionImpl.registerStatement(com.mysql.jdbc.StatementImpl)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.PlainTextResult.sendStream",
      "parameters": [
        "java.io.PrintWriter",
        "java.io.InputStreamReader"
      ],
      "signature": "void org.apache.struts2.result.PlainTextResult.sendStream(java.io.PrintWriter, java.io.InputStreamReader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.PlainTextResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.endOfLine",
      "parameters": [],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.endOfLine()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getCreateDatabaseIfNotExist",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getCreateDatabaseIfNotExist()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.routing.RouteTracker.clone",
      "parameters": [],
      "signature": "java.lang.Object org.apache.http.conn.routing.RouteTracker.clone()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.routing.RouteTracker",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.LdapContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.accept",
      "parameters": [
        "java.lang.reflect.Field"
      ],
      "signature": "boolean org.apache.commons.lang3.builder.ReflectionToStringBuilder.accept(java.lang.reflect.Field)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.scheme.SchemeRegistry.getSchemeNames",
      "parameters": [],
      "signature": "java.util.List org.apache.http.conn.scheme.SchemeRegistry.getSchemeNames()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.scheme.SchemeRegistry",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.copyLarge",
      "parameters": [
        "java.io.InputStream",
        "java.io.OutputStream",
        "long",
        "long",
        "byte[]"
      ],
      "signature": "long org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long, byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.KerberosScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.KerberosScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/KerberosScheme.html",
      "comment": "The authentication string is calculated from the credentials and returned as a header.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces KERBEROS authorization Header based on token created by processChallenge.",
        "class": "KERBEROS authentication scheme."
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.dom.SecuritySupport.getResourceAsStream",
      "parameters": [
        "java.lang.ClassLoader",
        "java.lang.String"
      ],
      "signature": "java.io.InputStream com.google.gxp.org.apache.xerces.dom.SecuritySupport.getResourceAsStream(java.lang.ClassLoader, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.dom.SecuritySupport",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.common.TemplateAwareExpressionParser.parseExpression(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.common.TemplateAwareExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.XmlStreamReader.getXmlProlog",
      "parameters": [
        "java.io.InputStream",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.io.input.XmlStreamReader.getXmlProlog(java.io.InputStream, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.XmlStreamReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getRemoteHost",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getRemoteHost()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "anorm.SimpleSql.executeInsert",
      "parameters": [
        "anorm.ResultSetParser",
        "java.sql.Connection"
      ],
      "signature": "java.lang.Object anorm.SimpleSql.executeInsert(anorm.ResultSetParser, java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "anorm.SimpleSql",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "anorm_2.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.lookup",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapTemplate.lookup(java.lang.String, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getDate",
      "parameters": [
        "java.lang.String",
        "java.util.Calendar"
      ],
      "signature": "java.sql.Date com.mysql.jdbc.CallableStatement.getDate(java.lang.String, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Date",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperties(java.util.Map, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.warn(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.compile",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlUtil.compile(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.WebServer.newThreadPool",
      "parameters": [],
      "signature": "org.apache.xmlrpc.util.ThreadPool org.apache.xmlrpc.webserver.WebServer.newThreadPool()",
      "framework": "apache",
      "link": "",
      "comment": "Counter example for source",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "The {@link WebServer} is a minimal HTTP server, that might be used as an embedded web server. Use of the {@link WebServer} has grown very popular amongst users of Apache XML-RPC. Why this is the case, can hardly be explained, because the {@link WebServer} is at best a workaround, compared to full blown servlet engines like Tomcat or Jetty. For example, under heavy load it will almost definitely be slower than a real servlet engine, because it does neither support proper keepalive (multiple requests per physical connection) nor chunked mode (in other words, it cannot stream requests). If you still insist in using the {@link WebServer}, it is recommended to use its subclass, the {@link ServletWebServer} instead, which offers a minimal subset of the servlet API. In other words, you keep yourself the option to migrate to a real servlet engine later. Use of the {@link WebServer} goes roughly like this: First of all, create a property file (for example \"MyHandlers.properties\") and add it to your jar file. The property keys are handler names and the property values are the handler classes. Once that is done, create an instance of WebServer:    final int port = 8088;\n   final String propertyFile = \"MyHandler.properties\";\n\n   PropertyHandlerMapping mapping = new PropertyHandlerMapping();\n   ClassLoader cl = Thread.currentThread().getContextClassLoader();\n   mapping.load(cl, propertyFile);\n   WebServer webServer = new WebServer(port);\n   XmlRpcServerConfigImpl config = new XmlRpcServerConfigImpl();\n   XmlRpcServer server = webServer.getXmlRpcServer();\n   server.setConfig(config);\n   server.setHandlerMapping(mapping);\n   webServer.start();"
      },"return": "org.apache.xmlrpc.util.ThreadPool",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.entity.DecompressingEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.client.entity.DecompressingEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.entity.DecompressingEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.apache.xpath.objects.XObject org.apache.xpath.XPathAPI.eval(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.xpath.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getLocalAddr",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getLocalAddr()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.activation.FileDataSource.<init",
      "parameters": [],
      "signature": "void javax.activation.FileDataSource.<init()",
      "framework": "",
      "link": "",
      "comment": "javax.activation",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "activation.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectNodeIterator",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.traversal.NodeIterator org.apache.xpath.XPathAPI.selectNodeIterator(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.traversal.NodeIterator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.binary.Hex.encodeHex",
      "parameters": [
        "byte[]"
      ],
      "signature": "char[] org.apache.commons.codec.binary.Hex.encodeHex(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.",
        "class": "Converts hexadecimal Strings. The charset used for certain operation can be set, the default is set in {@link #DEFAULT_CHARSET_NAME} This class is thread-safe."
      },"return": "char[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.stratos.cli-4.0.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.registerOutParameter",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.registerOutParameter(int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.getGetMethod",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Method com.opensymphony.xwork2.util.reflection.ReflectionProvider.getGetMethod(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Method",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.servlet.http.HttpServletRequest.getParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap.getReadOnlyContextData",
      "parameters": [],
      "signature": "org.apache.logging.log4j.util.StringMap org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap.getReadOnlyContextData()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.logging.log4j.util.StringMap",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getValues",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.util.Enumeration org.eclipse.jetty.http.HttpFields.getValues(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.criterion.Restrictions.sqlRestriction",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "org.hibernate.type.Type"
      ],
      "signature": "org.hibernate.criterion.Criterion org.hibernate.criterion.Restrictions.sqlRestriction(java.lang.String, java.lang.Object, org.hibernate.type.Type)",
      "framework": "",
      "link": "",
      "comment": "org.hibernate.criterion.Restrictions",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.hibernate.criterion.Criterion",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-4.2.4.final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.ResultSet.getString",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String java.sql.ResultSet.getString(int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.ResultSet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.list",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.list(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.core.util.Base64Encoder.decode",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] com.thoughtworks.xstream.core.util.Base64Encoder.decode(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.core.util.Base64Encoder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getNativeByte",
      "parameters": [
        "int",
        "boolean"
      ],
      "signature": "byte com.mysql.jdbc.ResultSetImpl.getNativeByte(int, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.XmlRpcServletServer.execute",
      "parameters": [
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse"
      ],
      "signature": "void org.apache.xmlrpc.webserver.XmlRpcServletServer.execute(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/XmlRpcServletServer.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79",
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Processes the servlet request.",
        "class": "An extension of {@link org.apache.xmlrpc.server.XmlRpcServer}, which is suitable for processing servlet requests."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.getNString",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.JDBC4ResultSet.getNString(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forJavaScriptSource",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forJavaScriptSource(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This method encodes for JavaScript strings contained within a JavaScript or JSON file. This method is NOT safe for use in ANY context embedded in HTML. The caller must provide the surrounding quotation characters. This method performs the same encode as {@link #forJavaScript(String)} with the exception that / and & are not escaped and \" and ' are encoded as \\\" and \\' respectively. Unless you are interested in saving a few bytes of output or are writing a framework on top of this library, it is recommend that you use {@link #forJavaScript(String)} over this method. Example JSP Usage: This example is serving up JavaScript source directly:     \n    var data = \"\";\n This example is serving up JSON data (users of this use-case are encouraged to read up on \"JSON Hijacking\"):     \n    \n    {\"data\":\"\"}",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.openConnection",
      "parameters": [],
      "signature": "java.net.URLConnection java.net.URL.openConnection()",
      "framework": "",
      "link": "",
      "comment": "java.net.URL",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE918"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URLConnection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String[]",
        "java.io.File"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String[], java.lang.String[], java.io.File)",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.executeInternal",
      "parameters": [
        "int",
        "com.mysql.jdbc.Buffer",
        "boolean",
        "boolean",
        "com.mysql.jdbc.Field[]",
        "boolean"
      ],
      "signature": "com.mysql.jdbc.ResultSetInternalMethods com.mysql.jdbc.PreparedStatement.executeInternal(int, com.mysql.jdbc.Buffer, boolean, boolean, com.mysql.jdbc.Field[], boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.ResultSetInternalMethods",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.tomcat.buf.HexUtils.getHex",
      "parameters": [
        "int"
      ],
      "signature": "byte org.apache.struts2.util.tomcat.buf.HexUtils.getHex(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.tomcat.buf.HexUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.SPNegoScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.SPNegoScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/SPNegoScheme.html",
      "comment": "The authentication string is calculated from the credentials and returned as a header.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces SPNEGO authorization Header based on token created by processChallenge.",
        "class": "SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism) authentication scheme."
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.EmptyInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.impl.io.EmptyInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.EmptyInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.ProxyInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.xslt.AbstractAdapterNode.getElementsByTagNameNS",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.NodeList org.apache.struts2.views.xslt.AbstractAdapterNode.getElementsByTagNameNS(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.xslt.AbstractAdapterNode",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectNodeIterator",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.traversal.NodeIterator com.sun.org.apache.xpath.internal.XPathAPI.selectNodeIterator(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.traversal.NodeIterator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.WeakHashtable.rehash",
      "parameters": [],
      "signature": "void org.apache.commons.logging.impl.WeakHashtable.rehash()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.WeakHashtable",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.readFully",
      "parameters": [
        "java.io.Reader",
        "char[]",
        "int"
      ],
      "signature": "int com.mysql.jdbc.PreparedStatement.readFully(java.io.Reader, char[], int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4UpdatableResultSet.updateClob",
      "parameters": [
        "int",
        "java.io.Reader",
        "long"
      ],
      "signature": "void com.mysql.jdbc.JDBC4UpdatableResultSet.updateClob(int, java.io.Reader, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.awt.TextComponent.getSelectedText",
      "parameters": [],
      "signature": "java.lang.String java.awt.TextComponent.getSelectedText()",
      "framework": "",
      "link": "",
      "comment": "java.awt.TextComponent",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getServerName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getServerName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core.Environment.appendInstructionStackItem",
      "parameters": [
        "freemarker.core.TemplateElement",
        "java.lang.StringBuffer"
      ],
      "signature": "void freemarker.core.Environment.appendInstructionStackItem(freemarker.core.TemplateElement, java.lang.StringBuffer)",
      "framework": "",
      "link": "",
      "comment": "freemarker.core.Environment",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.portlet.MockPortletRequest.setParameter",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void org.springframework.mock.web.portlet.MockPortletRequest.setParameter(java.lang.String, java.lang.String)",
      "framework": "spring",
      "link": "",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Mock implementation of the {@link javax.portlet.PortletRequest} interface."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.DriverManager.getConnection",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers. Note: If the {@code user} or {@code password} property are also specified as part of the {@code url}, it is implementation-defined as to which value will take precedence. For maximum portability, an application should only specify a property once.",
        "class": "The basic service for managing a set of JDBC drivers. NOTE: The {@link javax.sql.DataSource} interface, new in the JDBC 2.0 API, provides another way to connect to a data source. The use of a DataSource object is the preferred means of connecting to a data source. As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the \"jdbc.drivers\" system property. This allows a user to customize the JDBC Drivers used by their applications. For example in your ~/.hotjava/properties file you might specify:  jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver\n The DriverManager methods getConnection and getDrivers have been enhanced to support the Java Standard Edition Service Provider mechanism. JDBC 4.0 Drivers must include the file META-INF/services/java.sql.Driver. This file contains the name of the JDBC drivers implementation of java.sql.Driver. For example, to load the my.sql.Driver class, the META-INF/services/java.sql.Driver file would contain the entry:  my.sql.Driver\n Applications no longer need to explicitly load JDBC drivers using Class.forName(). Existing programs which currently load JDBC drivers using Class.forName() will continue to work without modification. When the method getConnection is called, the DriverManager will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using the same classloader as the current applet or application. Starting with the Java 2 SDK, Standard Edition, version 1.3, a logging stream can be set only if the proper permission has been granted. Normally this will be done with the tool PolicyTool, which can be used to grant permission java.sql.SQLPermission \"setLog\"."
      },"return": "java.sql.Connection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.DefaultCredentialsProvider.getWellKnownCredentialsFile",
      "parameters": [],
      "signature": "java.io.File com.google.auth.oauth2.DefaultCredentialsProvider.getWellKnownCredentialsFile()",
      "framework": "oauth",
      "link": "",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Provides the Application Default Credential from the environment. An instance represents the per-process state used to get and cache the credential and allows overriding the state and environment for testing purposes."
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.ext.beans.BeansWrapper.setSimpleMapWrapper",
      "parameters": [
        "boolean"
      ],
      "signature": "void freemarker.ext.beans.BeansWrapper.setSimpleMapWrapper(boolean)",
      "framework": "",
      "link": "",
      "comment": "freemarker.ext.beans.BeansWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.jndi.ldap.LdapCtx.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration com.sun.jndi.ldap.LdapCtx.search(javax.naming.Name, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "com.sun.jndi.ldap.LdapCtx",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sun-jndi-ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.SortedArrayStringMap.assertNoConcurrentModification",
      "parameters": [],
      "signature": "void org.apache.logging.log4j.util.SortedArrayStringMap.assertNoConcurrentModification()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.SortedArrayStringMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.setStatementUsedForFetchingRows",
      "parameters": [
        "com.mysql.jdbc.PreparedStatement"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.setStatementUsedForFetchingRows(com.mysql.jdbc.PreparedStatement)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseSqlStateCodes",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseSqlStateCodes()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.info",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.info(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForBase64",
      "parameters": [
        "byte[]",
        "boolean"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForBase64(byte[], boolean)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/Encoder.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode for Base64.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ProxyWriter.write",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.io.output.ProxyWriter.write(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ProxyWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletOutputStream.println",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.ServletOutputStream.println(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletOutputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.AbstractCookieSpec.getAttribHandlers",
      "parameters": [],
      "signature": "java.util.Collection org.apache.http.impl.cookie.AbstractCookieSpec.getAttribHandlers()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.AbstractCookieSpec",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Collection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.getValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.reflection.ReflectionProvider.getValue(java.lang.String, java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.error(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.info(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getContentType",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequest.getContentType()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.filter.DelegatingFilterProxy.class$",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Class org.springframework.web.filter.DelegatingFilterProxy.class$(java.lang.String)",
      "framework": "apache",
      "link": "",
      "comment": "Counter example for sanitizer (String param, but implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.portlet.PortletRequest.getParameter(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.PostbackResult.writeFormElement",
      "parameters": [
        "java.io.PrintWriter",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "void org.apache.struts2.result.PostbackResult.writeFormElement(java.io.PrintWriter, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.PostbackResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.set.ListOrderedSet.remove",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.Object org.apache.commons.collections4.set.ListOrderedSet.remove(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.set.ListOrderedSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.directory.InitialDirContext.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.InitialDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeLargeUpdate",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "long java.sql.Statement.executeLargeUpdate(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.System.load",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.lang.System.load(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Loads the native library specified by the filename argument. The filename argument must be an absolute path name. If the filename argument, when stripped of any platform-specific library prefix, path, and file extension, indicates a library whose name is, for example, L, and a native library called L is statically linked with the VM, then the JNI_OnLoad_L function exported by the library is invoked rather than attempting to load a dynamic library. A filename matching the argument does not have to exist in the file system. See the JNI Specification for more details. Otherwise, the filename argument is mapped to a native library image in an implementation-dependent manner. The call System.load(name) is effectively equivalent to the call:  Runtime.getRuntime().load(name)",
        "class": "The System class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getFetchDirection",
      "parameters": [],
      "signature": "int com.mysql.jdbc.ResultSetImpl.getFetchDirection()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.info(org.slf4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.substring",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.lang.String java.lang.String.substring(int, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "java.lang.StringBuffer"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.StringBuffer)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.setBigDecimal",
      "parameters": [
        "java.lang.String",
        "java.math.BigDecimal"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.setBigDecimal(java.lang.String, java.math.BigDecimal)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ProxyReader.ready",
      "parameters": [],
      "signature": "boolean org.apache.commons.io.input.ProxyReader.ready()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ProxyReader",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.NoOpThreadContextMap.containsKey",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean org.apache.logging.log4j.spi.NoOpThreadContextMap.containsKey(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.NoOpThreadContextMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.debug(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.forceMkdirParent",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.axiom.om.impl.SwitchingWrapper.updateCompleteStatus",
      "parameters": [],
      "signature": "void org.apache.axiom.om.impl.SwitchingWrapper.updateCompleteStatus()",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/org.apache.ws.commons.axiom/axiom-api/1.2.12/org/apache/axiom/om/impl/SwitchingWrapper.java",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.fastTimeCreate",
      "parameters": [
        "java.util.Calendar",
        "int",
        "int",
        "int"
      ],
      "signature": "java.sql.Time com.mysql.jdbc.ResultSetImpl.fastTimeCreate(java.util.Calendar, int, int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Time",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.html.HtmlSanitizer.stripQuotes",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.html.HtmlSanitizer.stripQuotes(java.lang.String)",
      "framework": "generaljava",
      "link": "https://github.com/OWASP/java-html-sanitizer/blob/master/src/main/java/org/owasp/html/HtmlSanitizer.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Consumes an HTML stream, and dispatches events to a policy object which decides which elements and attributes to allow."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileSystemUtils.freeSpaceKb",
      "parameters": [
        "long"
      ],
      "signature": "long org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileSystemUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.setLogXaCommands",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.ConnectionPropertiesImpl.setLogXaCommands(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeUpdate",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "int java.sql.PreparedStatement.executeUpdate(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.InputTransferSelect.getHeaderKey",
      "parameters": [],
      "signature": "java.lang.String org.apache.struts2.components.InputTransferSelect.getHeaderKey()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.InputTransferSelect",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.info",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.info(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseJDBCCompliantTimezoneShift",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseJDBCCompliantTimezoneShift(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.index.EmailSubscriptionList.writeIndex",
      "parameters": [],
      "signature": "void net.sourceforge.pebble.index.EmailSubscriptionList.writeIndex()",
      "framework": "pebble",
      "link": "",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Helper method to write out the index to disk.",
        "class": "Represents the tag index for a blog."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4UpdatableResultSet.getSQLXML",
      "parameters": [
        "int"
      ],
      "signature": "java.sql.SQLXML com.mysql.jdbc.JDBC4UpdatableResultSet.getSQLXML(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.SQLXML",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.SingleByteCharsetConverter.toStringDefaultEncoding",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.SingleByteCharsetConverter.toStringDefaultEncoding(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.SingleByteCharsetConverter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.entering",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void java.util.logging.Logger.entering(java.lang.String, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.comparator.ExtensionFileComparator.compare",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "int org.apache.commons.io.comparator.ExtensionFileComparator.compare(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.comparator.ExtensionFileComparator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.BeanUtils.populate",
      "parameters": [
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void org.apache.commons.beanutils.BeanUtils.populate(java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.BeanUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.subject.support.DelegatingSubject.login",
      "parameters": [
        "org.apache.shiro.authc.AuthenticationToken"
      ],
      "signature": "void org.apache.shiro.subject.support.DelegatingSubject.login(org.apache.shiro.authc.AuthenticationToken)",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/subject/support/DelegatingSubject.html",
      "comment": "Login with the tocken.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs a login attempt for this Subject/user. If unsuccessful, an {@link AuthenticationException} is thrown, the subclass of which identifies why the attempt failed. If successful, the account data associated with the submitted principals/credentials will be associated with this {@code Subject} and the method will return quietly. Upon returning quietly, this {@code Subject} instance can be considered authenticated and {@link #getPrincipal() getPrincipal()} will be non-null and {@link #isAuthenticated() isAuthenticated()} will be {@code true}.",
        "class": "Implementation of the {@code Subject} interface that delegates method calls to an underlying {@link org.apache.shiro.mgt.SecurityManager SecurityManager} instance for security checks. It is essentially a {@code SecurityManager} proxy. This implementation does not maintain state such as roles and permissions (only {@code Subject} {@link #getPrincipals() principals}, such as usernames or user primary keys) for better performance in a stateless architecture. It instead asks the underlying {@code SecurityManager} every time to perform the authorization check. A common misconception in using this implementation is that an EIS resource (RDBMS, etc) would be \"hit\" every time a method is called. This is not necessarily the case and is up to the implementation of the underlying {@code SecurityManager} instance. If caching of authorization data is desired (to eliminate EIS round trips and therefore improve database performance), it is considered much more elegant to let the underlying {@code SecurityManager} implementation or its delegate components manage caching, not this class. A {@code SecurityManager} is considered a business-tier component, where caching strategies are better managed. Applications from large and clustered to simple and JVM-local all benefit from stateless architectures. This implementation plays a part in the stateless programming paradigm and should be used whenever possible."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.CopyUtils.copy",
      "parameters": [
        "java.io.InputStream",
        "java.io.OutputStream"
      ],
      "signature": "int org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.CopyUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.hasAnyRole",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "java.lang.String[] org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.hasAnyRole(java.lang.String[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.html",
      "comment": "Counter example for sanitizer (has)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Creates a String for specifying that a user requires one of many roles.",
        "class": "Adds URL based authorization using {@link DefaultFilterInvocationSecurityMetadataSource}. At least one {@link org.springframework.web.bind.annotation.RequestMapping} needs to be mapped to {@link ConfigAttribute}'s for this {@link SecurityContextConfigurer} to have meaning. Security Filters Usage includes applying the {@link UrlAuthorizationConfigurer} and then modifying the StandardInterceptUrlRegistry. For example:  protected void configure(HttpSecurity http) throws Exception {\n \thttp.apply(new UrlAuthorizationConfigurer()).getRegistry()\n \t\t\t.antMatchers(\"/users**\", \"/sessions/**\").hasRole(\"USER\")\n \t\t\t.antMatchers(\"/signup\").hasRole(\"ANONYMOUS\").anyRequest().hasRole(\"USER\");\n }\n The following Filters are populated {@link org.springframework.security.web.access.intercept.FilterSecurityInterceptor} Shared Objects Created The following shared objects are populated to allow other {@link org.springframework.security.config.annotation.SecurityConfigurer}'s to customize: {@link org.springframework.security.web.access.intercept.FilterSecurityInterceptor} Shared Objects Used The following shared objects are used: AuthenticationManager"
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.access$000",
      "parameters": [],
      "signature": "byte[] org.springframework.web.socket.sockjs.transport.handler.XhrStreamingTransportHandler.access$000()",
      "framework": "spring",
      "link": "",
      "comment": "Counter example for sanitizer (returns byte[], but implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URLDecoder.decode",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.net.URLDecoder.decode(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Decodes a {@code application/x-www-form-urlencoded} string using a specific encoding scheme. The supplied encoding is used to determine what characters are represented by any consecutive sequences of the form \"{@code %xy}\". Note: The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilities.",
        "class": "Utility class for HTML form decoding. This class contains static methods for decoding a String from the application/x-www-form-urlencoded MIME format. The conversion process is the reverse of that used by the URLEncoder class. It is assumed that all characters in the encoded string are one of the following: \"{@code a}\" through \"{@code z}\", \"{@code A}\" through \"{@code Z}\", \"{@code 0}\" through \"{@code 9}\", and \"{@code -}\", \"{@code _}\", \"{@code .}\", and \"{@code *}\". The character \"{@code %}\" is allowed but is interpreted as the start of a special escaped sequence. The following rules are applied in the conversion: The alphanumeric characters \"{@code a}\" through \"{@code z}\", \"{@code A}\" through \"{@code Z}\" and \"{@code 0}\" through \"{@code 9}\" remain the same. The special characters \"{@code .}\", \"{@code -}\", \"{@code *}\", and \"{@code _}\" remain the same. The plus sign \"{@code +}\" is converted into a space character \" \" . A sequence of the form \"{@code %xy}\" will be treated as representing a byte where xy is the two-digit hexadecimal representation of the 8 bits. Then, all substrings that contain one or more of these byte sequences consecutively will be replaced by the character(s) whose encoding would result in those consecutive bytes. The encoding scheme used to decode these characters may be specified, or if unspecified, the default encoding of the platform will be used. There are two possible ways in which this decoder could deal with illegal strings. It could either leave illegal characters alone or it could throw an {@link java.lang.IllegalArgumentException}. Which approach the decoder takes is left to the implementation."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.PersistenceManager.newQuery",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "javax.jdo.Query javax.jdo.PersistenceManager.newQuery(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.PersistenceManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.jdo.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getPathTranslated",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getPathTranslated()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.query",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setRef",
      "parameters": [
        "int",
        "java.sql.Ref"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setRef(int, java.sql.Ref)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.executeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.ResultSet com.mysql.jdbc.StatementImpl.executeQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.rfc2251.RfcFilter.addSubstring",
      "parameters": [
        "int",
        "byte[]"
      ],
      "signature": "void com.novell.ldap.rfc2251.RfcFilter.addSubstring(int, byte[])",
      "framework": "ldap",
      "link": "",
      "comment": "Counter example for sanitizer (byte[] but nothing else)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Adds a Substring component of initial, any or final substring matching. This method can be invoked only if startSubString was the last filter- building method called. A substring is not required to have an 'INITIAL' substring. However, when a filter contains an 'INITIAL' substring only one can be added, and it must be the first substring added. Any number of 'ANY' substrings can be added. A substring is not required to have a 'FINAL' substrings either. However, when a filter does contain a 'FINAL' substring only one can be added, and it must be the last substring added.",
        "class": "Represents an LDAP Filter. This filter object can be created from a String or can be built up programatically by adding filter components one at a time. Existing filter components can be iterated though. Each filter component has an integer identifier defined in this class. The following are basic filter components: {@link #EQUALITY_MATCH}, {@link #GREATER_OR_EQUAL}, {@link #LESS_OR_EQUAL}, {@link #SUBSTRINGS}, {@link #PRESENT}, {@link #APPROX_MATCH}, {@link #EXTENSIBLE_MATCH}. More filters can be nested together into more complex filters with the following filter components: {@link #AND}, {@link #OR}, {@link #NOT} Substrings can have three components:        Filter ::= CHOICE {\n               and             [0] SET OF Filter,\n               or              [1] SET OF Filter,\n               not             [2] Filter,\n               equalityMatch   [3] AttributeValueAssertion,\n               substrings      [4] SubstringFilter,\n               greaterOrEqual  [5] AttributeValueAssertion,\n               lessOrEqual     [6] AttributeValueAssertion,\n               present         [7] AttributeDescription,\n               approxMatch     [8] AttributeValueAssertion,\n               extensibleMatch [9] MatchingRuleAssertion }"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.error",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.pmw.tinylog.Logger.error(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setProperties(java.util.Map, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getServerName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getServerName()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getServerName() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.valueOf",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.String java.lang.String.valueOf(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar",
      "parameters": [
        "java.lang.Object",
        "com.fasterxml.jackson.core.JsonGenerator",
        "java.lang.String"
      ],
      "signature": "void com.fasterxml.jackson.databind.jsontype.TypeSerializer.writeCustomTypeSuffixForScalar(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.jsontype.TypeSerializer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.MessageFormatMessageFactory.newMessage",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "org.apache.logging.log4j.message.Message org.apache.logging.log4j.message.MessageFormatMessageFactory.newMessage(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.MessageFormatMessageFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.logging.log4j.message.Message",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBigDecimal",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.math.BigDecimal com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBigDecimal(int, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.math.BigDecimal",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.axiom.om.impl.SwitchingWrapper.updateLastNode",
      "parameters": [],
      "signature": "void org.apache.axiom.om.impl.SwitchingWrapper.updateLastNode()",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/org.apache.ws.commons.axiom/axiom-api/1.2.12/org/apache/axiom/om/impl/SwitchingWrapper.java",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This is a very important method. It keeps the navigator one step ahead and pushes it one event ahead. If the nextNode is null then navigable is set to false. At the same time the parser and builder are set up for the upcoming event generation.",
        "class": "Class used internally by {@link OMStAXWrapper}."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.InitialLdapContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "javax.naming.directory"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.InitialLdapContext.search(javax.naming.Name, java.lang.String, javax.naming.directory)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.InitialLdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.UsernamePasswordAuthenticationToken.setAuthenticated",
      "parameters": [
        "boolean"
      ],
      "signature": "void org.springframework.security.authentication.UsernamePasswordAuthenticationToken.setAuthenticated(boolean)",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/3.2.9.RELEASE/apidocs/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.html",
      "comment": "When the input is true, the tocken should be trusted. So the security level depentd on this fact.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "See {@link #isAuthenticated()} for a full description. Implementations should always allow this method to be called with a false parameter, as this is used by various classes to specify the authentication token should not be trusted. If an implementation wishes to reject an invocation with a true parameter (which would indicate the authentication token is trusted - a potential security risk) the implementation should throw an {@link IllegalArgumentException}.",
        "class": "An {@link org.springframework.security.core.Authentication} implementation that is designed for simple presentation of a username and password. The principal and credentials should be set with an Object that provides the respective property via its Object.toString() method. The simplest such Object to use is String."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.warn(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.comparator.NameFileComparator.compare",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "int org.apache.commons.io.comparator.NameFileComparator.compare(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.comparator.NameFileComparator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.ExtendedMessageFormat.setFormatByArgumentIndex",
      "parameters": [
        "int",
        "java.text.Format"
      ],
      "signature": "void org.apache.commons.lang3.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, java.text.Format)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.ExtendedMessageFormat",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.addDateHeader",
      "parameters": [
        "java.lang.String",
        "long"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.addDateHeader(java.lang.String, long)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call addDateHeader(String name, long date) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "boolean",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, int, boolean, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.ReaderInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.ReaderInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.ReaderInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildQuery",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getDefaultFetchSize",
      "parameters": [],
      "signature": "int com.mysql.jdbc.ConnectionPropertiesImpl.getDefaultFetchSize()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.template.utility.OptimizerUtil.optimizeNumberRepresentation",
      "parameters": [
        "java.lang.Number"
      ],
      "signature": "java.lang.Number freemarker.template.utility.OptimizerUtil.optimizeNumberRepresentation(java.lang.Number)",
      "framework": "",
      "link": "",
      "comment": "freemarker.template.utility.OptimizerUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Number",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.info",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.info(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperties(java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.SimpleLog.error",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.impl.SimpleLog.error(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.SimpleLog",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.util.LimitedInputStream.read",
      "parameters": [],
      "signature": "int org.apache.commons.fileupload.util.LimitedInputStream.read()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.util.LimitedInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.security.auth.login.LoginContext.logout",
      "parameters": [],
      "signature": "void javax.security.auth.login.LoginContext.logout()",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/javax/security/auth/login/LoginContext.html",
      "comment": "Puts the program is an unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Logout the {@code Subject}. This method invokes the {@code logout} method for each {@code LoginModule} configured for this {@code LoginContext}. Each {@code LoginModule} performs its respective logout procedure which may include removing/destroying {@code Principal} and {@code Credential} information from the {@code Subject} and state cleanup. Note that this method invokes all LoginModules configured for the application regardless of their respective {@code Configuration} flag parameters. Essentially this means that {@code Requisite} and {@code Sufficient} semantics are ignored for this method. This guarantees that proper cleanup and state restoration can take place.",
        "class": "The {@code LoginContext} class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A {@code Configuration} specifies the authentication technology, or {@code LoginModule}, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself. In addition to supporting pluggable authentication, this class also supports the notion of stacked authentication. Applications may be configured to use more than one LoginModule. For example, one could configure both a Kerberos LoginModule and a smart card LoginModule under an application. A typical caller instantiates a LoginContext with a name and a {@code CallbackHandler}. LoginContext uses the name as the index into a Configuration to determine which LoginModules should be used, and which ones must succeed in order for the overall authentication to succeed. The {@code CallbackHandler} is passed to the underlying LoginModules so they may communicate and interact with users (prompting for a username and password via a graphical user interface, for example). Once the caller has instantiated a LoginContext, it invokes the {@code login} method to authenticate a {@code Subject}. The {@code login} method invokes the configured modules to perform their respective types of authentication (username/password, smart card pin verification, etc.). Note that the LoginModules will not attempt authentication retries nor introduce delays if the authentication fails. Such tasks belong to the LoginContext caller. If the {@code login} method returns without throwing an exception, then the overall authentication succeeded. The caller can then retrieve the newly authenticated Subject by invoking the {@code getSubject} method. Principals and Credentials associated with the Subject may be retrieved by invoking the Subject's respective {@code getPrincipals}, {@code getPublicCredentials}, and {@code getPrivateCredentials} methods. To logout the Subject, the caller calls the {@code logout} method. As with the {@code login} method, this {@code logout} method invokes the {@code logout} method for the configured modules. A LoginContext should not be used to authenticate more than one Subject. A separate LoginContext should be used to authenticate each different Subject. The following documentation applies to all LoginContext constructors: {@code Subject} If the constructor has a Subject input parameter, the LoginContext uses the caller-specified Subject object. If the caller specifies a {@code null} Subject and a {@code null} value is permitted, the LoginContext instantiates a new Subject. If the constructor does not have a Subject input parameter, the LoginContext instantiates a new Subject. {@code Configuration} If the constructor has a Configuration input parameter and the caller specifies a non-null Configuration, the LoginContext uses the caller-specified Configuration. If the constructor does not have a Configuration input parameter, or if the caller specifies a {@code null} Configuration object, the constructor uses the following call to get the installed Configuration:       config = Configuration.getConfiguration();\n For both cases, the name argument given to the constructor is passed to the {@code Configuration.getAppConfigurationEntry} method. If the Configuration has no entries for the specified name, then the {@code LoginContext} calls {@code getAppConfigurationEntry} with the name, \"other\" (the default entry name). If there is no entry for \"other\", then a {@code LoginException} is thrown. When LoginContext uses the installed Configuration, the caller requires the createLoginContext.name and possibly createLoginContext.other AuthPermissions. Furthermore, the LoginContext will invoke configured modules from within an {@code AccessController.doPrivileged} call so that modules that perform security-sensitive tasks (such as connecting to remote hosts, and updating the Subject) will require the respective permissions, but the callers of the LoginContext will not require those permissions. When LoginContext uses a caller-specified Configuration, the caller does not require any createLoginContext AuthPermission. The LoginContext saves the {@code AccessControlContext} for the caller, and invokes the configured modules from within an {@code AccessController.doPrivileged} call constrained by that context. This means the caller context (stored when the LoginContext was created) must have sufficient permissions to perform any security-sensitive tasks that the modules may perform. {@code CallbackHandler} If the constructor has a CallbackHandler input parameter, the LoginContext uses the caller-specified CallbackHandler object. If the constructor does not have a CallbackHandler input parameter, or if the caller specifies a {@code null} CallbackHandler object (and a {@code null} value is permitted), the LoginContext queries the {@code auth.login.defaultCallbackHandler} security property for the fully qualified class name of a default handler implementation. If the security property is not set, then the underlying modules will not have a CallbackHandler for use in communicating with users. The caller thus assumes that the configured modules have alternative means for authenticating the user. When the LoginContext uses the installed Configuration (instead of a caller-specified Configuration, see above), then this LoginContext must wrap any caller-specified or default CallbackHandler implementation in a new CallbackHandler implementation whose {@code handle} method implementation invokes the specified CallbackHandler's {@code handle} method in a {@code java.security.AccessController.doPrivileged} call constrained by the caller's current {@code AccessControlContext}."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockBodyContent.println",
      "parameters": [
        "char[]"
      ],
      "signature": "void org.springframework.mock.web.MockBodyContent.println(char[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/MockBodyContent.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Print an array of characters and then terminate the line. This method behaves as though it invokes print(char[]) and then println().",
        "class": "Mock implementation of the {@link javax.servlet.jsp.tagext.BodyContent} class. Used for testing the web framework; only necessary for testing applications when testing custom JSP tags."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.getSetMethod",
      "parameters": [
        "java.lang.Class",
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Method com.opensymphony.xwork2.util.reflection.ReflectionProvider.getSetMethod(java.lang.Class, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.reflect.Method",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.tomcat.buf.HexUtils.getDec",
      "parameters": [
        "int"
      ],
      "signature": "int org.apache.struts2.util.tomcat.buf.HexUtils.getDec(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.tomcat.buf.HexUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.event.EventDirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.event.EventDirContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.event.EventDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.appendWhere",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "void android.database.sqlite.SQLiteQueryBuilder.appendWhere(java.lang.CharSequence)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "java.lang.StringBuffer",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(java.lang.StringBuffer, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.writeLines",
      "parameters": [
        "java.util.Collection",
        "java.lang.String",
        "java.io.OutputStream",
        "java.nio.charset.Charset"
      ],
      "signature": "void org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.nio.charset.Charset)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.entity.DeflateInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int org.apache.http.client.entity.DeflateInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.entity.DeflateInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.finder.UrlSet.excludeUserExtensionsDir",
      "parameters": [],
      "signature": "com.opensymphony.xwork2.util.finder.UrlSet com.opensymphony.xwork2.util.finder.UrlSet.excludeUserExtensionsDir()",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.finder.UrlSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.opensymphony.xwork2.util.finder.UrlSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.Session.createQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.hibernate.Query org.hibernate.Session.createQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.hibernate.Session",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.hibernate.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-4.2.4.final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.torque.util.BasePeer.executeQuery",
      "parameters": [
        "java.lang.String",
        "int",
        "int",
        "java.lang.String",
        "boolean"
      ],
      "signature": "java.util.List org.apache.torque.util.BasePeer.executeQuery(java.lang.String, int, int, java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.torque.util.BasePeer",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "torque-3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.debug",
      "parameters": [
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.debug(org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "io.dropwizard.servlets.Servlets.getFullUrl",
      "parameters": [
        "javax.servlet.http.HttpServletRequest"
      ],
      "signature": "java.lang.String io.dropwizard.servlets.Servlets.getFullUrl(javax.servlet.http.HttpServletRequest)",
      "framework": "",
      "link": "",
      "comment": "io.dropwizard.servlets.Servlets",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "dropwizard-servlets-0.8.4.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setReadOnly",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setReadOnly(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.script.ScriptEngine.eval",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.script.ScriptEngine.eval(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.script.ScriptEngine",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "script-10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager.format",
      "parameters": [
        "org.apache.http.impl.conn.CPoolEntry"
      ],
      "signature": "java.lang.String org.apache.http.impl.conn.PoolingHttpClientConnectionManager.format(org.apache.http.impl.conn.CPoolEntry)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.exiting",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.exiting(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.InputStreamEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.InputStreamEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.InputStreamEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.ServletRequest.getParameterNames()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.result.PostbackResult.writePrologueScript",
      "parameters": [
        "java.io.PrintWriter"
      ],
      "signature": "void org.apache.struts2.result.PostbackResult.writePrologueScript(java.io.PrintWriter)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.result.PostbackResult",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.rawQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.rawQuery(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.validation.DateValidationRule.sanitize",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.owasp.esapi.reference.validation.DateValidationRule.sanitize(java.lang.String, java.lang.String)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/reference/validation/",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The method is similar to ValidationRuile.getSafe except that it returns a harmless object that may or may not have any similarity to the original input (in some cases you may not care). In most cases this should be the same as the getSafe method only instead of throwing an exception, return some default value. Calls sanitize(String, String, DateFormat) with DateFormat.getInstance()",
        "class": "A validator performs syntax and possibly semantic validation of a single piece of data from an untrusted source."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getNativeBigDecimal",
      "parameters": [
        "int"
      ],
      "signature": "java.math.BigDecimal com.mysql.jdbc.ResultSetImpl.getNativeBigDecimal(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.math.BigDecimal",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.replace",
      "parameters": [
        "java.lang.CharSequence",
        "java.lang.CharSequence"
      ],
      "signature": "java.lang.String java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\".",
        "class": "The {@code String} class represents character strings. All string literals in Java programs, such as {@code \"abc\"}, are implemented as instances of this class. Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:      String str = \"abc\";\n is equivalent to:      char data[] = {'a', 'b', 'c'};\n     String str = new String(data);\n Here are some more examples of how strings can be used:      System.out.println(\"abc\");\n     String cde = \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c = \"abc\".substring(2,3);\n     String d = cde.substring(1, 2);\n The class {@code String} includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the {@code StringBuilder}(or {@code StringBuffer}) class and its {@code append} method. String conversions are implemented through the method {@code toString}, defined by {@code Object} and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, The Java Language Specification. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown. A {@code String} represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the {@code Character} class for more information). Index values refer to {@code char} code units, so a supplementary character uses two positions in a {@code String}. The {@code String} class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., {@code char} values)."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.request.WebClientInfo.getRemoteAddr",
      "parameters": [
        "org.apache.wicket.request.cycle.RequestCycle"
      ],
      "signature": "java.lang.String org.apache.wicket.protocol.http.request.WebClientInfo.getRemoteAddr(org.apache.wicket.request.cycle.RequestCycle)",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.request.WebClientInfo",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.MultipartStream.readByte",
      "parameters": [],
      "signature": "byte org.apache.commons.fileupload.MultipartStream.readByte()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.MultipartStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.isOpen",
      "parameters": [],
      "signature": "boolean org.springframework.web.socket.adapter.jetty.JettyWebSocketSession.isOpen()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Return whether the connection is still open.",
        "class": "A {@link WebSocketSession} for use with the Jetty 9.3/9.4 WebSocket API."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xpath.XPathAPI.selectNodeList",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.NodeList org.apache.xpath.XPathAPI.selectNodeList(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xpath.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xalan-j2-2.7.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateBlob",
      "parameters": [
        "java.lang.String",
        "java.sql.Blob"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateBlob(java.lang.String, java.sql.Blob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getHeader",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getHeader(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Formatter.format",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.util.Formatter java.util.Formatter.format(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.Formatter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Formatter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.com.google.common.base.Preconditions.checkContentsNotNull",
      "parameters": [
        "java.lang.Iterable"
      ],
      "signature": "java.lang.Iterable com.google.gxp.com.google.common.base.Preconditions.checkContentsNotNull(java.lang.Iterable)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.com.google.common.base.Preconditions",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Iterable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.println",
      "parameters": [
        "char"
      ],
      "signature": "void java.io.PrintStream.println(char)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Prints a character and then terminate the line. This method behaves as though it invokes {@link #print(char)} and then {@link #println()}.",
        "class": "A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a PrintStream never throws an IOException; instead, exceptional situations merely set an internal flag that can be tested via the checkError method. Optionally, a PrintStream can be created so as to flush automatically; this means that the flush method is automatically invoked after a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written. All characters printed by a PrintStream are converted into bytes using the platform's default character encoding. The {@link PrintWriter} class should be used in situations that require writing characters rather than bytes."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getCapitalizeTypeNames",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getCapitalizeTypeNames()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "long java.sql.PreparedStatement.executeLargeUpdate(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.addIntHeader",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.addIntHeader(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call addIntHeader(String name, int value) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.AbstractSessionInputBuffer.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.http.impl.io.AbstractSessionInputBuffer.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.AbstractSessionInputBuffer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logp",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void java.util.logging.Logger.logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.format",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.format(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.getTypeInfo",
      "parameters": [],
      "signature": "java.sql.ResultSet com.mysql.jdbc.DatabaseMetaData.getTypeInfo()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.Entities.escape",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.Entities.escape(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.Entities",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.PredicateUtils.notPredicate",
      "parameters": [
        "org.apache.commons.collections.Predicate"
      ],
      "signature": "org.apache.commons.collections.Predicate org.apache.commons.collections.PredicateUtils.notPredicate(org.apache.commons.collections.Predicate)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.PredicateUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.collections.Predicate",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAuthority(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/messaging/MessageSecurityMetadataSourceRegistry.html",
      "comment": "Counter example for sanitizer (has)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Allows mapping security constraints using {@link MessageMatcher} to the security expressions."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.fatal(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.save",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.io.Serializable org.hibernate.internal.SessionImpl.save(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Persist the given transient instance, first assigning a generated identifier. (Or using the current value of the identifier property if the assigned generator is used.) This operation cascades to associated instances if the association is mapped with {@code cascade=\"save-update\"}",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "java.io.Serializable",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.getCharacterStream",
      "parameters": [
        "int"
      ],
      "signature": "java.io.Reader com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.getCharacterStream(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.Reader",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.ServletWebServer.access$000",
      "parameters": [
        "org.apache.xmlrpc.webserver.ServletWebServer"
      ],
      "signature": "javax.servlet.http.HttpServlet org.apache.xmlrpc.webserver.ServletWebServer.access$000(org.apache.xmlrpc.webserver.ServletWebServer)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/ServletWebServer.html",
      "comment": "Counter example for sanitizer (implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.servlet.http.HttpServlet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.HttpMethodDirector.authenticateProxy",
      "parameters": [
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "void org.apache.commons.httpclient.HttpMethodDirector.authenticateProxy(org.apache.commons.httpclient.HttpMethod)",
      "framework": "apachecommons",
      "link": "https://hc.apache.org/httpclient-3.x/xref/org/apache/commons/httpclient/HttpMethodDirector.html",
      "comment": "The authentication string is added to the http method.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Handles the process of executing a method including authentication, redirection and retries."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.HttpClientBuilder.setPublicSuffixMatcher",
      "parameters": [
        "org.apache.http.conn.util.PublicSuffixMatcher"
      ],
      "signature": "org.apache.http.impl.client.HttpClientBuilder org.apache.http.impl.client.HttpClientBuilder.setPublicSuffixMatcher(org.apache.http.conn.util.PublicSuffixMatcher)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.HttpClientBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.impl.client.HttpClientBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jsoup.nodes.Node.before",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.jsoup.nodes.Node org.jsoup.nodes.Node.before(java.lang.String)",
      "framework": "jsoup",
      "link": "https://jsoup.org/apidocs/org/jsoup/nodes/Node.html#before-java.lang.String-",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).",
        "class": "The base, abstract Node model. Elements, Documents, Comments etc are all Node instances."
      },"return": "org.jsoup.nodes.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.jaxp.validation.DOMResultAugmentor.comment",
      "parameters": [
        "com.google.gxp.org.apache.xerces.xni.XMLString",
        "com.google.gxp.org.apache.xerces.xni.Augmentations"
      ],
      "signature": "void com.google.gxp.org.apache.xerces.jaxp.validation.DOMResultAugmentor.comment(com.google.gxp.org.apache.xerces.xni.XMLString, com.google.gxp.org.apache.xerces.xni.Augmentations)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.jaxp.validation.DOMResultAugmentor",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.jxpath.ri.parser.XPathParser.unescape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.jxpath.ri.parser.XPathParser.unescape(java.lang.String)",
      "framework": "apache",
      "link": "http://commons.apache.org/proper/commons-jxpath/apidocs/org/apache/commons/jxpath/ri/parser/XPathParser.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.log.Jdk14Logger.logInternal",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void com.mysql.jdbc.log.Jdk14Logger.logInternal(java.util.logging.Level, java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.log.Jdk14Logger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getField",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.reflect.Field java.lang.Class.getField(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns a {@code Field} object that reflects the specified public member field of the class or interface represented by this {@code Class} object. The {@code name} parameter is a {@code String} specifying the simple name of the desired field. The field to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object: If C declares a public field with the name specified, that is the field to be reflected. If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared. If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a {@code NoSuchFieldException} is thrown. If this {@code Class} object represents an array type, then this method does not find the {@code length} field of the array type.",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.lang.reflect.Field",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareStatement",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.PreparedStatement java.sql.Connection.prepareStatement(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.PreparedStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.getInstance",
      "parameters": [
        "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
        "com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection",
        "java.sql.PreparedStatement"
      ],
      "signature": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.getInstance(com.mysql.jdbc.jdbc2.optional.ConnectionWrapper, com.mysql.jdbc.jdbc2.optional.MysqlPooledConnection, java.sql.PreparedStatement)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "io.vertx.sqlclient.SqlClient.preparedQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "io.vertx.sqlclient.PreparedQuery io.vertx.sqlclient.SqlClient.preparedQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "io.vertx.sqlclient.SqlClient",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "io.vertx.sqlclient.PreparedQuery",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "vertx-sql-client-4.2.7.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.debug(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.trace",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.trace(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.test.context.MergedContextConfiguration.nullSafeToString",
      "parameters": [
        "org.springframework.test.context.ContextLoader"
      ],
      "signature": "java.lang.String org.springframework.test.context.MergedContextConfiguration.nullSafeToString(org.springframework.test.context.ContextLoader)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/MergedContextConfiguration.html",
      "comment": "Counter example for sanitizer",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Generate a null-safe {@link String} representation of the supplied {@link ContextLoader} based solely on the fully qualified name of the loader or \"null\" if the supplied loaded is {@code null}.",
        "class": "{@code MergedContextConfiguration} encapsulates the merged context configuration declared on a test class and all of its superclasses via {@link ContextConfiguration @ContextConfiguration}, {@link ActiveProfiles @ActiveProfiles}, and {@link TestPropertySource @TestPropertySource}. Merged context resource locations, annotated classes, active profiles, property resource locations, and in-lined properties represent all declared values in the test class hierarchy taking into consideration the semantics of the {@link ContextConfiguration#inheritLocations}, {@link ActiveProfiles#inheritProfiles}, {@link TestPropertySource#inheritLocations}, and {@link TestPropertySource#inheritProperties} flags. A {@link SmartContextLoader} uses {@code MergedContextConfiguration} to load an {@link org.springframework.context.ApplicationContext ApplicationContext}. {@code MergedContextConfiguration} is also used by the {@link org.springframework.test.context.cache.ContextCache ContextCache} as the key for caching an {@link org.springframework.context.ApplicationContext ApplicationContext} that was loaded using properties of this {@code MergedContextConfiguration}."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.xmldb.api.DatabaseManager.stripURIPrefix",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.xmldb.api.DatabaseManager.stripURIPrefix(java.lang.String)",
      "framework": "xmldb",
      "link": "http://xmldb-org.sourceforge.net/xapi/api/org/xmldb/api/DatabaseManager.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Removes the URI_PREFIX from the front of the URI. This is so the database can focus on handling its own URIs.",
        "class": "DatabaseManager is the entry point for the API and enables you to get the initial Collection references necessary to do anything useful with the API. DatabaseManager is intended to be provided as a concrete implementation in a particular programming language. Individual language mappings should define the exact syntax and semantics of its use."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.unwrap",
      "parameters": [
        "java.lang.Class"
      ],
      "signature": "java.lang.Object com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.unwrap(java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.BufferedHttpEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.BufferedHttpEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.BufferedHttpEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.content.ContentProvider.query",
      "parameters": [
        "android.net.Uri",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.content.ContentProvider.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.content.ContentProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createTopicConnection",
      "parameters": [],
      "signature": "javax.jms.TopicConnection org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter.createTopicConnection()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jms/connection/UserCredentialsConnectionFactoryAdapter.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Determine whether there are currently thread-bound credentials, using them if available, falling back to the statically specified username and password (i.e. values of the bean properties) else.",
        "class": "An adapter for a target JMS {@link javax.jms.ConnectionFactory}, applying the given user credentials to every standard {@code createConnection()} call, that is, implicitly invoking {@code createConnection(username, password)} on the target. All other methods simply delegate to the corresponding methods of the target ConnectionFactory. Can be used to proxy a target JNDI ConnectionFactory that does not have user credentials configured. Client code can work with the ConnectionFactory without passing in username and password on every {@code createConnection()} call. In the following example, client code can simply transparently work with the preconfigured \"myConnectionFactory\", implicitly accessing \"myTargetConnectionFactory\" with the specified user credentials.  &lt;bean id=\"myTargetConnectionFactory\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n   &lt;property name=\"jndiName\" value=\"java:comp/env/jms/mycf\"/&gt;\n &lt;/bean&gt;\n\n &lt;bean id=\"myConnectionFactory\" class=\"org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter\"&gt;\n   &lt;property name=\"targetConnectionFactory\" ref=\"myTargetConnectionFactory\"/&gt;\n   &lt;property name=\"username\" value=\"myusername\"/&gt;\n   &lt;property name=\"password\" value=\"mypassword\"/&gt;\n &lt;/bean&gt; If the \"username\" is empty, this proxy will simply delegate to the standard {@code createConnection()} method of the target ConnectionFactory. This can be used to keep a UserCredentialsConnectionFactoryAdapter bean definition just for the option of implicitly passing in user credentials if the particular target ConnectionFactory requires it."
      },"return": "javax.jms.TopicConnection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.fs.JBossFileManager.getAllJBossPhysicalUrls",
      "parameters": [
        "java.net.URL"
      ],
      "signature": "java.util.List org.apache.struts2.util.fs.JBossFileManager.getAllJBossPhysicalUrls(java.net.URL)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.fs.JBossFileManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateAsciiStream",
      "parameters": [
        "int",
        "java.io.InputStream",
        "int"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateAsciiStream(int, java.io.InputStream, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.findValue",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.apache.struts2.util.StrutsUtil.findValue(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.common.collect.Synchronized.sortedSet",
      "parameters": [
        "java.util.SortedSet",
        "java.lang.Object"
      ],
      "signature": "java.util.SortedSet com.google.common.collect.Synchronized.sortedSet(java.util.SortedSet, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.google.common.collect.Synchronized",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.SortedSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.exception.ExceptionUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.FastByteArrayOutputStream.decodeAndWrite",
      "parameters": [
        "java.io.Writer",
        "java.nio.ByteBuffer",
        "java.nio.CharBuffer",
        "java.nio.charset.CharsetDecoder",
        "boolean"
      ],
      "signature": "java.nio.charset.CoderResult org.apache.struts2.util.FastByteArrayOutputStream.decodeAndWrite(java.io.Writer, java.nio.ByteBuffer, java.nio.CharBuffer, java.nio.charset.CharsetDecoder, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.FastByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.nio.charset.CoderResult",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletRequestImpl.parsePostData",
      "parameters": [
        "java.util.Map",
        "java.io.InputStream",
        "java.lang.String"
      ],
      "signature": "void org.apache.xmlrpc.webserver.HttpServletRequestImpl.parsePostData(java.util.Map, java.io.InputStream, java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletRequestImpl.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletRequest} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.ByteArrayEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.ByteArrayEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.ByteArrayEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.event.EventDirContext.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.event.EventDirContext.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.event.EventDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.net.URLCodec.getDefaultCharset",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.codec.net.URLCodec.getDefaultCharset()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.codec.net.URLCodec",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getServletPath",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getServletPath()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.toStringSafe",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.String org.apache.struts2.util.StrutsUtil.toStringSafe(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.setHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.setHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponseWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.validation.CreditCardValidationRule.setMaxCardLength",
      "parameters": [
        "int"
      ],
      "signature": "void org.owasp.esapi.reference.validation.CreditCardValidationRule.setMaxCardLength(int)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/reference/validation/CreditCardValidationRule.html",
      "comment": "Counter example for sanitizer (validation)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A validator performs syntax and possibly semantic validation of Credit Card String from an untrusted source."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.setCharacterEncoding",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.ServletRequestWrapper.setCharacterEncoding(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to set the character encoding on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.template._TemplateAPI.createDefaultTemplateLoader",
      "parameters": [
        "freemarker.template.Version"
      ],
      "signature": "freemarker.cache.TemplateLoader freemarker.template._TemplateAPI.createDefaultTemplateLoader(freemarker.template.Version)",
      "framework": "",
      "link": "",
      "comment": "freemarker.template._TemplateAPI",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "freemarker.cache.TemplateLoader",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.jxpath.ri.JXPathContextReferenceImpl.getValue",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.apache.commons.jxpath.ri.JXPathContextReferenceImpl.getValue(java.lang.String)",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-jxpath/apidocs/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Traverses the xpath and returns the resulting object. Primitive types are wrapped into objects.",
        "class": "The reference implementation of JXPathContext."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.BufferedReader.readLine",
      "parameters": [],
      "signature": "java.lang.String java.io.BufferedReader.readLine()",
      "framework": "",
      "link": "",
      "comment": "java.io.BufferedReader",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.log.NullLogger.isDebugEnabled",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.log.NullLogger.isDebugEnabled()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.log.NullLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.crypto.codec.Hex.encode",
      "parameters": [
        "byte[]"
      ],
      "signature": "char[] org.springframework.security.crypto.codec.Hex.encode(byte[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/3.2.2.RELEASE/apidocs/org/springframework/security/crypto/codec/Hex.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Hex data encoder. Converts byte arrays (such as those obtained from message digests) into hexadecimal string representation. For internal use only."
      },"return": "char[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.serialization.ValidatingObjectInputStream.resolveClass",
      "parameters": [
        "java.io.ObjectStreamClass"
      ],
      "signature": "java.lang.Class org.apache.commons.io.serialization.ValidatingObjectInputStream.resolveClass(java.io.ObjectStreamClass)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.serialization.ValidatingObjectInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletResponseImpl.getHeader",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.HttpServletResponseImpl.getHeader(java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletResponseImpl.html",
      "comment": "Counter example for sanitizer.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Gets the value of the response header with the given name. If a response header with the given name exists and contains multiple values, the value that was added first will be returned. This method considers only response headers set or added via {@link #setHeader}, {@link #addHeader}, {@link #setDateHeader}, {@link #addDateHeader}, {@link #setIntHeader}, or {@link #addIntHeader}, respectively.",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletResponse} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.log.StandardLogger.isTraceEnabled",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.log.StandardLogger.isTraceEnabled()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.log.StandardLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.trace",
      "parameters": [
        "java.lang.Throwable",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.trace(java.lang.Throwable, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.println",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void java.io.PrintWriter.println(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getLocale",
      "parameters": [],
      "signature": "java.util.Locale javax.portlet.PortletRequest.getLocale()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Locale",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForCSS",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForCSS(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in Cascading Style Sheets (CSS) content.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateShort",
      "parameters": [
        "int",
        "short"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateShort(int, short)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.initializeFromParseInfo",
      "parameters": [],
      "signature": "void com.mysql.jdbc.PreparedStatement.initializeFromParseInfo()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.SPNegoScheme.generateToken",
      "parameters": [
        "byte[]",
        "java.lang.String",
        "org.apache.http.auth.Credentials"
      ],
      "signature": "byte[] org.apache.http.impl.auth.SPNegoScheme.generateToken(byte[], java.lang.String, org.apache.http.auth.Credentials)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.auth.SPNegoScheme",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.StringFormattedMessage.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.logging.log4j.message.StringFormattedMessage.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.StringFormattedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapOperations.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.mapOutputParameterIndexToRsIndex",
      "parameters": [
        "int"
      ],
      "signature": "int com.mysql.jdbc.CallableStatement.mapOutputParameterIndexToRsIndex(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.endNode",
      "parameters": [],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.endNode()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.debug",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.debug(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter.write",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.codehaus.plexus.util.xml.PrettyPrintXMLWriter.write(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.codehaus.plexus.util.xml.PrettyPrintXMLWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setComment",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.Cookie.setComment(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Specifies a comment that describes a cookie's purpose. The comment is useful if the browser presents the cookie to the user. Comments are not supported by Netscape Version 0 cookies.",
        "class": "Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server. A cookie's value can uniquely identify a client, so cookies are commonly used for session management. A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number. Some Web browsers have bugs in how they handle the optional attributes, so use them sparingly to improve the interoperability of your servlets. The servlet sends cookies to the browser by using the {@link HttpServletResponse#addCookie} method, which adds fields to HTTP response headers to send cookies to the browser, one at a time. The browser is expected to support 20 cookies for each Web server, 300 cookies total, and may limit cookie size to 4 KB each. The browser returns cookies to the servlet by adding fields to HTTP request headers. Cookies can be retrieved from a request by using the {@link HttpServletRequest#getCookies} method. Several cookies might have the same name but different path attributes. Cookies affect the caching of the Web pages that use them. HTTP 1.0 does not cache pages that use cookies created with this class. This class does not support the cache control defined with HTTP 1.1. This class supports both the Version 0 (by Netscape) and Version 1 (by RFC 2109) cookie specifications. By default, cookies are created using Version 0 to ensure the best interoperability."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.rfc2251.RfcFilter.unescapeString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] com.novell.ldap.rfc2251.RfcFilter.unescapeString(java.lang.String)",
      "framework": "ldap",
      "link": "",
      "comment": "Counter example for sanitizer (unescape)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replace escaped hex digits with the equivalent binary representation. Assume either V2 or V3 escape mechanisms: V2: \\*, \\(, \\), \\\\. V3: \\2A, \\28, \\29, \\5C, \\00.",
        "class": "Represents an LDAP Filter. This filter object can be created from a String or can be built up programatically by adding filter components one at a time. Existing filter components can be iterated though. Each filter component has an integer identifier defined in this class. The following are basic filter components: {@link #EQUALITY_MATCH}, {@link #GREATER_OR_EQUAL}, {@link #LESS_OR_EQUAL}, {@link #SUBSTRINGS}, {@link #PRESENT}, {@link #APPROX_MATCH}, {@link #EXTENSIBLE_MATCH}. More filters can be nested together into more complex filters with the following filter components: {@link #AND}, {@link #OR}, {@link #NOT} Substrings can have three components:        Filter ::= CHOICE {\n               and             [0] SET OF Filter,\n               or              [1] SET OF Filter,\n               not             [2] Filter,\n               equalityMatch   [3] AttributeValueAssertion,\n               substrings      [4] SubstringFilter,\n               greaterOrEqual  [5] AttributeValueAssertion,\n               lessOrEqual     [6] AttributeValueAssertion,\n               present         [7] AttributeDescription,\n               approxMatch     [8] AttributeValueAssertion,\n               extensibleMatch [9] MatchingRuleAssertion }"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled",
      "parameters": [
        "java.lang.String",
        "org.apache.logging.log4j.Level",
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getCharacterEncoding",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getCharacterEncoding()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getCharacterEncoding() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.setObject",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void com.mysql.jdbc.CallableStatement.setObject(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.writeByteArrayToFile",
      "parameters": [
        "java.io.File",
        "byte[]",
        "int",
        "int",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.setLong",
      "parameters": [
        "int",
        "long"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.setLong(int, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls",
        "org.springframework.ldap.core.ContextMapper",
        "org.springframework.ldap.core.DirContextProcessor"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls, org.springframework.ldap.core.ContextMapper, org.springframework.ldap.core.DirContextProcessor)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.getSchemas",
      "parameters": [],
      "signature": "java.sql.ResultSet com.mysql.jdbc.DatabaseMetaData.getSchemas()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeUpdate",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "int java.sql.Statement.executeUpdate(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setClob",
      "parameters": [
        "int",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setClob(int, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.getPath",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.Cookie.getPath()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.TailerListenerAdapter.handle",
      "parameters": [
        "java.lang.Exception"
      ],
      "signature": "void org.apache.commons.io.input.TailerListenerAdapter.handle(java.lang.Exception)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.TailerListenerAdapter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties(java.util.Map, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getFloat",
      "parameters": [
        "int"
      ],
      "signature": "float com.mysql.jdbc.CallableStatement.getFloat(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "float",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.StructuredDataMessage.formatTo",
      "parameters": [
        "java.lang.StringBuilder"
      ],
      "signature": "void org.apache.logging.log4j.message.StructuredDataMessage.formatTo(java.lang.StringBuilder)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.StructuredDataMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setValue(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4CallableStatement.setNClob",
      "parameters": [
        "java.lang.String",
        "java.sql.NClob"
      ],
      "signature": "void com.mysql.jdbc.JDBC4CallableStatement.setNClob(java.lang.String, java.sql.NClob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager.setMaxTotal",
      "parameters": [
        "int"
      ],
      "signature": "void org.apache.http.impl.conn.PoolingHttpClientConnectionManager.setMaxTotal(int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.PoolingHttpClientConnectionManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "java.lang.String[]",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, int, java.lang.String[], org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.set.CompositeSet.toArray",
      "parameters": [
        "java.lang.Object[]"
      ],
      "signature": "java.lang.Object[] org.apache.commons.collections4.set.CompositeSet.toArray(java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.set.CompositeSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectNodeList",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.NodeList com.sun.org.apache.xpath.internal.XPathAPI.selectNodeList(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.map.UnmodifiableMap.put",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object org.apache.commons.collections4.map.UnmodifiableMap.put(java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.map.UnmodifiableMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.info",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.info(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.execute",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "boolean java.sql.Statement.execute(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.dmfs.oauth2.client.BasicOAuth2ClientCredentials.authenticatedRequest",
      "parameters": [
        "org.dmfs.httpclient.HttpRequest"
      ],
      "signature": "org.dmfs.httpclient.HttpRequest org.dmfs.oauth2.client.BasicOAuth2ClientCredentials.authenticatedRequest(org.dmfs.httpclient.HttpRequest)",
      "framework": "oauth2essentials",
      "link": "https://github.com/dmfs/oauth2-essentials/blob/master/src/main/java/org/dmfs/oauth2/client/BasicOAuth2ClientCredentials.java",
      "comment": "Sends an authentication request.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Authenticates the given request using the Basic authentication scheme.",
        "class": "Basic implementation of {@link OAuth2ClientCredentials}."
      },"return": "org.dmfs.httpclient.HttpRequest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection.findConnectionForXid",
      "parameters": [
        "com.mysql.jdbc.Connection",
        "javax.transaction.xa.Xid"
      ],
      "signature": "javax.sql.XAConnection com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection.findConnectionForXid(com.mysql.jdbc.Connection, javax.transaction.xa.Xid)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.SuspendableXAConnection",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.sql.XAConnection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.RenderRequest.getETag",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.RenderRequest.getETag()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.RenderRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.isLast",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ResultSetImpl.isLast()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.concat",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.String.concat(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.tomcat.buf.MessageBytes.indexOf",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "int org.apache.struts2.util.tomcat.buf.MessageBytes.indexOf(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.tomcat.buf.MessageBytes",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.info",
      "parameters": [
        "java.lang.Throwable",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.info(java.lang.Throwable, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Properties.getProperty",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.util.Properties.getProperty(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Searches for the property with the specified key in this property list. If the key is not found in this property list, the default property list, and its defaults, recursively, are then checked. The method returns {@code null} if the property is not found.",
        "class": "The {@code Properties} class represents a persistent set of properties. The {@code Properties} can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string. A property list can contain another property list as its \"defaults\"; this second property list is searched if the property key is not found in the original property list. Because {@code Properties} inherits from {@code Hashtable}, the {@code put} and {@code putAll} methods can be applied to a {@code Properties} object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not {@code Strings}. The {@code setProperty} method should be used instead. If the {@code store} or {@code save} method is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key or value, the call will fail. Similarly, the call to the {@code propertyNames} or {@code list} method will fail if it is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key. The {@link #load(java.io.Reader) load(Reader)} / {@link #store(java.io.Writer, java.lang.String) store(Writer, String)} methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The {@link #load(java.io.InputStream) load(InputStream)} / {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)} methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of The Java™ Language Specification; only a single 'u' character is allowed in an escape sequence. The native2ascii tool can be used to convert property files to and from other character encodings. The {@link #loadFromXML(InputStream)} and {@link #storeToXML(OutputStream, String, String)} methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration:  \n Note that the system URI (http://java.sun.com/dtd/properties.dtd) is not accessed when exporting or importing properties; it merely serves as a string to uniquely identify the DTD, which is:     \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n This class is thread-safe: multiple threads can share a single Properties object without the need for external synchronization."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.status.StatusLogger.reset",
      "parameters": [],
      "signature": "void org.apache.logging.log4j.status.StatusLogger.reset()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.status.StatusLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.hasRole",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.security.config.annotation.web.configurers.UrlAuthorizationConfigurer.hasRole(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.html",
      "comment": "Counter example for sanitizer (has)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Creates a String for specifying a user requires a role.",
        "class": "Adds URL based authorization using {@link DefaultFilterInvocationSecurityMetadataSource}. At least one {@link org.springframework.web.bind.annotation.RequestMapping} needs to be mapped to {@link ConfigAttribute}'s for this {@link SecurityContextConfigurer} to have meaning. Security Filters Usage includes applying the {@link UrlAuthorizationConfigurer} and then modifying the StandardInterceptUrlRegistry. For example:  protected void configure(HttpSecurity http) throws Exception {\n \thttp.apply(new UrlAuthorizationConfigurer()).getRegistry()\n \t\t\t.antMatchers(\"/users**\", \"/sessions/**\").hasRole(\"USER\")\n \t\t\t.antMatchers(\"/signup\").hasRole(\"ANONYMOUS\").anyRequest().hasRole(\"USER\");\n }\n The following Filters are populated {@link org.springframework.security.web.access.intercept.FilterSecurityInterceptor} Shared Objects Created The following shared objects are populated to allow other {@link org.springframework.security.config.annotation.SecurityConfigurer}'s to customize: {@link org.springframework.security.web.access.intercept.FilterSecurityInterceptor} Shared Objects Used The following shared objects are used: AuthenticationManager"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.reflection.ReflectionProvider.setValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.util.reflection.ReflectionProvider.setValue(java.lang.String, java.util.Map, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.reflection.ReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forJava",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forJava(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for a Java string. This method will use \"\\b\", \"\\t\", \"\\r\", \"\\f\", \"\\n\", \"\\\"\", \"\\'\", \"\\\\\", octal and unicode escapes. Valid surrogate pairing is not checked. The caller must provide the enclosing quotation characters. This method is useful for when writing code generators and outputting debug messages.      out.println(\"public class Hello {\");\n     out.println(\"    public static void main(String[] args) {\");\n     out.println(\"        System.out.println(\\\"\" + Encode.forJava(message) + \"\\\");\");\n     out.println(\"    }\");\n     out.println(\"}\");",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.getValue",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.Cookie.getValue()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpURI.getQuery",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpURI.getQuery()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpURI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.getFile",
      "parameters": [
        ""
      ],
      "signature": "java.lang.String java.net.URL.getFile()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "char[]",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(char[], java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.SuffixFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.SuffixFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.SuffixFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "char",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "java.lang.Class",
        "com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.TextParseUtil.translateVariables(char, java.lang.String, com.opensymphony.xwork2.util.ValueStack, java.lang.Class, com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.setAsciiStream",
      "parameters": [
        "java.lang.String",
        "java.io.InputStream",
        "int"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.setAsciiStream(java.lang.String, java.io.InputStream, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getPrivateParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.portlet.PortletRequest.getPrivateParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.access$200",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer.access$200(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.AuthorizedUrl.html",
      "comment": "Counter example for sanitizer (implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getContextPath",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getContextPath()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getContextPath() on the wrapped request object.",
        "class": "Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ServerPreparedStatement.setTime",
      "parameters": [
        "int",
        "java.sql.Time",
        "java.util.Calendar"
      ],
      "signature": "void com.mysql.jdbc.ServerPreparedStatement.setTime(int, java.sql.Time, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.conversion.impl.XWorkConverter.setReloadingConfigs",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void com.opensymphony.xwork2.conversion.impl.XWorkConverter.setReloadingConfigs(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.conversion.impl.XWorkConverter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.shiro.subject.support.DefaultSubjectContext.isAuthenticated",
      "parameters": [],
      "signature": "boolean org.apache.shiro.subject.support.DefaultSubjectContext.isAuthenticated()",
      "framework": "apache",
      "link": "https://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/subject/support/DefaultSubjectContext.html",
      "comment": "Check if the program is authenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns {@code true} if the constructed {@code Subject} should be considered authenticated, {@code false} otherwise.  Be careful setting this value to {@code true} - you should know what you are doing and have a good reason for ignoring Shiro's default authentication state mechanisms.",
        "class": "Default implementation of the {@link SubjectContext} interface. Note that the getters and setters are not simple pass-through methods to an underlying attribute; the getters will employ numerous heuristics to acquire their data attribute as best as possible (for example, if {@link #getPrincipals} is invoked, if the principals aren't in the backing map, it might check to see if there is a subject or session in the map and attempt to acquire the principals from those objects)."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "boolean com.opensymphony.xwork2.util.TextParseUtil.shallBeIncluded(java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.log",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.log(org.apache.log4j.Priority, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.getValue",
      "parameters": [
        "java.lang.String",
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.ognl.OgnlUtil.getValue(java.lang.String, java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.printf",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.printf(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy.handleSuccess",
      "parameters": [
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse",
        "org.glassfish.tyrus.spi.WebSocketEngine$UpgradeInfo",
        "org.glassfish.tyrus.core.TyrusUpgradeResponse"
      ],
      "signature": "void org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy.handleSuccess(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.glassfish.tyrus.spi.WebSocketEngine$UpgradeInfo, org.glassfish.tyrus.core.TyrusUpgradeResponse)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.find",
      "parameters": [
        "java.lang.Class",
        "java.lang.Object",
        "javax.persistence.LockModeType"
      ],
      "signature": "java.lang.Object org.hibernate.internal.SessionImpl.find(java.lang.Class, java.lang.Object, javax.persistence.LockModeType)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Find by primary key and lock. Search for an entity of the specified class and primary key and lock it with respect to the specified lock type. If the entity instance is contained in the persistence context, it is returned from there, and the effect of this method is the same as if the lock method had been called on the entity. If the entity is found within the persistence context and the lock mode type is pessimistic and the entity has a version attribute, the persistence provider must perform optimistic version checks when obtaining the database lock. If these checks fail, the OptimisticLockException will be thrown. If the lock mode type is pessimistic and the entity instance is found but cannot be locked: the PessimisticLockException will be thrown if the database locking failure causes transaction-level rollback the LockTimeoutException will be thrown if the database locking failure causes only statement-level rollback",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.ssl.SSLSocketFactory.createLayeredSocket",
      "parameters": [
        "java.net.Socket",
        "java.lang.String",
        "int",
        "boolean"
      ],
      "signature": "java.net.Socket org.apache.http.conn.ssl.SSLSocketFactory.createLayeredSocket(java.net.Socket, java.lang.String, int, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.ssl.SSLSocketFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.Socket",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getDate",
      "parameters": [
        "java.lang.String",
        "java.util.Calendar"
      ],
      "signature": "java.sql.Date com.mysql.jdbc.ResultSetImpl.getDate(java.lang.String, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Date",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.log",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.StrutsUploadedFile.getName",
      "parameters": [],
      "signature": "java.lang.String org.apache.struts2.dispatcher.multipart.StrutsUploadedFile.getName()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.StrutsUploadedFile",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getParameterNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequest.getParameterNames()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ThresholdingOutputStream.write",
      "parameters": [
        "byte[]"
      ],
      "signature": "void org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ThresholdingOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.BeanUtilsBean.populate",
      "parameters": [
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void org.apache.commons.beanutils.BeanUtilsBean.populate(java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.BeanUtilsBean",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getRemoteUser",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getRemoteUser()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateProxy",
      "parameters": [
        "org.apache.commons.httpclient.auth.AuthScheme",
        "org.apache.commons.httpclient.HttpMethod",
        "org.apache.commons.httpclient.HttpConnection",
        "org.apache.commons.httpclient.HttpState"
      ],
      "signature": "boolean org.apache.commons.httpclient.auth.HttpAuthenticator.authenticateProxy(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/HttpAuthenticator.html",
      "comment": "Depricated method. The credentials are provided in the HttpState. The authentication is added to the header of the HttpMethod.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          3,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Attempt to provide requisite proxy authentication credentials to the given method in the given context using the given authentication scheme.",
        "class": "Utility methods for HTTP authorization and authentication. This class provides utility methods for generating responses to HTTP www and proxy authentication challenges. A client SHOULD assume that all paths at or deeper than the depth of the last symbolic element in the path field of the Request-URI also are within the protection space specified by the basic realm value of the current challenge. A client MAY preemptively send the corresponding Authorization header with requests for resources in that space without receipt of another challenge from the server. Similarly, when a client sends a request to a proxy, it may reuse a userid and password in the Proxy-Authorization header field without receiving another challenge from the proxy server."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.HttpAuthenticator.authenticate",
      "parameters": [
        "org.apache.http.HttpHost",
        "org.apache.http.HttpResponse",
        "org.apache.http.client.AuthenticationStrategy",
        "org.apache.http.auth.AuthState",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "boolean org.apache.http.impl.client.HttpAuthenticator.authenticate(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.client.AuthenticationStrategy, org.apache.http.auth.AuthState, org.apache.http.protocol.HttpContext)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpAuthenticator.html",
      "comment": "Depricated method. The authentication string is added to the http response.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert",
      "parameters": [
        "java.lang.Class"
      ],
      "signature": "boolean com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert(java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.converters.extended.SqlDateConverter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forCssString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forCssString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for CSS strings. The context must be surrounded by quotation characters. It is safe for use in both style blocks and attributes in HTML. Example JSP Usage      ');\">\n\n     \n         background: url('');\n     \n Encoding Notes The following characters are encoded using hexidecimal encodings: {@code U+0000} - {@code U+001f}, {@code \"}, {@code '}, {@code \\}, {@code }, {@code U+007f}, line separator ({@code U+2028}), paragraph separator ({@code U+2029}). Any character requiring encoding is encoded as {@code \\xxx} where {@code xxx} is the shortest hexidecimal representation of its Unicode code point (after decoding surrogate pairs if necessary). This encoding is never zero padded. Thus, for example, the tab character is encoded as {@code \\9}, not {@code \\0009}. The encoder looks ahead 1 character in the input and appends a space to an encoding to avoid the next character becoming part of the hexidecimal encoded sequence. Thus “{@code '1}” is encoded as “{@code \\27 1}”, and not as “{@code \\271}”. If a space is not necessary, it is not included, thus “{@code 'x}” is encoded as “{@code \\27x}”, and not as “{@code \\27 x}”. Surrogate pairs are passed through only if valid. Invalid surrogate pairs are replaced by an underscore (_). Unicode \"non-characters\" are replaced by underscores (_).",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.dom.ParentNode.getChildNodesUnoptimized",
      "parameters": [],
      "signature": "org.w3c.dom.NodeList com.google.gxp.org.apache.xerces.dom.ParentNode.getChildNodesUnoptimized()",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.dom.ParentNode",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.NodeList",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.openOutputStream",
      "parameters": [
        "java.io.File",
        "boolean"
      ],
      "signature": "java.io.FileOutputStream org.apache.commons.io.FileUtils.openOutputStream(java.io.File, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.FileOutputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.crypto.codec.Base64.encodeBytesToBytes",
      "parameters": [
        "byte[]",
        "int",
        "int",
        "int"
      ],
      "signature": "byte[] org.springframework.security.crypto.codec.Base64.encodeBytesToBytes(byte[], int, int, int)",
      "framework": "spring",
      "link": "https://docs.spring.io/autorepo/docs/spring-security/3.2.1.RELEASE/apidocs/org/springframework/security/crypto/codec/Base64.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Base64 encoder which is a reduced version of Robert Harder's public domain implementation (version 2.3.7). See http://iharder.net/base64 for more information. For internal use only."
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.FileEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.FileEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.FileEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.LoggingOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.http.impl.conn.LoggingOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.LoggingOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getInputStream",
      "parameters": [],
      "signature": "java.io.InputStream org.apache.wicket.protocol.http.servlet.ServletPartFileItem.getInputStream()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns an {@link java.io.InputStream InputStream} that can be used to retrieve the contents of the file.",
        "class": "An adapter of Servlet 3.0 {@link Part} to Apache Commons FileUpload's {@link FileItem}"
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "wicket-core-7.8.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.lang.Runtime",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Process",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaData.convertToJdbcFunctionList",
      "parameters": [
        "java.lang.String",
        "java.sql.ResultSet",
        "boolean",
        "java.lang.String",
        "java.util.Map",
        "int",
        "com.mysql.jdbc.Field[]"
      ],
      "signature": "void com.mysql.jdbc.DatabaseMetaData.convertToJdbcFunctionList(java.lang.String, java.sql.ResultSet, boolean, java.lang.String, java.util.Map, int, com.mysql.jdbc.Field[])",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaData",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ByteArrayRow.getNativeDate",
      "parameters": [
        "int",
        "com.mysql.jdbc.ConnectionImpl",
        "com.mysql.jdbc.ResultSetImpl"
      ],
      "signature": "java.sql.Date com.mysql.jdbc.ByteArrayRow.getNativeDate(int, com.mysql.jdbc.MySQLConnection, com.mysql.jdbc.ResultSetImpl)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ByteArrayRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Date",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.spel.standard.SpelExpressionParser.parseExpression",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.expression.Expression org.springframework.expression.spel.standard.SpelExpressionParser.parseExpression(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.expression.spel.standard.SpelExpressionParser",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE917"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.expression.Expression",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.springframework.expression-3.1.0.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getMetadataCacheSize",
      "parameters": [],
      "signature": "int com.mysql.jdbc.ConnectionPropertiesImpl.getMetadataCacheSize()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.query",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteQueryBuilder.query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.list",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapTemplate.list(java.lang.String, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.axis2.description.AxisService.printWSDLError",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.axis2.description.AxisService.printWSDLError(java.io.OutputStream)",
      "framework": "apache",
      "link": "http://people.apache.org/~ruwan/axis2/site/1.6.0/api/org/apache/axis2/description/AxisService.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Prints generic WSDL error to the given output stream.",
        "class": "Class AxisService"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4PreparedStatement.setRowId",
      "parameters": [
        "int",
        "java.sql.RowId"
      ],
      "signature": "void com.mysql.jdbc.JDBC4PreparedStatement.setRowId(int, java.sql.RowId)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.execSQL",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void android.database.sqlite.SQLiteDatabase.execSQL(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.ValueStack.findString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.startNode",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.startNode(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.DataInputStream.readUTF",
      "parameters": [],
      "signature": "java.lang.String java.io.DataInputStream.readUTF()",
      "framework": "",
      "link": "",
      "comment": "java.io.DataInputStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.entering",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void java.util.logging.Logger.entering(java.lang.String, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.DigestScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.DigestScheme.authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/DigestScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces a digest authorization string for the given set of {@link Credentials}, method name and URI.",
        "class": "Digest authentication scheme as defined in RFC 2617. Both MD5 (default) and MD5-sess are supported. Currently only qop=auth or no qop is supported. qop=auth-int is unsupported. If auth and auth-int are provided, auth is used. Credential charset is configured via the {@link org.apache.commons.httpclient.params.HttpMethodParams#CREDENTIAL_CHARSET credential charset} parameter. Since the digest username is included as clear text in the generated Authentication header, the charset of the username must be compatible with the {@link org.apache.commons.httpclient.params.HttpMethodParams#HTTP_ELEMENT_CHARSET http element charset}. TODO: make class more stateful regarding repeated authentication requests"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jca.cci.connection.SingleConnectionFactory.closeConnection",
      "parameters": [
        "javax.resource.cci.Connection"
      ],
      "signature": "void org.springframework.jca.cci.connection.SingleConnectionFactory.closeConnection(javax.resource.cci.Connection)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jca/cci/connection/SingleConnectionFactory.html",
      "comment": "Puts the state of the program to unauthenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Close the given Connection.",
        "class": "A CCI ConnectionFactory adapter that returns the same Connection on all {@code getConnection} calls, and ignores calls to {@code Connection.close()}. Useful for testing and standalone environments, to keep using the same Connection for multiple CciTemplate calls, without having a pooling ConnectionFactory, also spanning any number of transactions. You can either pass in a CCI Connection directly, or let this factory lazily create a Connection via a given target ConnectionFactory."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.setValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.util.ValueStack.setValue(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.xml.sax.XMLReader.parse",
      "parameters": [
        "org.xml.sax.InputSource"
      ],
      "signature": "void org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)",
      "framework": "",
      "link": "",
      "comment": "org.xml.sax.XMLReader",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE91"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sax.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.json.JsonSanitizer.replace",
      "parameters": [
        "int",
        "int",
        "java.lang.String"
      ],
      "signature": "void com.google.json.JsonSanitizer.replace(int, int, java.lang.String)",
      "framework": "json",
      "link": "https://github.com/OWASP/json-sanitizer/blob/master/src/main/java/com/google/json/JsonSanitizer.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Given JSON-like content, converts it to valid JSON. This can be attached at either end of a data-pipeline to help satisfy Postel's principle: be conservative in what you do, be liberal in what you accept from others Applied to JSON-like content from others, it will produce well-formed JSON that should satisfy any parser you use. Applied to your output before you send, it will coerce minor mistakes in encoding and make it easier to embed your JSON in HTML and XML. Input The sanitizer takes JSON like content, and interprets it as JS eval would. Specifically, it deals with these non-standard constructs. {@code '...'} Single quoted strings are converted to JSON strings. {@code \\xAB} Hex escapes are converted to JSON unicode escapes. {@code \\012} Octal escapes are converted to JSON unicode escapes. {@code 0xAB} Hex integer literals are converted to JSON decimal numbers. {@code 012} Octal integer literals are converted to JSON decimal numbers. {@code +.5} Decimal numbers are coerced to JSON's stricter format. {@code [0,,2]} Elisions in arrays are filled with {@code null}. {@code [1,2,3,]} Trailing commas are removed. {foo:\"bar\"} Unquoted property names are quoted. //comments JS style line and block comments are removed. (...) Grouping parentheses are removed. The sanitizer fixes missing punctuation, end quotes, and mismatched or missing close brackets. If an input contains only white-space then the valid JSON string {@code null} is substituted. Output The output is well-formed JSON as defined by RFC 4627. The output satisfies three additional properties: The output will not contain the substring (case-insensitively) {@code \"The output will not contain the substring {@code \"]]>\"} so can be embedded inside an XML CDATA section without further encoding. The output is a valid Javascript expression, so can be parsed by Javascript's eval builtin (after being wrapped in parentheses) or by JSON.parse. Specifically, the output will not contain any string literals with embedded JS newlines (U+2028 Paragraph separator or U+2029 Line separator). The output contains only valid Unicode scalar values (no isolated UTF-16 surrogates) that are allowed in XML unescaped. Security Since the output is well-formed JSON, passing it to eval will have no side-effects and no free variables, so is neither a code-injection vector, nor a vector for exfiltration of secrets. This library only ensures that the JSON string → Javascript object phase has no side effects and resolves no free variables, and cannot control how other client side code later interprets the resulting Javascript object. So if client-side code takes a part of the parsed data that is controlled by an attacker and passes it back through a powerful interpreter like {@code eval} or {@code innerHTML} then that client-side code might suffer unintended side-effects. Efficiency The sanitize method will return the input string without allocating a new buffer when the input is already valid JSON that satisfies the properties above. Thus, if used on input that is usually well formed, it has minimal memory overhead. The sanitize method takes O(n) time where n is the length in UTF-16 code-units."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.template.GeneralPurposeNothing.getInstance",
      "parameters": [],
      "signature": "freemarker.template.TemplateModel freemarker.template.GeneralPurposeNothing.getInstance()",
      "framework": "",
      "link": "",
      "comment": "freemarker.template.GeneralPurposeNothing",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "freemarker.template.TemplateModel",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.copyDirectoryToDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "void org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForXML",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForXML(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE91"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for use in an XML element. The implementation should follow the XML Encoding Standard from the W3C. The use of a real XML parser is strongly encouraged. However, in the hopefully rare case that you need to make sure that data is safe for inclusion in an XML document and cannot use a parse, this method provides a safe mechanism to do so.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.util.SortedArrayStringMap.readObject",
      "parameters": [
        "java.io.ObjectInputStream"
      ],
      "signature": "void org.apache.logging.log4j.util.SortedArrayStringMap.readObject(java.io.ObjectInputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.util.SortedArrayStringMap",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "org.springframework.ldap.core.AttributesMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, int, org.springframework.ldap.core.AttributesMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.io.AbstractSessionOutputBuffer.flushBuffer",
      "parameters": [],
      "signature": "void org.apache.http.impl.io.AbstractSessionOutputBuffer.flushBuffer()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.io.AbstractSessionOutputBuffer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getTimeInternal",
      "parameters": [
        "int",
        "java.util.Calendar",
        "java.util.TimeZone",
        "boolean"
      ],
      "signature": "java.sql.Time com.mysql.jdbc.ResultSetImpl.getTimeInternal(int, java.util.Calendar, java.util.TimeZone, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Time",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.next",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.util.Scanner.next(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.Scanner",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate",
      "parameters": [
        "java.lang.CharSequence",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "double"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(double)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getHeaderNames",
      "parameters": [],
      "signature": "java.util.Enumeration javax.servlet.http.HttpServletRequestWrapper.getHeaderNames()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setBytes",
      "parameters": [
        "int",
        "byte[]"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper.setBytes(int, byte[])",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getReader",
      "parameters": [],
      "signature": "java.io.BufferedReader javax.servlet.ServletRequestWrapper.getReader()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getReader() on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.io.BufferedReader",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.translate.UnicodeEscaper.translate",
      "parameters": [
        "int",
        "java.io.Writer"
      ],
      "signature": "boolean org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.orm.hibernate3.TypeDefinitionBean.setParameters",
      "parameters": [
        "java.util.Properties"
      ],
      "signature": "void org.springframework.orm.hibernate3.TypeDefinitionBean.setParameters(java.util.Properties)",
      "framework": "spring",
      "link": "",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Specify default parameters for the type. This only applies to parameterized types.",
        "class": "Bean that encapsulates a Hibernate type definition. Typically defined as inner bean within a LocalSessionFactoryBean definition, as list element for the \"typeDefinitions\" bean property. For example:  \n   ...\n   \n     \n       \n         \n         \n       \n     \n   \n   ...\n  Alternatively, specify a bean id (or name) attribute for the inner bean, instead of the \"typeName\" property."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xml.serialize.TextSerializer.content",
      "parameters": [],
      "signature": "org.apache.xml.serialize.ElementState org.apache.xml.serialize.TextSerializer.content()",
      "framework": "",
      "link": "",
      "comment": "org.apache.xml.serialize.TextSerializer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.xml.serialize.ElementState",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpCookie.getValue",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpCookie.getValue()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpCookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forCssUrl",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forCssUrl(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encodes for CSS URL contexts. The context must be surrounded by {@code \"url(\"} and {@code \")\"}. It is safe for use in both style blocks and attributes in HTML. Note: this does not do any checking on the quality or safety of the URL itself. The caller should insure that the URL is safe for embedding (e.g. input validation) by other means. Example JSP Usage      );\">\n\n     \n         background: url();\n     \n Encoding Notes The following characters are encoded using hexidecimal encodings: {@code U+0000} - {@code U+001f}, {@code \"}, {@code '}, {@code \\}, {@code }, {@code U+007f}, line separator ({@code U+2028}), paragraph separator ({@code U+2029}). Any character requiring encoding is encoded as {@code \\xxx} where {@code xxx} is the shortest hexidecimal representation of its Unicode code point (after decoding surrogate pairs if necessary). This encoding is never zero padded. Thus, for example, the tab character is encoded as {@code \\9}, not {@code \\0009}. The encoder looks ahead 1 character in the input and appends a space to an encoding to avoid the next character becoming part of the hexidecimal encoded sequence. Thus “{@code '1}” is encoded as “{@code \\27 1}”, and not as “{@code \\271}”. If a space is not necessary, it is not included, thus “{@code 'x}” is encoded as “{@code \\27x}”, and not as “{@code \\27 x}”. Surrogate pairs are passed through only if valid. Invalid surrogate pairs are replaced by an underscore (_). Unicode \"non-characters\" are replaced by underscores (_).",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.WriterOutputStream.write",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.WriterOutputStream.write(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.WriterOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.getNString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.mysql.jdbc.JDBC4ResultSet.getNString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.getParameter",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String javax.servlet.ServletRequestWrapper.getParameter(java.lang.String)",
      "framework": "javageneral",
      "link": "https://docs.oracle.com/javaee/6/api/javax/servlet/ServletRequestWrapper.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getParameter(String name) on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.l7dlog",
      "parameters": [
        "org.apache.log4j.Priority",
        "java.lang.String",
        "java.lang.Object[]",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Logger.l7dlog(org.apache.log4j.Priority, java.lang.String, java.lang.Object[], java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.SynchronizedPriorityQueue.toString",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.collections.SynchronizedPriorityQueue.toString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.SynchronizedPriorityQueue",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.text.StrSubstitutor.replace",
      "parameters": [
        "java.lang.CharSequence",
        "int",
        "int"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.text.StrSubstitutor.replace(java.lang.CharSequence, int, int)",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/text/StrSubstitutor.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces all the occurrences of variables with their matching values from the resolver using the given source as a template. The source is not altered by this method. Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, and is not returned.",
        "class": "Substitutes variables within a string by values. This class takes a piece of text and substitutes all the variables within it. The default definition of a variable is {@code ${variableName}}. The prefix and suffix can be changed via constructors and set methods. Variable values are typically resolved from a map, but could also be resolved from system properties, or by supplying a custom variable resolver. The simplest example is to use this class to replace Java System properties. For example:  StrSubstitutor.replaceSystemProperties(\n      \"You are running with java.version = ${java.version} and os.name = ${os.name}.\");\n Typical usage of this class follows the following pattern: First an instance is created and initialized with the map that contains the values for the available variables. If a prefix and/or suffix for variables should be used other than the default ones, the appropriate settings can be performed. After that the {@code replace()} method can be called passing in the source text for interpolation. In the returned text all variable references (as long as their values are known) will be resolved. The following example demonstrates this:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog.\n Also, this class allows to set a default value for unresolved variables. The default value for a variable can be appended to the variable name after the variable default value delimiter. The default value of the variable default value delimiter is ':-', as in bash and other *nix shells, as those are arguably where the default ${} delimiter set originated. The variable default value delimiter can be manually set by calling {@link #setValueDelimiterMatcher(StrMatcher)}, {@link #setValueDelimiter(char)} or {@link #setValueDelimiter(String)}. The following shows an example with variable default value settings:  Map valuesMap = HashMap();\n valuesMap.put(\"animal\", \"quick brown fox\");\n valuesMap.put(\"target\", \"lazy dog\");\n String templateString = \"The ${animal} jumps over the ${target}. ${undefined.number:-1234567890}.\";\n StrSubstitutor sub = new StrSubstitutor(valuesMap);\n String resolvedString = sub.replace(templateString);\n yielding:       The quick brown fox jumps over the lazy dog. 1234567890.\n In addition to this usage pattern there are some static convenience methods that cover the most common use cases. These methods can be used without the need of manually creating an instance. However if multiple replace operations are to be performed, creating and reusing an instance of this class will be more efficient. Variable replacement works in a recursive way. Thus, if a variable value contains a variable then that variable will also be replaced. Cyclic replacements are detected and will cause an exception to be thrown. Sometimes the interpolation's result must contain a variable prefix. As an example take the following source text:    The variable ${${name}} must be used.\n Here only the variable's name referred to in the text should be replaced resulting in the text (assuming that the value of the {@code name} variable is {@code x}):    The variable ${x} must be used.\n To achieve this effect there are two possibilities: Either set a different prefix and suffix for variables which do not conflict with the result text you want to produce. The other possibility is to use the escape character, by default '$'. If this character is placed before a variable reference, this reference is ignored and won't be replaced. For example:    The variable $${${name}} must be used.\n In some complex scenarios you might even want to perform substitution in the names of variables, for instance  ${jre-${java.specification.version}}\n {@code StrSubstitutor} supports this recursive substitution in variable names, but it has to be enabled explicitly by setting the {@link #setEnableSubstitutionInVariables(boolean) enableSubstitutionInVariables} property to true. This class is not thread safe."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.ldapAuthentication",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.ldapAuthentication()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/4.0.0.RELEASE/apidocs/org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.html",
      "comment": "Authentication to LDAP. The owner of the return object can manipulate users to a LDAP connection.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.BufferRow.findAndSeekToOffset",
      "parameters": [
        "int"
      ],
      "signature": "int com.mysql.jdbc.BufferRow.findAndSeekToOffset(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.BufferRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Class"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.ValueStack.findValue(java.lang.String, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.util.InetAddressUtils.isIPv6Address",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean org.apache.http.conn.util.InetAddressUtils.isIPv6Address(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.util.InetAddressUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setIgnoreNonTxTables",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setIgnoreNonTxTables(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.PreparedStatement.setBinaryStream",
      "parameters": [
        "int",
        "java.io.InputStream"
      ],
      "signature": "void com.mysql.jdbc.PreparedStatement.setBinaryStream(int, java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.PreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.RandomAccessFile.<init>",
      "parameters": [
        "java.io.File",
        "java.lang.String"
      ],
      "signature": "void java.io.RandomAccessFile.<init>(java.io.File, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Creates a random access file stream to read from, and optionally to write to, the file specified by the {@link File} argument. A new {@link FileDescriptor} object is created to represent this file connection. The mode argument specifies the access mode in which the file is to be opened. The permitted values and their meanings are: Value Meaning \"r\" Open for reading only. Invoking any of the write methods of the resulting object will cause an {@link java.io.IOException} to be thrown. \"rw\" Open for reading and writing. If the file does not already exist then an attempt will be made to create it. \"rws\" Open for reading and writing, as with \"rw\", and also require that every update to the file's content or metadata be written synchronously to the underlying storage device. \"rwd\" Open for reading and writing, as with \"rw\", and also require that every update to the file's content be written synchronously to the underlying storage device. The \"rws\" and \"rwd\" modes work much like the {@link java.nio.channels.FileChannel#force(boolean) force(boolean)} method of the {@link java.nio.channels.FileChannel} class, passing arguments of true and false, respectively, except that they always apply to every I/O operation and are therefore often more efficient. If the file resides on a local storage device then when an invocation of a method of this class returns it is guaranteed that all changes made to the file by that invocation will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. The \"rwd\" mode can be used to reduce the number of I/O operations performed. Using \"rwd\" only requires updates to the file's content to be written to storage; using \"rws\" requires updates to both the file's content and its metadata to be written, which generally requires at least one more low-level I/O operation. If there is a security manager, its {@code checkRead} method is called with the pathname of the {@code file} argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's {@code checkWrite} method is also called with the path argument to see if write access to the file is allowed.",
        "class": "Instances of this class support both reading and writing to a random access file. A random access file behaves like a large array of bytes stored in the file system. There is a kind of cursor, or index into the implied array, called the file pointer; input operations read bytes starting at the file pointer and advance the file pointer past the bytes read. If the random access file is created in read/write mode, then output operations are also available; output operations write bytes starting at the file pointer and advance the file pointer past the bytes written. Output operations that write past the current end of the implied array cause the array to be extended. The file pointer can be read by the {@code getFilePointer} method and set by the {@code seek} method. It is generally true of all the reading routines in this class that if end-of-file is reached before the desired number of bytes has been read, an {@code EOFException} (which is a kind of {@code IOException}) is thrown. If any byte cannot be read for any reason other than end-of-file, an {@code IOException} other than {@code EOFException} is thrown. In particular, an {@code IOException} may be thrown if the stream has been closed."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getTime",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.Time com.mysql.jdbc.ResultSetImpl.getTime(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Time",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties(java.util.Map, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getHoldResultsOpenOverStatementClose",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getHoldResultsOpenOverStatementClose()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.conn.util.PublicSuffixListParser.parseByType",
      "parameters": [
        "java.io.Reader"
      ],
      "signature": "java.util.List org.apache.http.conn.util.PublicSuffixListParser.parseByType(java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.conn.util.PublicSuffixListParser",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.addBatch",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void com.mysql.jdbc.StatementImpl.addBatch(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.openStream",
      "parameters": [],
      "signature": "java.io.InputStream java.net.URL.openStream()",
      "framework": "",
      "link": "",
      "comment": "java.net.URL",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE918"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.query",
      "parameters": [
        "java.lang.String",
        "org.springframework.jdbc.core.ResultSetExtractor"
      ],
      "signature": "java.lang.Object org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String, org.springframework.jdbc.core.ResultSetExtractor)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html",
      "comment": "sql query",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Execute a query given static SQL, reading the ResultSet with a ResultSetExtractor. Uses a JDBC Statement, not a PreparedStatement. If you want to execute a static query with a PreparedStatement, use the overloaded {@code query} method with {@code null} as argument array.",
        "class": "This is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative exception hierarchy defined in the org.springframework.dao package. Code using this class need only implement callback interfaces, giving them a clearly defined contract. The {@link PreparedStatementCreator} callback interface creates a prepared statement given a Connection, providing SQL and any necessary parameters. The {@link ResultSetExtractor} interface extracts values from a ResultSet. See also {@link PreparedStatementSetter} and {@link RowMapper} for two popular alternative callback interfaces. Can be used within a service implementation via direct instantiation with a DataSource reference, or get prepared in an application context and given to services as bean reference. Note: The DataSource should always be configured as a bean in the application context, in the first case given to the service directly, in the second case to the prepared template. Because this class is parameterizable by the callback interfaces and the {@link org.springframework.jdbc.support.SQLExceptionTranslator} interface, there should be no need to subclass it. All SQL operations performed by this class are logged at debug level, using \"org.springframework.jdbc.core.JdbcTemplate\" as log category."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.MessageFormatMessage.equals",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean org.apache.logging.log4j.message.MessageFormatMessage.equals(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.MessageFormatMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections4.map.AbstractSortedMapDecorator.tailMap",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.util.SortedMap org.apache.commons.collections4.map.AbstractSortedMapDecorator.tailMap(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections4.map.AbstractSortedMapDecorator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.SortedMap",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getResponseContentTypes",
      "parameters": [],
      "signature": "java.util.Enumeration javax.portlet.PortletRequest.getResponseContentTypes()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.client.AsyncRestTemplate.logResponseStatus",
      "parameters": [
        "org.springframework.http.HttpMethod",
        "java.net.URI",
        "org.springframework.http.client.ClientHttpResponse"
      ],
      "signature": "void org.springframework.web.client.AsyncRestTemplate.logResponseStatus(org.springframework.http.HttpMethod, java.net.URI, org.springframework.http.client.ClientHttpResponse)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/AsyncRestTemplate.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Spring's central class for asynchronous client-side HTTP access. Exposes similar methods as {@link RestTemplate}, but returns {@link ListenableFuture} wrappers as opposed to concrete results. The {@code AsyncRestTemplate} exposes a synchronous {@link RestTemplate} via the {@link #getRestOperations()} method and shares its {@linkplain #setErrorHandler error handler} and {@linkplain #setMessageConverters message converters} with that {@code RestTemplate}. Note: by default {@code AsyncRestTemplate} relies on standard JDK facilities to establish HTTP connections. You can switch to use a different HTTP library such as Apache HttpComponents, Netty, and OkHttp by using a constructor accepting an {@link AsyncClientHttpRequestFactory}. For more information, please refer to the {@link RestTemplate} API documentation."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.debug(java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getLocalName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getLocalName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.write",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.write(java.lang.String, int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.eval",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "com.sun.org.apache.xpath.internal.objects.XObject com.sun.org.apache.xpath.internal.XPathAPI.eval(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.sun.org.apache.xpath.internal.objects.XObject",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.execute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.springframework.jdbc.core.JdbcTemplate.execute(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Issue a single SQL execute, typically a DDL statement.",
        "class": "This is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative exception hierarchy defined in the org.springframework.dao package. Code using this class need only implement callback interfaces, giving them a clearly defined contract. The {@link PreparedStatementCreator} callback interface creates a prepared statement given a Connection, providing SQL and any necessary parameters. The {@link ResultSetExtractor} interface extracts values from a ResultSet. See also {@link PreparedStatementSetter} and {@link RowMapper} for two popular alternative callback interfaces. Can be used within a service implementation via direct instantiation with a DataSource reference, or get prepared in an application context and given to services as bean reference. Note: The DataSource should always be configured as a bean in the application context, in the first case given to the service directly, in the second case to the prepared template. Because this class is parameterizable by the callback interfaces and the {@link org.springframework.jdbc.support.SQLExceptionTranslator} interface, there should be no need to subclass it. All SQL operations performed by this class are logged at debug level, using \"org.springframework.jdbc.core.JdbcTemplate\" as log category."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.jndi.ldap.LdapCtx.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object com.sun.jndi.ldap.LdapCtx.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.sun.jndi.ldap.LdapCtx",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sun-jndi-ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Number.end",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "boolean org.apache.struts2.components.Number.end(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Number",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.compiler.ast.IntConst.set",
      "parameters": [
        "long"
      ],
      "signature": "void javassist.compiler.ast.IntConst.set(long)",
      "framework": "",
      "link": "",
      "comment": "javassist.compiler.ast.IntConst",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.setNClob",
      "parameters": [
        "int",
        "java.sql.NClob"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper.setNClob(int, java.sql.NClob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4PreparedStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.validation.CreditCardValidationRule.sanitize",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.Object org.owasp.esapi.reference.validation.CreditCardValidationRule.sanitize(java.lang.String, java.lang.String)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/reference/validation/CreditCardValidationRule.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE89",
        "CWE79",
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The method is similar to ValidationRuile.getSafe except that it returns a harmless object that may or may not have any similarity to the original input (in some cases you may not care). In most cases this should be the same as the getSafe method only instead of throwing an exception, return some default value.",
        "class": "A validator performs syntax and possibly semantic validation of Credit Card String from an untrusted source."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.DirContext.lookup",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.naming.directory.DirContext.lookup(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.DirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.ResultSet",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.kohsuke.args4j.NamedOptionDef.name",
      "parameters": [],
      "signature": "java.lang.String org.kohsuke.args4j.NamedOptionDef.name()",
      "framework": "",
      "link": "",
      "comment": "org.kohsuke.args4j.NamedOptionDef",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.error",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.error(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.client.XmlRpcClient.execute",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.lang.Object org.apache.xmlrpc.client.XmlRpcClient.execute(java.lang.String, java.lang.Object[])",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/client/XmlRpcClient.html",
      "comment": "Performes a request for the method provided as the first argument.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs a request with the clients default configuration.",
        "class": "The main access point of an XML-RPC client. This object serves mainly as an object factory. It is designed with singletons in mind: Basically, an application should be able to hold a single instance of XmlRpcClient in a static variable, unless you would be working with different factories. Until Apache XML-RPC 2.0, this object was used both as an object factory and as a place, where configuration details (server URL, suggested encoding, user credentials and the like) have been stored. In Apache XML-RPC 3.0, the configuration details has been moved to the {@link org.apache.xmlrpc.client.XmlRpcClientConfig} object. The configuration object is designed for being passed through the actual worker methods. A configured XmlRpcClient object is thread safe: In other words, the suggested use is, that you configure the client using {@link #setTransportFactory(XmlRpcTransportFactory)} and similar methods, store it in a field and never modify it again. Without modifications, the client may be used for an arbitrary number of concurrent requests."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectNodeIterator",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String",
        "org.w3c.dom.Node"
      ],
      "signature": "org.w3c.dom.traversal.NodeIterator com.sun.org.apache.xpath.internal.XPathAPI.selectNodeIterator(org.w3c.dom.Node, java.lang.String, org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.traversal.NodeIterator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.servlet.ServletRequest.getParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateDate",
      "parameters": [
        "java.lang.String",
        "java.sql.Date"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateDate(java.lang.String, java.sql.Date)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.<init>",
      "parameters": [],
      "signature": "void java.util.Scanner.<init>()",
      "framework": "",
      "link": "",
      "comment": "java.util.Scanner",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.fs.JBossFileManager.getJBossPhysicalUrl",
      "parameters": [
        "java.net.URL"
      ],
      "signature": "java.net.URL org.apache.struts2.util.fs.JBossFileManager.getJBossPhysicalUrl(java.net.URL)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.fs.JBossFileManager",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.net.URL",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.AvalonLogger.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.impl.AvalonLogger.fatal(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.AvalonLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.RFC2965Spec.parse",
      "parameters": [
        "org.apache.http.Header",
        "org.apache.http.cookie.CookieOrigin"
      ],
      "signature": "java.util.List org.apache.http.impl.cookie.RFC2965Spec.parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.RFC2965Spec",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.fatal",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.fatal(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlUtil.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlUtil.setProperties(java.util.Map, java.lang.Object, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getContentType",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getContentType()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.ldap.LdapContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.ldap.LdapContext.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.ldap.LdapContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.writeChunked",
      "parameters": [
        "byte[]",
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.commons.io.IOUtils.writeChunked(byte[], java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "org.springframework.ldap.core.NameClassPairCallbackHandler"
      ],
      "signature": "void org.springframework.ldap.core.LdapOperations.search(java.lang.String, java.lang.String, org.springframework.ldap.core.NameClassPairCallbackHandler)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.test.context.transaction.TransactionalTestExecutionListener.runAfterTransactionMethods",
      "parameters": [
        "org.springframework.test.context.TestContext"
      ],
      "signature": "void org.springframework.test.context.transaction.TransactionalTestExecutionListener.runAfterTransactionMethods(org.springframework.test.context.TestContext)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.0.0.M1_to_4.2.0.M2/Spring%20Framework%204.0.0.M1/org/springframework/test/context/transaction/TransactionalTestExecutionListener.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Run all {@link AfterTransaction @AfterTransaction} methods for the specified {@linkplain TestContext test context}. If one of the methods fails, the caught exception will be logged as an error, and the remaining methods will be given a chance to execute. After all methods have executed, the first caught exception, if any, will be rethrown.",
        "class": "{@code TestExecutionListener} that provides support for executing tests within test-managed transactions by honoring Spring's {@link org.springframework.transaction.annotation.Transactional @Transactional} annotation. Test-managed Transactions Test-managed transactions are transactions that are managed declaratively via this listener or programmatically via {@link TestTransaction}. Such transactions should not be confused with Spring-managed transactions (i.e., those managed directly by Spring within the {@code ApplicationContext} loaded for tests) or application-managed transactions (i.e., those managed programmatically within application code that is invoked via tests). Spring-managed and application-managed transactions will typically participate in test-managed transactions; however, caution should be taken if Spring-managed or application-managed transactions are configured with any propagation type other than {@link org.springframework.transaction.annotation.Propagation#REQUIRED REQUIRED} or {@link org.springframework.transaction.annotation.Propagation#SUPPORTS SUPPORTS}. Enabling and Disabling Transactions Annotating a test method with {@code @Transactional} causes the test to be run within a transaction that will, by default, be automatically rolled back after completion of the test. If a test class is annotated with {@code @Transactional}, each test method within that class hierarchy will be run within a transaction. Test methods that are not annotated with {@code @Transactional} (at the class or method level) will not be run within a transaction. Furthermore, tests that are annotated with {@code @Transactional} but have the {@link org.springframework.transaction.annotation.Transactional#propagation propagation} type set to {@link org.springframework.transaction.annotation.Propagation#NOT_SUPPORTED NOT_SUPPORTED} will not be run within a transaction. Declarative Rollback and Commit Behavior By default, test transactions will be automatically rolled back after completion of the test; however, transactional commit and rollback behavior can be configured declaratively via the {@link Commit @Commit} and {@link Rollback @Rollback} annotations at the class level and at the method level. Programmatic Transaction Management As of Spring Framework 4.1, it is possible to interact with test-managed transactions programmatically via the static methods in {@link TestTransaction}. {@code TestTransaction} may be used within test methods, before methods, and after methods. Executing Code outside of a Transaction When executing transactional tests, it is sometimes useful to be able to execute certain set up or tear down code outside of a transaction. {@code TransactionalTestExecutionListener} provides such support for methods annotated with {@link BeforeTransaction @BeforeTransaction} or {@link AfterTransaction @AfterTransaction}. As of Spring Framework 4.3, {@code @BeforeTransaction} and {@code @AfterTransaction} may also be declared on Java 8 based interface default methods. Configuring a Transaction Manager {@code TransactionalTestExecutionListener} expects a {@link PlatformTransactionManager} bean to be defined in the Spring {@code ApplicationContext} for the test. In case there are multiple instances of {@code PlatformTransactionManager} within the test's {@code ApplicationContext}, a qualifier may be declared via {@link org.springframework.transaction.annotation.Transactional @Transactional} (e.g., {@code @Transactional(\"myTxMgr\")} or {@code @Transactional(transactionManger = \"myTxMgr\")}, or {@link org.springframework.transaction.annotation.TransactionManagementConfigurer TransactionManagementConfigurer} can be implemented by an {@link org.springframework.context.annotation.Configuration @Configuration} class. See {@link TestContextTransactionUtils#retrieveTransactionManager} for details on the algorithm used to look up a transaction manager in the test's {@code ApplicationContext}."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.filefilter.WildcardFileFilter.accept",
      "parameters": [
        "java.io.File"
      ],
      "signature": "boolean org.apache.commons.io.filefilter.WildcardFileFilter.accept(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.filefilter.WildcardFileFilter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.expression.spel.ast.LongLiteral.isCompilable",
      "parameters": [],
      "signature": "boolean org.springframework.expression.spel.ast.LongLiteral.isCompilable()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/spel/ast/LongLiteral.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Check whether a node can be compiled to bytecode. The reasoning in each node may be different but will typically involve checking whether the exit type descriptor of the node is known and any relevant child nodes are compilable.",
        "class": "Expression language AST node that represents a long integer literal."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.println",
      "parameters": [
        "char"
      ],
      "signature": "void java.io.PrintWriter.println(char)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.warning",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.warning(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setNClob",
      "parameters": [
        "java.lang.String",
        "java.io.Reader",
        "long"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setNClob(java.lang.String, java.io.Reader, long)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.execute",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "boolean java.sql.PreparedStatement.execute(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.log",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.org.apache.xpath.internal.XPathAPI.selectSingleNode",
      "parameters": [
        "org.w3c.dom.Node",
        "java.lang.String"
      ],
      "signature": "org.w3c.dom.Node com.sun.org.apache.xpath.internal.XPathAPI.selectSingleNode(org.w3c.dom.Node, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.sun.org.apache.xpath.internal.XPathAPI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.Node",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jaxp-ri-5.2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.criterion.Restrictions.sqlRestriction",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]",
        "org.hibernate.type.Type[]"
      ],
      "signature": "org.hibernate.criterion.Criterion org.hibernate.criterion.Restrictions.sqlRestriction(java.lang.String, java.lang.Object[], org.hibernate.type.Type[])",
      "framework": "",
      "link": "",
      "comment": "org.hibernate.criterion.Restrictions",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.hibernate.criterion.Criterion",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-4.2.4.final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.setHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.setHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponse",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringUtils.lastIndexOf",
      "parameters": [
        "java.lang.String",
        "char"
      ],
      "signature": "int org.apache.commons.lang.StringUtils.lastIndexOf(java.lang.String, char)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.StringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ClientDataRequest.getPortletInputStream",
      "parameters": [],
      "signature": "java.io.InputStream javax.portlet.ClientDataRequest.getPortletInputStream()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ClientDataRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.awt.TextComponent.getText",
      "parameters": [],
      "signature": "java.lang.String java.awt.TextComponent.getText()",
      "framework": "",
      "link": "",
      "comment": "java.awt.TextComponent",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.NegotiateScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.NegotiateScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/NegotiateScheme.html",
      "comment": "Produces an authentication string for the given credentials.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces an authorization string for the given set of {@link Credentials}.",
        "class": "SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism) authentication scheme."
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.LogFactory.getLog",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.apache.commons.logging.Log org.apache.commons.logging.LogFactory.getLog(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.LogFactory",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.logging.Log",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.conn.LoggingManagedHttpClientConnection.getSocketInputStream",
      "parameters": [
        "java.net.Socket"
      ],
      "signature": "java.io.InputStream org.apache.http.impl.conn.LoggingManagedHttpClientConnection.getSocketInputStream(java.net.Socket)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.conn.LoggingManagedHttpClientConnection",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateArray",
      "parameters": [
        "int",
        "java.sql.Array"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateArray(int, java.sql.Array)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.info",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.util.logging.Logger.info(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.BasicScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces basic authorization header for the given set of {@link Credentials}.",
        "class": "Basic authentication scheme as defined in RFC 2617. The following parameters can be used to customize the behavior of this class: {@link org.apache.http.auth.params.AuthPNames#CREDENTIAL_CHARSET}"
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.HttpClientBuilder.evictIdleConnections",
      "parameters": [
        "long",
        "java.util.concurrent.TimeUnit"
      ],
      "signature": "org.apache.http.impl.client.HttpClientBuilder org.apache.http.impl.client.HttpClientBuilder.evictIdleConnections(long, java.util.concurrent.TimeUnit)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.HttpClientBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.impl.client.HttpClientBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.deleteRow",
      "parameters": [],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.deleteRow()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.pool.RouteSpecificPool.free",
      "parameters": [
        "org.apache.http.pool.PoolEntry",
        "boolean"
      ],
      "signature": "void org.apache.http.pool.RouteSpecificPool.free(org.apache.http.pool.PoolEntry, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.pool.RouteSpecificPool",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.collections.DefaultMapBag.removeAll",
      "parameters": [
        "java.util.Collection"
      ],
      "signature": "boolean org.apache.commons.collections.DefaultMapBag.removeAll(java.util.Collection)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.collections.DefaultMapBag",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4MysqlSQLXML.serializeAsString",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.JDBC4MysqlSQLXML.serializeAsString()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4MysqlSQLXML",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wml.dom.WMLAnchorElementImpl.getId",
      "parameters": [],
      "signature": "java.lang.String org.apache.wml.dom.WMLAnchorElementImpl.getId()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wml.dom.WMLAnchorElementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.createTemporaryFile",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.io.File org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest.createTemporaryFile(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.multipart.JakartaStreamMultiPartRequest",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.logrb",
      "parameters": [
        "java.util.logging.Level",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void java.util.logging.Logger.logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "java.util.logging.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.SecurityNamespaceHandler.<init>",
      "parameters": [],
      "signature": "void org.springframework.security.config.SecurityNamespaceHandler.<init>()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/SecurityNamespaceHandler.html",
      "comment": "Counter example for authentication (init)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Parses elements from the \"security\" namespace (http://www.springframework.org/schema/security)."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.ByteArrayOutputStream.write",
      "parameters": [
        "java.io.InputStream"
      ],
      "signature": "int org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.ByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Scanner.nextLine",
      "parameters": [],
      "signature": "java.lang.String java.util.Scanner.nextLine()",
      "framework": "",
      "link": "",
      "comment": "java.util.Scanner",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.ObjectMessage.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.logging.log4j.message.ObjectMessage.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.ObjectMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.initWriter",
      "parameters": [
        "java.io.File",
        "java.nio.charset.Charset",
        "boolean"
      ],
      "signature": "java.io.Writer org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File, java.nio.charset.Charset, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.Writer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.RFC2617Scheme.writeObject",
      "parameters": [
        "java.io.ObjectOutputStream"
      ],
      "signature": "void org.apache.http.impl.auth.RFC2617Scheme.writeObject(java.io.ObjectOutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.auth.RFC2617Scheme",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setDomain",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.Cookie.setDomain(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2109. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.",
        "class": "Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server. A cookie's value can uniquely identify a client, so cookies are commonly used for session management. A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number. Some Web browsers have bugs in how they handle the optional attributes, so use them sparingly to improve the interoperability of your servlets. The servlet sends cookies to the browser by using the {@link HttpServletResponse#addCookie} method, which adds fields to HTTP response headers to send cookies to the browser, one at a time. The browser is expected to support 20 cookies for each Web server, 300 cookies total, and may limit cookie size to 4 KB each. The browser returns cookies to the servlet by adding fields to HTTP request headers. Cookies can be retrieved from a request by using the {@link HttpServletRequest#getCookies} method. Several cookies might have the same name but different path attributes. Cookies affect the caching of the Web pages that use them. HTTP 1.0 does not cache pages that use cookies created with this class. This class does not support the cache control defined with HTTP 1.1. This class supports both the Version 0 (by Netscape) and Version 1 (by RFC 2109) cookie specifications. By default, cookies are created using Version 0 to ensure the best interoperability."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.MysqlIO.getPacketDumpToLog",
      "parameters": [
        "com.mysql.jdbc.Buffer",
        "int"
      ],
      "signature": "java.lang.String com.mysql.jdbc.MysqlIO.getPacketDumpToLog(com.mysql.jdbc.Buffer, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.MysqlIO",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.debug",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String"
      ],
      "signature": "void org.slf4j.Logger.debug(org.slf4j.Marker, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.builder.ToStringStyle.appendToString",
      "parameters": [
        "java.lang.StringBuffer",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.lang.builder.ToStringStyle.appendToString(java.lang.StringBuffer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.builder.ToStringStyle",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.dom.RangeImpl.setEnd",
      "parameters": [
        "org.w3c.dom.Node",
        "int"
      ],
      "signature": "void com.google.gxp.org.apache.xerces.dom.RangeImpl.setEnd(org.w3c.dom.Node, int)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.dom.RangeImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getCookies",
      "parameters": [],
      "signature": "javax.servlet.http.Cookie[] javax.servlet.http.HttpServletRequestWrapper.getCookies()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequestWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.servlet.http.Cookie[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildQueryString",
      "parameters": [
        "boolean",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.VelocityStrutsUtil.evaluate",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.struts2.util.VelocityStrutsUtil.evaluate(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.VelocityStrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.finishTag",
      "parameters": [],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.finishTag()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.<init>",
      "parameters": [
        "java.util.Hashtable"
      ],
      "signature": "void javax.naming.directory.InitialDirContext.<init>(java.util.Hashtable)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Constructs an initial DirContext using the supplied environment. Environment properties are discussed in the javax.naming.InitialContext class description. This constructor will not modify environment or save a reference to it, but may save a clone. Caller should not modify mutable keys and values in environment after it has been passed to the constructor.",
        "class": "This class is the starting context for performing directory operations. The documentation in the class description of InitialContext (including those for synchronization) apply here."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getPublicParameterMap",
      "parameters": [],
      "signature": "java.util.Map javax.portlet.PortletRequest.getPublicParameterMap()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Map",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getCookies",
      "parameters": [],
      "signature": "javax.portlet.http.Cookie[] javax.portlet.PortletRequest.getCookies()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.portlet.http.Cookie[]",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.disk.DiskFileItem.write",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void org.apache.commons.fileupload.disk.DiskFileItem.write(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.disk.DiskFileItem",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.replace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.replace(java.lang.Object, java.lang.Object)",
      "framework": "hibernate",
      "link": "",
      "comment": "Counter example for sanitizer",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1,
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to  {@code\n if (map.containsKey(key)) {\n   return map.put(key, value);\n } else\n   return null;\n } except that the action is performed atomically.",
        "class": "An advanced hash table supporting configurable garbage collection semantics of keys and values, optional referential-equality, full concurrency of retrievals, and adjustable expected concurrency for updates. This table is designed around specific advanced use-cases. If there is any doubt whether this table is for you, you most likely should be using {@link java.util.concurrent.ConcurrentHashMap} instead. This table supports strong, weak, and soft keys and values. By default keys are weak, and values are strong. Such a configuration offers similar behavior to {@link java.util.WeakHashMap}, entries of this table are periodically removed once their corresponding keys are no longer referenced outside of this table. In other words, this table will not prevent a key from being discarded by the garbage collector. Once a key has been discarded by the collector, the corresponding entry is no longer visible to this table; however, the entry may occupy space until a future table operation decides to reclaim it. For this reason, summary functions such as {@code size} and {@code isEmpty} might return a value greater than the observed number of entries. In order to support a high level of concurrency, stale entries are only reclaimed during blocking (usually mutating) operations. Enabling soft keys allows entries in this table to remain until their space is absolutely needed by the garbage collector. This is unlike weak keys which can be reclaimed as soon as they are no longer referenced by a normal strong reference. The primary use case for soft keys is a cache, which ideally occupies memory that is not in use for as long as possible. By default, values are held using a normal strong reference. This provides the commonly desired guarantee that a value will always have at least the same life-span as it's key. For this reason, care should be taken to ensure that a value never refers, either directly or indirectly, to its key, thereby preventing reclamation. If this is unavoidable, then it is recommended to use the same reference type in use for the key. However, it should be noted that non-strong values may disappear before their corresponding key. While this table does allow the use of both strong keys and values, it is recommended to use {@link java.util.concurrent.ConcurrentHashMap} for such a configuration, since it is optimized for that case. Just like {@link java.util.concurrent.ConcurrentHashMap}, this class obeys the same functional specification as {@link java.util.Hashtable}, and includes versions of methods corresponding to each method of {@code Hashtable}. However, even though all operations are thread-safe, retrieval operations do not entail locking, and there is not any support for locking the entire table in a way that prevents all access. This class is fully interoperable with {@code Hashtable} in programs that rely on its thread safety but not on its synchronization details. Retrieval operations (including {@code get}) generally do not block, so may overlap with update operations (including {@code put} and {@code remove}). Retrievals reflect the results of the most recently completed update operations holding upon their onset. For aggregate operations such as {@code putAll} and {@code clear}, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do not throw {@link ConcurrentModificationException}. However, iterators are designed to be used by only one thread at a time. The allowed concurrency among update operations is guided by the optional {@code concurrencyLevel} constructor argument (default {@code 16}), which is used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because placement in hash tables is essentially random, the actual concurrency will vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one is appropriate when it is known that only one thread will modify and all others will only read. Also, resizing this or any other kind of hash table is a relatively slow operation, so, when possible, it is a good idea to provide estimates of expected table sizes in constructors. This class and its views and iterators implement all of the optional methods of the {@link Map} and {@link Iterator} interfaces. Like {@link Hashtable} but unlike {@link HashMap}, this class does not allow {@code null} to be used as a key or value. This class is a member of the Java Collections Framework."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.persistence.EntityManager.createNativeQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.Class"
      ],
      "signature": "javax.persistence.Query javax.persistence.EntityManager.createNativeQuery(java.lang.String, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "javax.persistence.EntityManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.persistence.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.persistence.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.info",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.info(java.lang.Object, java.lang.Throwable, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockHttpServletRequest.logout",
      "parameters": [],
      "signature": "void org.springframework.mock.web.MockHttpServletRequest.logout()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/mock/web/MockHttpServletRequest.html",
      "comment": "Puts the program is an unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Establish null as the value returned when  getUserPrincipal, getRemoteUser,  and getAuthType is called on the request.",
        "class": "Mock implementation of the {@link javax.servlet.http.HttpServletRequest} interface. The default, preferred {@link Locale} for the server mocked by this request is {@link Locale#ENGLISH}. This value can be changed via {@link #addPreferredLocale} or {@link #setPreferredLocales}. As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.useServerFetch",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.StatementImpl.useServerFetch()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.InitialDirContext.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.InitialDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.request.WebClientInfo.getUserAgentStringLc",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.request.WebClientInfo.getUserAgentStringLc()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.request.WebClientInfo",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.execute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "boolean java.sql.PreparedStatement.execute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapTemplate.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "int",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.util.List org.springframework.ldap.core.LdapTemplate.search(java.lang.String, java.lang.String, int, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapTemplate",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.print",
      "parameters": [
        "long"
      ],
      "signature": "void java.io.PrintStream.print(long)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Prints a long integer. The string produced by {@link java.lang.String#valueOf(long)} is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the {@link #write(int)} method.",
        "class": "A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a PrintStream never throws an IOException; instead, exceptional situations merely set an internal flag that can be tested via the checkError method. Optionally, a PrintStream can be created so as to flush automatically; this means that the flush method is automatically invoked after a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written. All characters printed by a PrintStream are converted into bytes using the platform's default character encoding. The {@link PrintWriter} class should be used in situations that require writing characters rather than bytes."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getQualityCSV",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.eclipse.jetty.http.HttpFields.getQualityCSV(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileReader.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.FileReader.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Creates a new FileReader, given the name of the file to read from.",
        "class": "Convenience class for reading character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are appropriate. To specify these values yourself, construct an InputStreamReader on a FileInputStream. FileReader is meant for reading streams of characters. For reading streams of raw bytes, consider using a FileInputStream."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.info(org.slf4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.copyLarge",
      "parameters": [
        "java.io.Reader",
        "java.io.Writer",
        "char[]"
      ],
      "signature": "long org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.ClassFile.setAccessFlags",
      "parameters": [
        "int"
      ],
      "signature": "void javassist.bytecode.ClassFile.setAccessFlags(int)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.ClassFile",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "long java.sql.PreparedStatement.executeLargeUpdate(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.inMemoryAuthentication",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.inMemoryAuthentication()",
      "framework": "spring",
      "link": "http://docs.spring.io/autorepo/docs/spring-security/4.0.0.M1/apidocs/index.html?org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.html",
      "comment": "the method returns a configurator for manipulation of users' details. The return object is authenticated and the owner may execute critical ops.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpURI.getHost",
      "parameters": [],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpURI.getHost()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpURI",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getResponseContentType",
      "parameters": [],
      "signature": "java.util.Enumeration javax.portlet.PortletRequest.getResponseContentType()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Enumeration",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.write",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.PrintWriter.write(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.WebServer.run",
      "parameters": [],
      "signature": "void org.apache.xmlrpc.webserver.WebServer.run()",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/WebServer.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Listens for client requests until stopped. Call {@link #start()} to invoke this method, and {@link #shutdown()} to break out of it.",
        "class": "The {@link WebServer} is a minimal HTTP server, that might be used as an embedded web server. Use of the {@link WebServer} has grown very popular amongst users of Apache XML-RPC. Why this is the case, can hardly be explained, because the {@link WebServer} is at best a workaround, compared to full blown servlet engines like Tomcat or Jetty. For example, under heavy load it will almost definitely be slower than a real servlet engine, because it does neither support proper keepalive (multiple requests per physical connection) nor chunked mode (in other words, it cannot stream requests). If you still insist in using the {@link WebServer}, it is recommended to use its subclass, the {@link ServletWebServer} instead, which offers a minimal subset of the servlet API. In other words, you keep yourself the option to migrate to a real servlet engine later. Use of the {@link WebServer} goes roughly like this: First of all, create a property file (for example \"MyHandlers.properties\") and add it to your jar file. The property keys are handler names and the property values are the handler classes. Once that is done, create an instance of WebServer:    final int port = 8088;\n   final String propertyFile = \"MyHandler.properties\";\n\n   PropertyHandlerMapping mapping = new PropertyHandlerMapping();\n   ClassLoader cl = Thread.currentThread().getContextClassLoader();\n   mapping.load(cl, propertyFile);\n   WebServer webServer = new WebServer(port);\n   XmlRpcServerConfigImpl config = new XmlRpcServerConfigImpl();\n   XmlRpcServer server = webServer.getXmlRpcServer();\n   server.setConfig(config);\n   server.setHandlerMapping(mapping);\n   webServer.start();"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.config.HandlersBeanDefinitionParser.parse",
      "parameters": [
        "org.w3c.dom.Element",
        "org.springframework.beans.factory.xml.ParserContext"
      ],
      "signature": "org.springframework.beans.factory.config.BeanDefinition org.springframework.web.socket.config.HandlersBeanDefinitionParser.parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)",
      "framework": "spring",
      "link": "https://github.com/spring-projects/spring-framework/blob/master/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "source"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Parse the specified {@link org.w3c.dom.Element} and register the resulting {@link BeanDefinition BeanDefinition(s)} with the {@link org.springframework.beans.factory.xml.ParserContext#getRegistry() BeanDefinitionRegistry} embedded in the supplied {@link ParserContext}. Implementations must return the primary {@link BeanDefinition} that results from the parse if they will ever be used in a nested fashion (for example as an inner tag in a {@code } tag). Implementations may return {@code null} if they will not be used in a nested fashion.",
        "class": "Parses the configuration for the {@code websocket:handlers} namespace element. Registers a Spring MVC {@code SimpleUrlHandlerMapping} to map HTTP WebSocket handshake (or SockJS) requests to {@link org.springframework.web.socket.WebSocketHandler WebSocketHandler}s."
      },"return": "org.springframework.beans.factory.config.BeanDefinition",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteQueryBuilder.buildQuery",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String android.database.sqlite.SQLiteQueryBuilder.buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteQueryBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.DatabaseUtils.stringForQuery",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.lang.String android.database.DatabaseUtils.stringForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.DatabaseUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseOnlyServerErrorMessages",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseOnlyServerErrorMessages()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockBodyContent.println",
      "parameters": [],
      "signature": "void org.springframework.mock.web.MockBodyContent.println()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/MockBodyContent.html",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Terminate the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single newline character ('\\n').",
        "class": "Mock implementation of the {@link javax.servlet.jsp.tagext.BodyContent} class. Used for testing the web framework; only necessary for testing applications when testing custom JSP tags."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.comparator.SizeFileComparator.compare",
      "parameters": [
        "java.io.File",
        "java.io.File"
      ],
      "signature": "int org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.comparator.SizeFileComparator",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.PersistenceManager.newQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "javax.jdo.Query javax.jdo.PersistenceManager.newQuery(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.PersistenceManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.jdo.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.Statement.executeQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.ResultSet com.mysql.jdbc.Statement.executeQuery(java.lang.String)",
      "framework": "java",
      "link": "",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Execute a SQL statement that retruns a single ResultSet",
        "class": "A Statement object is used for executing a static SQL statement and obtaining the results produced by it. Only one ResultSet per Statement can be open at any point in time. Therefore, if the reading of one ResultSet is interleaved with the reading of another, each must have been generated by different Statements. All statement execute methods implicitly close a statement's current ResultSet if an open one exists."
      },"return": "java.sql.ResultSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "java.lang.String org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.hasAnyAuthority(java.lang.String[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/config/annotation/web/messaging/MessageSecurityMetadataSourceRegistry.html",
      "comment": "Counter example for sanitizer (has)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Allows mapping security constraints using {@link MessageMatcher} to the security expressions."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.warn",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.slf4j.Logger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Logger.info",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Logger.info(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.methods.HttpPost.setHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void org.apache.http.client.methods.HttpPost.setHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.methods.HttpPost",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-httpcomponents-httpclient.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Throwable"
      ],
      "signature": "void org.slf4j.Logger.info(org.slf4j.Marker, java.lang.String, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.BasicCookieStore.clearExpired",
      "parameters": [
        "java.util.Date"
      ],
      "signature": "boolean org.apache.http.impl.client.BasicCookieStore.clearExpired(java.util.Date)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.BasicCookieStore",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.StringEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.StringEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.StringEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.access$200",
      "parameters": [
        "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService"
      ],
      "signature": "org.apache.commons.logging.Log org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.access$200(org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService)",
      "framework": "spring",
      "link": "",
      "comment": "Counter example for sanitizer (implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.commons.logging.Log",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.UpdatableResultSet.updateFloat",
      "parameters": [
        "java.lang.String",
        "float"
      ],
      "signature": "void com.mysql.jdbc.UpdatableResultSet.updateFloat(java.lang.String, float)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "freemarker.core.MethodCall.getParameterValue",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.Object freemarker.core.MethodCall.getParameterValue(int)",
      "framework": "",
      "link": "",
      "comment": "freemarker.core.MethodCall",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ServerPreparedStatement.setNClob",
      "parameters": [
        "int",
        "java.sql.NClob"
      ],
      "signature": "void com.mysql.jdbc.JDBC4ServerPreparedStatement.setNClob(int, java.sql.NClob)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ServerPreparedStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.dispatcher.Dispatcher.getSaveDir",
      "parameters": [],
      "signature": "java.lang.String org.apache.struts2.dispatcher.Dispatcher.getSaveDir()",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.dispatcher.Dispatcher",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.internet.InternetAddress.parse",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.mail.internet.InternetAddress[] javax.mail.internet.InternetAddress.parse(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Parse the given comma separated sequence of addresses into InternetAddress objects. Addresses must follow RFC822 syntax.",
        "class": "This class represents an Internet email address using the syntax of RFC822. Typical address syntax is of the form \"user@host.domain\" or \"Personal Name \"."
      },"return": "javax.mail.internet.InternetAddress[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.stratos.cli-4.0.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.jdbcAuthentication",
      "parameters": [],
      "signature": "org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder.jdbcAuthentication()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/4.0.0.RELEASE/apidocs/org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.html",
      "comment": "Authentication to JDBC. The owner of the return object can manipulate users to a JDBC connection.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties",
      "parameters": [
        "java.util.Map",
        "java.lang.Object",
        "java.util.Map",
        "boolean"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperties(java.util.Map, java.lang.Object, java.util.Map, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getRequestedSessionId",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getRequestedSessionId()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getRequestedSessionId() on the wrapped request object.",
        "class": "Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.info",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.info(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.bcel.util.JavaWrapper.runMain",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "void org.apache.bcel.util.JavaWrapper.runMain(java.lang.String, java.lang.String[])",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-bcel/apidocs/org/apache/bcel/util/JavaWrapper.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Runs the main method of the given class with the arguments passed in argv",
        "class": "Java interpreter replacement, i.e., wrapper that uses its own ClassLoader to modify/generate classes as they're requested. You can take this as a template for your own applications. Call this wrapper with: java org.apache.bcel.util.JavaWrapper &lt;real.class.name&gt; [arguments] To use your own class loader you can set the \"bcel.classloader\" system property java org.apache.bcel.util.JavaWrapper -Dbcel.classloader=foo.MyLoader &lt;real.class.name&gt; [arguments]"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.StrutsUtil.makeSelectList",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.util.List org.apache.struts2.util.StrutsUtil.makeSelectList(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.StrutsUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "struts2-core-2.1.2.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType",
      "parameters": [
        "java.util.EnumMap"
      ],
      "signature": "java.lang.Class com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumMap)",
      "framework": "",
      "link": "",
      "comment": "com.fasterxml.jackson.databind.util.ClassUtil",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.addHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.addHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponseWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE443"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.util.DefaultPropertiesPersister.unescape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.util.DefaultPropertiesPersister.unescape(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/DefaultPropertiesPersister.html",
      "comment": "Counter example for sanitizer (unescape)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Default implementation of the {@link PropertiesPersister} interface. Follows the native parsing of java.util.Properties. Allows for reading from any Reader and writing to any Writer, for example to specify a charset for a properties file. This is a capability that standard java.util.Properties unfortunately lacks up until JDK 1.5: You can only load files using the ISO-8859-1 charset there. Loading from and storing to a stream delegates to Properties.load and Properties.store, respectively, to be fully compatible with the Unicode conversion as implemented by the JDK Properties class. On JDK 1.6, Properties.load/store will also be used for readers/writers, effectively turning this class into a plain backwards compatibility adapter. The persistence code that works with Reader/Writer follows the JDK's parsing strategy but does not implement Unicode conversion, because the Reader/Writer should already apply proper decoding/encoding of characters. If you use prefer to escape unicode characters in your properties files, do not specify an encoding for a Reader/Writer (like ReloadableResourceBundleMessageSource's \"defaultEncoding\" and \"fileEncodings\" properties). As of Spring 1.2.2, this implementation also supports properties XML files, through the loadFromXml and storeToXml methods. The default implementations delegate to JDK 1.5's corresponding methods, throwing an exception if running on an older JDK. Those implementations could be subclassed to apply custom XML handling on JDK 1.4, for example."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.validator.util.ValidatorUtils.replace",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.validator.util.ValidatorUtils.replace(java.lang.String, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/util/ValidatorUtils.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replace part of a String with another value.",
        "class": "Basic utility methods. The use of FastHashMap is deprecated and will be replaced in a future release."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpSession.putValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void javax.servlet.http.HttpSession.putValue(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpSession",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE501"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.novell.ldap.LDAPConnection.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "boolean"
      ],
      "signature": "com.novell.ldap.LDAPSearchQueue com.novell.ldap.LDAPConnection.search(java.lang.String, java.lang.String, java.lang.String, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.novell.ldap.LDAPConnection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.novell.ldap.LDAPSearchQueue",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.ContextClassLoaderLocal.unset",
      "parameters": [],
      "signature": "void org.apache.commons.beanutils.ContextClassLoaderLocal.unset()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.ContextClassLoaderLocal",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileCleaningTracker.track",
      "parameters": [
        "java.io.File",
        "java.lang.Object",
        "org.apache.commons.io.FileDeleteStrategy"
      ],
      "signature": "void org.apache.commons.io.FileCleaningTracker.track(java.io.File, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileCleaningTracker",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getStatementInterceptors",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getStatementInterceptors()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema.generateDeleteRuleClause",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema.generateDeleteRuleClause()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.DatabaseMetaDataUsingInfoSchema",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.getBytes",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "byte[] java.lang.String.getBytes(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "boolean"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.RequestData.getHttpVersion",
      "parameters": [],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.RequestData.getHttpVersion()",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/RequestData.html",
      "comment": "Counter example for sanitizer.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Returns the requests HTTP version.",
        "class": "Web servers extension of {@link org.apache.xmlrpc.common.XmlRpcHttpRequestConfig}, which allows to store additional per request data."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.spi.AbstractLogger.debug",
      "parameters": [
        "org.apache.logging.log4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.apache.logging.log4j.spi.AbstractLogger.debug(org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.spi.AbstractLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.stratos.cli.StratosApplication.run",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "int org.apache.stratos.cli.StratosApplication.run(java.lang.String[])",
      "framework": "apache",
      "link": "https://github.com/apache/stratos/blob/master/components/org.apache.stratos.cli/src/main/java/org/apache/stratos/cli/StratosApplication.java",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareCall",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.CallableStatement java.sql.Connection.prepareCall(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Connection",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.CallableStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getRemoteAddress",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getRemoteAddress()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.event.AuditListener.blogEntryUnpublished",
      "parameters": [
        "net.sourceforge.pebble.api.event.blogentry.BlogEntryEvent"
      ],
      "signature": "void net.sourceforge.pebble.event.AuditListener.blogEntryUnpublished(net.sourceforge.pebble.api.event.blogentry.BlogEntryEvent)",
      "framework": "pebble",
      "link": "https://github.com/balzaczyy/pebble-clone/blob/master/src/main/java/net/sourceforge/pebble/event/AuditListener.java",
      "comment": "Counter example for sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Called when a blog entry has been unpublished.",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.trace",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.trace(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getNativeDateViaParseConversion",
      "parameters": [
        "int"
      ],
      "signature": "java.sql.Date com.mysql.jdbc.ResultSetImpl.getNativeDateViaParseConversion(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Date",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.getStringField",
      "parameters": [
        "org.eclipse.jetty.http.HttpHeader"
      ],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpFields.getStringField(org.eclipse.jetty.http.HttpHeader)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.RandomStringUtils.random",
      "parameters": [
        "int",
        "boolean",
        "boolean"
      ],
      "signature": "java.lang.String org.apache.commons.lang.RandomStringUtils.random(int, boolean, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang.RandomStringUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator"
      ],
      "signature": "java.lang.String com.opensymphony.xwork2.util.TextParseUtil.translateVariables(java.lang.String, com.opensymphony.xwork2.util.ValueStack, com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.request.WebClientInfo.getUserAgent",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.request.WebClientInfo.getUserAgent()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.request.WebClientInfo",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForURL",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForURL(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode for use in a URL. This method performs URL encoding on the entire string.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.axis2.util.Utils.sanitizeWebOutput",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.axis2.util.Utils.sanitizeWebOutput(java.lang.String)",
      "framework": "apache",
      "link": "http://grepcode.com/file/repo1.maven.org/maven2/org.apache.axis2/axis2-kernel/1.4/org/apache/axis2/util/Utils.java",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.wicket.protocol.http.ClientProperties.getNavigatorUserAgent",
      "parameters": [],
      "signature": "java.lang.String org.apache.wicket.protocol.http.ClientProperties.getNavigatorUserAgent()",
      "framework": "",
      "link": "",
      "comment": "org.apache.wicket.protocol.http.ClientProperties",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "org.apache.wicket-all-1.0.4.release.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javassist.bytecode.SignatureAttribute.toTypeSignature",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javassist.bytecode.SignatureAttribute$Type javassist.bytecode.SignatureAttribute.toTypeSignature(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javassist.bytecode.SignatureAttribute",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javassist.bytecode.SignatureAttribute$Type",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.createTempFile",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.io.File"
      ],
      "signature": "java.io.File java.io.File.createTempFile(java.lang.String, java.lang.String, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "java.io.File",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "char[]",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "java.lang.Class",
        "com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.TextParseUtil.translateVariables(char[], java.lang.String, com.opensymphony.xwork2.util.ValueStack, java.lang.Class, com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.addBatch",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.sql.Statement.addBatch(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getResource",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.net.URL java.lang.Class.getResource(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Finds a resource with a given name. The rules for searching resources associated with a given class are implemented by the defining {@linkplain ClassLoader class loader} of the class. This method delegates to this object's class loader. If this object was loaded by the bootstrap class loader, the method delegates to {@link ClassLoader#getSystemResource}. Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the {@code name} begins with a {@code '/'} ('\\u002f'), then the absolute name of the resource is the portion of the {@code name} following the {@code '/'}. Otherwise, the absolute name is of the following form: {@code modified_package_name/name} Where the {@code modified_package_name} is the package name of this object with {@code '/'} substituted for {@code '.'} ('\\u002e').",
        "class": "Instances of the class {@code Class} represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a {@code Class} object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code int}, {@code long}, {@code float}, and {@code double}), and the keyword {@code void} are also represented as {@code Class} objects. {@code Class} has no public constructor. Instead {@code Class} objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the {@code defineClass} method in the class loader. The following example uses a {@code Class} object to print the class name of an object:      void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n It is also possible to get the {@code Class} object for a named type (or for void) using a class literal. See Section 15.8.2 of The Java™ Language Specification. For example: {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}"
      },"return": "java.net.URL",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getSocketFactoryClassName",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.ConnectionPropertiesImpl.getSocketFactoryClassName()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.thoughtworks.xstream.mapper.LocalConversionMapper.getLocalSingleValueConverter",
      "parameters": [
        "java.lang.Class",
        "java.lang.String",
        "java.lang.Class"
      ],
      "signature": "com.thoughtworks.xstream.converters.SingleValueConverter com.thoughtworks.xstream.mapper.LocalConversionMapper.getLocalSingleValueConverter(java.lang.Class, java.lang.String, java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "com.thoughtworks.xstream.mapper.LocalConversionMapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.thoughtworks.xstream.converters.SingleValueConverter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.DatabaseUtils.longForQuery",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "long android.database.DatabaseUtils.longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.DatabaseUtils",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.client.CookieSpecRegistries.createDefault",
      "parameters": [],
      "signature": "org.apache.http.config.Lookup org.apache.http.impl.client.CookieSpecRegistries.createDefault()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.client.CookieSpecRegistries",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.config.Lookup",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.auth.AuthState.invalidate",
      "parameters": [],
      "signature": "void org.apache.http.auth.AuthState.invalidate()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.auth.AuthState",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.skip",
      "parameters": [
        "java.io.InputStream",
        "long"
      ],
      "signature": "long org.apache.commons.io.IOUtils.skip(java.io.InputStream, long)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getSecondsBeforeRetryMaster",
      "parameters": [],
      "signature": "int com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getSecondsBeforeRetryMaster()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xalan.xsltc.compiler.util.Util.replace",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.lang.String org.apache.xalan.xsltc.compiler.util.Util.replace(java.lang.String, java.lang.String, java.lang.String[])",
      "framework": "apache",
      "link": "https://xml.apache.org/xalan-j/apidocs/org/apache/xalan/xsltc/compiler/util/Util.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1,
          2
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replace a certain character in a string with a new substring.",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.HtmlUtils.htmlEscape",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.HtmlUtils.htmlEscape(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. Escapes all special characters to their corresponding entity reference (e.g. {@code <}). Reference: http://www.w3.org/TR/html4/sgml/entities.html",
        "class": "Utility class for HTML escaping. Escapes and unescapes based on the W3C HTML 4.01 recommendation, handling character entity references. Reference: http://www.w3.org/TR/html4/charset.html For a comprehensive set of String escaping utilities, consider Apache Commons Lang and its StringEscapeUtils class. We are not using that class here to avoid a runtime dependency on Commons Lang just for HTML escaping. Furthermore, Spring's HTML escaping is more flexible and 100% HTML 4.0 compliant."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-web-4.3.9.RELEASE.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.info",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.info(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.common.collect.ForwardingCollection.delegate",
      "parameters": [],
      "signature": "java.lang.Object com.google.common.collect.ForwardingCollection.delegate()",
      "framework": "",
      "link": "",
      "comment": "com.google.common.collect.ForwardingCollection",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.checkIsOutputParam",
      "parameters": [
        "int"
      ],
      "signature": "com.mysql.jdbc.CallableStatement$CallableStatementParam com.mysql.jdbc.CallableStatement.checkIsOutputParam(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.mysql.jdbc.CallableStatement$CallableStatementParam",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.ldap.core.LdapOperations.lookup",
      "parameters": [
        "java.lang.String",
        "org.springframework.ldap.core.ContextMapper"
      ],
      "signature": "java.lang.Object org.springframework.ldap.core.LdapOperations.lookup(java.lang.String, org.springframework.ldap.core.ContextMapper)",
      "framework": "",
      "link": "",
      "comment": "org.springframework.ldap.core.LdapOperations",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-ldap-1.3.1.RELEASE-all.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.input.TeeInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.io.input.TeeInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.input.TeeInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.NTLMScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.NTLMScheme.authenticate(org.apache.commons.httpclient.Credentials, java.lang.String, java.lang.String)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/NTLMScheme.html",
      "comment": "Depricated method. The credentials are provided. The authentication string is returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces NTLM authorization string for the given set of {@link Credentials}.",
        "class": "An implementation of the Microsoft proprietary NTLM authentication scheme. For a detailed explanation of the NTLM scheme please see http://davenport.sourceforge.net/ntlm.html."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.jdo.PersistenceManager.newQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.jdo.Query javax.jdo.PersistenceManager.newQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.jdo.PersistenceManager",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.jdo.Query",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jdo.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.fatal",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.fatal(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.HtmlUtils.htmlEscapeHex",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.HtmlUtils.htmlEscapeHex(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. Escapes all special characters to their corresponding numeric reference in hex format (&#xHex;). Reference: http://www.w3.org/TR/html4/sgml/entities.html",
        "class": "Utility class for HTML escaping. Escapes and unescapes based on the W3C HTML 4.01 recommendation, handling character entity references. Reference: http://www.w3.org/TR/html4/charset.html For a comprehensive set of String escaping utilities, consider Apache Commons Lang and its StringEscapeUtils class. We are not using that class here to avoid a runtime dependency on Commons Lang just for HTML escaping. Furthermore, Spring's HTML escaping is more flexible and 100% HTML 4.0 compliant."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-web-4.3.9.RELEASE.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "slick.jdbc.SQLActionBuilder.<init>",
      "parameters": [],
      "signature": "void slick.jdbc.SQLActionBuilder.<init>()",
      "framework": "",
      "link": "",
      "comment": "slick.jdbc.SQLActionBuilder",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slick_2.10-3.1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ClientDataRequest.getContentType",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.ClientDataRequest.getContentType()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ClientDataRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.exposeAsDriverPropertyInfo",
      "parameters": [
        "java.util.Properties",
        "int"
      ],
      "signature": "java.sql.DriverPropertyInfo[] com.mysql.jdbc.ConnectionPropertiesImpl.exposeAsDriverPropertyInfo(java.util.Properties, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.DriverPropertyInfo[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.getDomain",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.Cookie.getDomain()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.Cookie",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.access.intercept.RunAsImplAuthenticationProvider.authenticate",
      "parameters": [
        "org.springframework.security.core.Authentication"
      ],
      "signature": "org.springframework.security.core.Authentication org.springframework.security.access.intercept.RunAsImplAuthenticationProvider.authenticate(org.springframework.security.core.Authentication)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/access/intercept/RunAsImplAuthenticationProvider.html",
      "comment": "The input object is authenticated and returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs authentication with the same contract as {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)} .",
        "class": "An {@link AuthenticationProvider} implementation that can authenticate a {@link RunAsUserToken}. Configured in the bean context with a key that should match the key used by adapters to generate the RunAsUserToken. It treats as valid any RunAsUserToken instance presenting a hash code that matches the RunAsImplAuthenticationProvider-configured key. If the key does not match, a BadCredentialsException is thrown."
      },"return": "org.springframework.security.core.Authentication",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.util.FastByteArrayOutputStream.writeOut",
      "parameters": [
        "java.io.Writer",
        "byte[]",
        "int"
      ],
      "signature": "void org.apache.struts2.util.FastByteArrayOutputStream.writeOut(java.io.Writer, byte[], int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.util.FastByteArrayOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "anorm.SimpleSql.execute",
      "parameters": [
        "java.sql.Connection"
      ],
      "signature": "boolean anorm.SimpleSql.execute(java.sql.Connection)",
      "framework": "",
      "link": "",
      "comment": "anorm.SimpleSql",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "anorm_2.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseUsageAdvisor",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getUseUsageAdvisor()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.cookie.RFC2965Spec.validate",
      "parameters": [
        "org.apache.http.cookie.Cookie",
        "org.apache.http.cookie.CookieOrigin"
      ],
      "signature": "void org.apache.http.impl.cookie.RFC2965Spec.validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.impl.cookie.RFC2965Spec",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.WatchableOutputStream.setWatcher",
      "parameters": [
        "com.mysql.jdbc.OutputStreamWatcher"
      ],
      "signature": "void com.mysql.jdbc.WatchableOutputStream.setWatcher(com.mysql.jdbc.OutputStreamWatcher)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.WatchableOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4UpdatableResultSet.updateNClob",
      "parameters": [
        "java.lang.String",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.JDBC4UpdatableResultSet.updateNClob(java.lang.String, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4UpdatableResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.logging.Logger.log",
      "parameters": [
        "java.util.logging.LogRecord"
      ],
      "signature": "void java.util.logging.Logger.log(java.util.logging.LogRecord)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Log a LogRecord. All the other logging methods in this class call through this method to actually perform any logging. Subclasses can override this single method to capture all log activity.",
        "class": "A Logger object is used to log messages for a specific system or application component. Loggers are normally named, using a hierarchical dot-separated namespace. Logger names can be arbitrary strings, but they should normally be based on the package name or class name of the logged component, such as java.net or javax.swing. In addition it is possible to create \"anonymous\" Loggers that are not stored in the Logger namespace. Logger objects may be obtained by calls on one of the getLogger factory methods. These will either create a new Logger or return a suitable existing Logger. It is important to note that the Logger returned by one of the {@code getLogger} factory methods may be garbage collected at any time if a strong reference to the Logger is not kept. Logging messages will be forwarded to registered Handler objects, which can forward the messages to a variety of destinations, including consoles, files, OS logs, etc. Each Logger keeps track of a \"parent\" Logger, which is its nearest existing ancestor in the Logger namespace. Each Logger has a \"Level\" associated with it. This reflects a minimum Level that this logger cares about. If a Logger's level is set to null, then its effective level is inherited from its parent, which may in turn obtain it recursively from its parent, and so on up the tree. The log level can be configured based on the properties from the logging configuration file, as described in the description of the LogManager class. However it may also be dynamically changed by calls on the Logger.setLevel method. If a logger's level is changed the change may also affect child loggers, since any child logger that has null as its level will inherit its effective level from its parent. On each logging call the Logger initially performs a cheap check of the request level (e.g., SEVERE or FINE) against the effective log level of the logger. If the request level is lower than the log level, the logging call returns immediately. After passing this initial (cheap) test, the Logger will allocate a LogRecord to describe the logging message. It will then call a Filter (if present) to do a more detailed check on whether the record should be published. If that passes it will then publish the LogRecord to its output Handlers. By default, loggers also publish to their parent's Handlers, recursively up the tree. Each Logger may have a {@code ResourceBundle} associated with it. The {@code ResourceBundle} may be specified by name, using the {@link #getLogger(java.lang.String, java.lang.String)} factory method, or by value - using the {@link #setResourceBundle(java.util.ResourceBundle) setResourceBundle} method. This bundle will be used for localizing logging messages. If a Logger does not have its own {@code ResourceBundle} or resource bundle name, then it will inherit the {@code ResourceBundle} or resource bundle name from its parent, recursively up the tree. Most of the logger output methods take a \"msg\" argument. This msg argument may be either a raw value or a localization key. During formatting, if the logger has (or inherits) a localization {@code ResourceBundle} and if the {@code ResourceBundle} has a mapping for the msg string, then the msg string is replaced by the localized value. Otherwise the original msg string is used. Typically, formatters use java.text.MessageFormat style formatting to format parameters, so for example a format string \"{0} {1}\" would format two parameters as strings. A set of methods alternatively take a \"msgSupplier\" instead of a \"msg\" argument. These methods take a {@link Supplier}{@code } function which is invoked to construct the desired log message only when the message actually is to be logged based on the effective log level thus eliminating unnecessary message construction. For example, if the developer wants to log system health status for diagnosis, with the String-accepting version, the code would look like: \n\n   class DiagnosisMessages {\n     static String systemHealthStatus() {\n       // collect system health information\n       ...\n     }\n   }\n   ...\n   logger.log(Level.FINER, DiagnosisMessages.systemHealthStatus());\n With the above code, the health status is collected unnecessarily even when the log level FINER is disabled. With the Supplier-accepting version as below, the status will only be collected when the log level FINER is enabled. \n\n   logger.log(Level.FINER, DiagnosisMessages::systemHealthStatus);\n When looking for a {@code ResourceBundle}, the logger will first look at whether a bundle was specified using {@link #setResourceBundle(java.util.ResourceBundle) setResourceBundle}, and then only whether a resource bundle name was specified through the {@link #getLogger(java.lang.String, java.lang.String) getLogger} factory method. If no {@code ResourceBundle} or no resource bundle name is found, then it will use the nearest {@code ResourceBundle} or resource bundle name inherited from its parent tree. When a {@code ResourceBundle} was inherited or specified through the {@link #setResourceBundle(java.util.ResourceBundle) setResourceBundle} method, then that {@code ResourceBundle} will be used. Otherwise if the logger only has or inherited a resource bundle name, then that resource bundle name will be mapped to a {@code ResourceBundle} object, using the default Locale at the time of logging. When mapping resource bundle names to {@code ResourceBundle} objects, the logger will first try to use the Thread's {@linkplain java.lang.Thread#getContextClassLoader() context class loader} to map the given resource bundle name to a {@code ResourceBundle}. If the thread context class loader is {@code null}, it will try the {@linkplain java.lang.ClassLoader#getSystemClassLoader() system class loader} instead. If the {@code ResourceBundle} is still not found, it will use the class loader of the first caller of the {@link #getLogger(java.lang.String, java.lang.String) getLogger} factory method. Formatting (including localization) is the responsibility of the output Handler, which will typically call a Formatter. Note that formatting need not occur synchronously. It may be delayed until a LogRecord is actually written to an external sink. The logging methods are grouped in five main categories: There are a set of \"log\" methods that take a log level, a message string, and optionally some parameters to the message string. There are a set of \"logp\" methods (for \"log precise\") that are like the \"log\" methods, but also take an explicit source class name and method name. There are a set of \"logrb\" method (for \"log with resource bundle\") that are like the \"logp\" method, but also take an explicit resource bundle object for use in localizing the log message. There are convenience methods for tracing method entries (the \"entering\" methods), method returns (the \"exiting\" methods) and throwing exceptions (the \"throwing\" methods). Finally, there are a set of convenience methods for use in the very simplest cases, when a developer simply wants to log a simple string at a given log level. These methods are named after the standard Level names (\"severe\", \"warning\", \"info\", etc.) and take a single argument, a message string. For the methods that do not take an explicit source name and method name, the Logging framework will make a \"best effort\" to determine which class and method called into the logging method. However, it is important to realize that this automatically inferred information may only be approximate (or may even be quite wrong!). Virtual machines are allowed to do extensive optimizations when JITing and may entirely remove stack frames, making it impossible to reliably locate the calling class and method. All methods on Logger are multi-thread safe. Subclassing Information: Note that a LogManager class may provide its own implementation of named Loggers for any point in the namespace. Therefore, any subclasses of Logger (unless they are implemented in conjunction with a new LogManager class) should take care to obtain a Logger instance from the LogManager class and should delegate operations such as \"isLoggable\" and \"log(LogRecord)\" to that instance. Note that in order to intercept all logging output, subclasses need only override the log(LogRecord) method. All the other logging methods are implemented as calls on this log(LogRecord) method."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.BasicScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.UsernamePasswordCredentials"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.BasicScheme.authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/BasicScheme.html",
      "comment": "When the input is true, the tocken should be trusted.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces basic authorization string for the given set of {@link Credentials}.",
        "class": "Basic authentication scheme as defined in RFC 2617."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.LocalizedMessage.getParameters",
      "parameters": [],
      "signature": "java.lang.Object[] org.apache.logging.log4j.message.LocalizedMessage.getParameters()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.LocalizedMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.servlet.tags.UrlTag.createQueryString",
      "parameters": [
        "java.util.List",
        "java.util.Set",
        "boolean"
      ],
      "signature": "java.lang.String org.springframework.web.servlet.tags.UrlTag.createQueryString(java.util.List, java.util.Set, boolean)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/tags/UrlTag.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Build the query string from available parameters that have not already been applied as template params. The names and values of parameters are URL encoded.",
        "class": "JSP tag for creating URLs. Modeled after the JSTL c:url tag with backwards compatibility in mind. Enhancements to the JSTL functionality include: URL encoded template URI variables HTML/XML escaping of URLs JavaScript escaping of URLs Template URI variables are indicated in the {@link #setValue(String) 'value'} attribute and marked by braces '{variableName}'. The braces and attribute name are replaced by the URL encoded value of a parameter defined with the spring:param tag in the body of the url tag. If no parameter is available the literal value is passed through. Params matched to template variables will not be added to the query string. Use of the spring:param tag for URI template variables is strongly recommended over direct EL substitution as the values are URL encoded. Failure to properly encode URL can leave an application vulnerable to XSS and other injection attacks. URLs can be HTML/XML escaped by setting the {@link #setHtmlEscape(boolean) 'htmlEscape'} attribute to 'true'. Detects an HTML escaping setting, either on this tag instance, the page level, or the {@code web.xml} level. The default is 'false'. When setting the URL value into a variable, escaping is not recommended. Example usage: \n   \n  Results in: {@code /currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl}"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "long java.sql.Statement.executeLargeUpdate(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.PortletRequest.getRemoteUser",
      "parameters": [],
      "signature": "java.lang.String javax.portlet.PortletRequest.getRemoteUser()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.PortletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.views.jsp.ui.TextFieldTag.getBean",
      "parameters": [
        "com.opensymphony.xwork2.util.ValueStack",
        "javax.servlet.http.HttpServletRequest",
        "javax.servlet.http.HttpServletResponse"
      ],
      "signature": "org.apache.struts2.components.Component org.apache.struts2.views.jsp.ui.TextFieldTag.getBean(com.opensymphony.xwork2.util.ValueStack, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.views.jsp.ui.TextFieldTag",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.struts2.components.Component",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.methods.RequestBuilder.options",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.apache.http.client.methods.RequestBuilder org.apache.http.client.methods.RequestBuilder.options(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.methods.RequestBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.client.methods.RequestBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "kotlin.io.FilesKt.createTempFile",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.io.File"
      ],
      "signature": "java.io.File kotlin.io.FilesKt.createTempFile(java.lang.String, java.lang.String, java.io.File)",
      "framework": "",
      "link": "",
      "comment": "kotlin.io.FilesKt",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.File",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "kotlin-stdlib-1.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.updateObject",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "int"
      ],
      "signature": "void com.mysql.jdbc.ResultSetImpl.updateObject(java.lang.String, java.lang.Object, int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection",
      "parameters": [
        "char[]",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "boolean",
        "com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator",
        "int"
      ],
      "signature": "com.opensymphony.xwork2.util.Collection com.opensymphony.xwork2.util.TextParseUtil.translateVariablesCollection(char[], java.lang.String, com.opensymphony.xwork2.util.ValueStack, boolean, com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator, int)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "com.opensymphony.xwork2.util.Collection",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.ReusableObjectMessage.toString",
      "parameters": [],
      "signature": "java.lang.String org.apache.logging.log4j.message.ReusableObjectMessage.toString()",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.ReusableObjectMessage",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.setDateHeader",
      "parameters": [
        "java.lang.String",
        "long"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.setDateHeader(java.lang.String, long)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to call setDateHeader(String name, long date) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpFields.get",
      "parameters": [
        "org.eclipse.jetty.http.HttpHeader"
      ],
      "signature": "java.lang.String org.eclipse.jetty.http.HttpFields.get(org.eclipse.jetty.http.HttpHeader)",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpFields",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter.addAttribute",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void org.apache.struts2.interceptor.debugging.PrettyPrintWriter.addAttribute(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.interceptor.debugging.PrettyPrintWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.encodeForJavaScript",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.encodeForJavaScript(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode data for insertion inside a data value or function argument in JavaScript. Including user data directly inside a script is quite dangerous. Great care must be taken to prevent including user data directly into script code itself, as no amount of encoding will prevent attacks there. Please note there are some JavaScript functions that can never safely receive untrusted data as input – even if the user input is encoded. For example:",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.codehaus.plexus.util.FileUtils.removePath",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.codehaus.plexus.util.FileUtils.removePath(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.codehaus.plexus.util.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.crypto.password.StandardPasswordEncoder.encode",
      "parameters": [
        "java.lang.CharSequence",
        "byte[]"
      ],
      "signature": "java.lang.String org.springframework.security.crypto.password.StandardPasswordEncoder.encode(java.lang.CharSequence, byte[])",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/crypto/password/StandardPasswordEncoder.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode the raw password. Generally, a good encoding algorithm applies a SHA-1 or greater hash combined with an 8-byte or greater randomly generated salt.",
        "class": "A standard {@code PasswordEncoder} implementation that uses SHA-256 hashing with 1024 iterations and a random 8-byte random salt value. It uses an additional system-wide secret value to provide additional protection. The digest algorithm is invoked on the concatenated bytes of the salt, secret and password. If you are developing a new system, {@link org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder} is a better choice both in terms of security and interoperability with other languages."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Formatter.format",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.util.Formatter java.util.Formatter.format(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.util.Formatter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.util.Formatter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xml.serialize.DOMSerializerImpl._getXmlEncoding",
      "parameters": [
        "org.w3c.dom.Node"
      ],
      "signature": "java.lang.String org.apache.xml.serialize.DOMSerializerImpl._getXmlEncoding(org.w3c.dom.Node)",
      "framework": "",
      "link": "",
      "comment": "org.apache.xml.serialize.DOMSerializerImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.IOUtils.write",
      "parameters": [
        "char[]",
        "java.io.OutputStream",
        "java.lang.String"
      ],
      "signature": "void org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.IOUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.UrlPathHelper.decodeRequestString",
      "parameters": [
        "javax.servlet.http.HttpServletRequest",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.UrlPathHelper.decodeRequestString(javax.servlet.http.HttpServletRequest, java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/3.2.2.RELEASE_to_4.0.0.M1/Spring%20Framework%203.2.2.RELEASE/org/springframework/web/util/UrlPathHelper.html",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Decode the given source string with a URLDecoder. The encoding will be taken from the request, falling back to the default \"ISO-8859-1\". The default implementation uses URLDecoder.decode(input, enc).",
        "class": "Helper class for URL path matching. Provides support for URL paths in RequestDispatcher includes and support for consistent URL decoding. Used by {@link org.springframework.web.servlet.handler.AbstractUrlHandlerMapping}, {@link org.springframework.web.servlet.mvc.multiaction.AbstractUrlMethodNameResolver} and {@link org.springframework.web.servlet.support.RequestContext} for path matching and/or URI determination."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseCompression",
      "parameters": [
        "boolean"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.setUseCompression(boolean)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.jndi.ldap.LdapCtx.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration com.sun.jndi.ldap.LdapCtx.search(java.lang.String, java.lang.String, javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "com.sun.jndi.ldap.LdapCtx",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sun-jndi-ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.ResultSet.getNString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String java.sql.ResultSet.getNString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "java.sql.ResultSet",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forXmlComment",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forXmlComment(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encoder for XML comments. NOT FOR USE WITH (X)HTML CONTEXTS. (X)HTML comments may be interpreted by browsers as something other than a comment, typically in vendor specific extensions (e.g. {@code }). For (X)HTML it is recommend that unsafe content never be included in a comment. The caller must provide the comment start and end sequences. This method replaces all invalid XML characters with spaces, and replaces the \"--\" sequence (which is invalid in XML comments) with \"-~\" (hyphen-tilde). This encoding behavior may change in future releases. If the comments need to be decoded, the caller will need to come up with their own encode/decode system.      out.println(\"\");\n     out.println(\"\");\n     out.println(\"\");\n     out.println(\"\");",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "net.sourceforge.pebble.domain.Comment.isAuthenticated",
      "parameters": [],
      "signature": "boolean net.sourceforge.pebble.domain.Comment.isAuthenticated()",
      "framework": "pebble",
      "link": "http://help.collab.net/index.jsp?topic=/iaf-700/pebble-soap-javadocs/net/sourceforge/pebble/domain/Comment.html",
      "comment": "Returnes whether the program is authenticated.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Represents a blog comment."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.MysqlParameterMetadata.getParameterType",
      "parameters": [
        "int"
      ],
      "signature": "int com.mysql.jdbc.MysqlParameterMetadata.getParameterType(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.MysqlParameterMetadata",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.impl.Log4JLogger.isInfoEnabled",
      "parameters": [],
      "signature": "boolean org.apache.commons.logging.impl.Log4JLogger.isInfoEnabled()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.impl.Log4JLogger",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.warn",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.log4j.Category.warn(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.StringEscapeUtils.escapeXml",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang3.StringEscapeUtils.escapeXml(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Escapes the characters in a {@code String} using XML entities. For example: {@code \"bread\" & \"butter\"} => {@code \"bread\" & \"butter\"}. Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities. Note that Unicode characters greater than 0x7f are as of 3.0, no longer escaped. If you still wish this functionality, you can achieve it via the following: {@code StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );}",
        "class": "Escapes and unescapes {@code String}s for Java, Java Script, HTML and XML. #ThreadSafe#"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "commons-lang3-3.10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.internal.SessionImpl.createQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.Class",
        "javax.persistence.criteria.Selection",
        "org.hibernate.jpa.spi.HibernateEntityManagerImplementor$QueryOptions"
      ],
      "signature": "org.hibernate.query.spi.QueryImplementor org.hibernate.internal.SessionImpl.createQuery(java.lang.String, java.lang.Class, javax.persistence.criteria.Selection, org.hibernate.jpa.spi.HibernateEntityManagerImplementor$QueryOptions)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Used during \"compiling\" a JPA criteria query.",
        "class": "Concrete implementation of a Session. Exposes two interfaces: {@link org.hibernate.Session} to the application {@link org.hibernate.engine.spi.SessionImplementor} to other Hibernate components (SPI) This class is not thread-safe."
      },"return": "org.hibernate.query.spi.QueryImplementor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-5.2.10.Final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getTimestamp",
      "parameters": [
        "java.lang.String",
        "java.util.Calendar"
      ],
      "signature": "java.sql.Timestamp com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getTimestamp(java.lang.String, java.util.Calendar)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Timestamp",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "long java.sql.PreparedStatement.executeLargeUpdate(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.logging.log4j.message.ParameterFormatter.countArgumentPlaceholders3",
      "parameters": [
        "char[]",
        "int",
        "int[]"
      ],
      "signature": "int org.apache.logging.log4j.message.ParameterFormatter.countArgumentPlaceholders3(char[], int, int[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.logging.log4j.message.ParameterFormatter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequestWrapper.getAuthType",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequestWrapper.getAuthType()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return getAuthType() on the wrapped request object.",
        "class": "Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.sendError",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.sendError(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponse",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletRequestImpl.access$000",
      "parameters": [
        "org.apache.xmlrpc.webserver.HttpServletRequestImpl"
      ],
      "signature": "int org.apache.xmlrpc.webserver.HttpServletRequestImpl.access$000(org.apache.xmlrpc.webserver.HttpServletRequestImpl)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletRequestImpl.html",
      "comment": "Counter example for sanitizer (implicit method)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.Field.getFullOriginalName",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.Field.getFullOriginalName()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.Field",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.mock.web.MockBodyContent.println",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void org.springframework.mock.web.MockBodyContent.println(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/mock/web/MockBodyContent.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Print a String and then terminate the line. This method behaves as though it invokes {@link #print(String)} and then {@link #println()}.",
        "class": "Mock implementation of the {@link javax.servlet.jsp.tagext.BodyContent} class. Used for testing the web framework; only necessary for testing applications when testing custom JSP tags."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ConnectionPropertiesImpl.getLogSlowQueries",
      "parameters": [],
      "signature": "boolean com.mysql.jdbc.ConnectionPropertiesImpl.getLogSlowQueries()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ConnectionPropertiesImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeUpdate",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "int java.sql.Statement.executeUpdate(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.impl.auth.NegotiateScheme.authenticate",
      "parameters": [
        "org.apache.http.auth.Credentials",
        "org.apache.http.HttpRequest",
        "org.apache.http.protocol.HttpContext"
      ],
      "signature": "org.apache.http.Header org.apache.http.impl.auth.NegotiateScheme.authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/auth/NegotiateScheme.html",
      "comment": "Produces an authentication string for the given credentials.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces Negotiate authorization Header based on token created by processChallenge.",
        "class": "SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism) authentication scheme."
      },"return": "org.apache.http.Header",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.slf4j.Logger.error",
      "parameters": [
        "org.slf4j.Marker",
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void org.slf4j.Logger.error(org.slf4j.Marker, java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.slf4j.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "slf4j-api-2.0.6.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getRemoteHost",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getRemoteHost()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.OpaqueUriComponents.encode",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.web.util.UriComponents org.springframework.web.util.OpaqueUriComponents.encode(java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/3.2.8.RELEASE_to_3.2.9.RELEASE/Spring%20Framework%203.2.8.RELEASE/org/springframework/web/util/OpaqueUriComponents.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode all URI components using their specific encoding rules, and returns the result as a new {@code UriComponents} instance.",
        "class": "Extension of {@link UriComponents} for opaque URIs."
      },"return": "org.springframework.web.util.UriComponents",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf",
      "parameters": [
        "java.lang.Exception"
      ],
      "signature": "void org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.TaggedOutputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.hibernate.Session.createSQLQuery",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.hibernate.SQLQuery org.hibernate.Session.createSQLQuery(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.hibernate.Session",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.hibernate.SQLQuery",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "hibernate-core-4.2.4.final.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.StatementWrapper.getUpdateCount",
      "parameters": [],
      "signature": "int com.mysql.jdbc.jdbc2.optional.StatementWrapper.getUpdateCount()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.StatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.logging.Log.warn",
      "parameters": [
        "java.lang.Object",
        "java.lang.Throwable"
      ],
      "signature": "void org.apache.commons.logging.Log.warn(java.lang.Object, java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.logging.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-commons.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequest.getServerName",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.ServletRequest.getServerName()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.ServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.replaceAll",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.lang.String.replaceAll(java.lang.String, java.lang.String)",
      "framework": "generaljava",
      "link": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0,
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink",
        "sanitizer"
      ],
      "cwe": [
        "CWE306",
        "CWE89",
        "CWE79",
        "CWE78",
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str{@code .replaceAll(}regex{@code ,} repl{@code )} yields exactly the same result as the expression {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile compile}(regex).{@link java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(str).{@link java.util.regex.Matcher#replaceAll replaceAll}(repl) Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}. Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special meaning of these characters, if desired.",
        "class": "The {@code String} class represents character strings. All string literals in Java programs, such as {@code \"abc\"}, are implemented as instances of this class. Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:      String str = \"abc\";\n is equivalent to:      char data[] = {'a', 'b', 'c'};\n     String str = new String(data);\n Here are some more examples of how strings can be used:      System.out.println(\"abc\");\n     String cde = \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c = \"abc\".substring(2,3);\n     String d = cde.substring(1, 2);\n The class {@code String} includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the {@code StringBuilder}(or {@code StringBuffer}) class and its {@code append} method. String conversions are implemented through the method {@code toString}, defined by {@code Object} and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, The Java Language Specification. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown. A {@code String} represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the {@code Character} class for more information). Index values refer to {@code char} code units, so a supplementary character uses two positions in a {@code String}. The {@code String} class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., {@code char} values)."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.FileUtils.copyDirectory",
      "parameters": [
        "java.io.File",
        "java.io.File",
        "java.io.FileFilter",
        "boolean"
      ],
      "signature": "void org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.FileUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getQueryString",
      "parameters": [],
      "signature": "java.lang.String javax.servlet.http.HttpServletRequest.getQueryString()",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE89",
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.setStatus",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.setStatus(int, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.servlet.http.HttpServletResponseWrapper",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.servlet.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.config.RequestConfig.copy",
      "parameters": [
        "org.apache.http.client.config.RequestConfig"
      ],
      "signature": "org.apache.http.client.config.RequestConfig$Builder org.apache.http.client.config.RequestConfig.copy(org.apache.http.client.config.RequestConfig)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.config.RequestConfig",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.client.config.RequestConfig$Builder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBytes",
      "parameters": [
        "int"
      ],
      "signature": "byte[] com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper.getBytes(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.format.datetime.joda.DateTimeParser.parse",
      "parameters": [
        "java.lang.String",
        "java.util.Locale"
      ],
      "signature": "org.joda.time.DateTime org.springframework.format.datetime.joda.DateTimeParser.parse(java.lang.String, java.util.Locale)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/format/datetime/joda/DateTimeParser.html",
      "comment": "Counter example for sources.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Parse a text String to produce a T.",
        "class": "Parses Joda {@link DateTime} instances using a {@link DateTimeFormatter}."
      },"return": "org.joda.time.DateTime",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.log4j.Category.error",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "void org.apache.log4j.Category.error(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "org.apache.log4j.Category",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "apache-logging-log4j.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.JDBC4ResultSet.getSQLXML",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.sql.SQLXML com.mysql.jdbc.JDBC4ResultSet.getSQLXML(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.JDBC4ResultSet",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.SQLXML",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.InitialDirContext.search",
      "parameters": [
        "javax.naming.Name",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration javax.naming.directory.InitialDirContext.search(javax.naming.Name, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "javax.naming.directory.InitialDirContext",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jndi-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Properties.loadFromXML",
      "parameters": [
        "java.io.InputStream"
      ],
      "signature": "void java.util.Properties.loadFromXML(java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Loads all of the properties represented by the XML document on the specified input stream into this properties table. The XML document must have the following DOCTYPE declaration:  \n Furthermore, the document must satisfy the properties DTD described above. An implementation is required to read XML documents that use the \"{@code UTF-8}\" or \"{@code UTF-16}\" encoding. An implementation may support additional encodings. The specified stream is closed after this method returns.",
        "class": "The {@code Properties} class represents a persistent set of properties. The {@code Properties} can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string. A property list can contain another property list as its \"defaults\"; this second property list is searched if the property key is not found in the original property list. Because {@code Properties} inherits from {@code Hashtable}, the {@code put} and {@code putAll} methods can be applied to a {@code Properties} object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not {@code Strings}. The {@code setProperty} method should be used instead. If the {@code store} or {@code save} method is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key or value, the call will fail. Similarly, the call to the {@code propertyNames} or {@code list} method will fail if it is called on a \"compromised\" {@code Properties} object that contains a non-{@code String} key. The {@link #load(java.io.Reader) load(Reader)} / {@link #store(java.io.Writer, java.lang.String) store(Writer, String)} methods load and store properties from and to a character based stream in a simple line-oriented format specified below. The {@link #load(java.io.InputStream) load(InputStream)} / {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)} methods work the same way as the load(Reader)/store(Writer, String) pair, except the input/output stream is encoded in ISO 8859-1 character encoding. Characters that cannot be directly represented in this encoding can be written using Unicode escapes as defined in section 3.3 of The Java™ Language Specification; only a single 'u' character is allowed in an escape sequence. The native2ascii tool can be used to convert property files to and from other character encodings. The {@link #loadFromXML(InputStream)} and {@link #storeToXML(OutputStream, String, String)} methods load and store properties in a simple XML format. By default the UTF-8 character encoding is used, however a specific encoding may be specified if required. Implementations are required to support UTF-8 and UTF-16 and may support other encodings. An XML properties document has the following DOCTYPE declaration:  \n Note that the system URI (http://java.sun.com/dtd/properties.dtd) is not accessed when exporting or importing properties; it merely serves as a string to uniquely identify the DTD, which is:     \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n This class is thread-safe: multiple threads can share a single Properties object without the need for external synchronization."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.ValueStack.findValue",
      "parameters": [
        "java.lang.String",
        "java.lang.Class",
        "boolean"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.ValueStack.findValue(java.lang.String, java.lang.Class, boolean)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.ValueStack",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getStatementComment",
      "parameters": [],
      "signature": "java.lang.String com.mysql.jdbc.jdbc2.optional.ConnectionWrapper.getStatementComment()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.ConnectionWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.query",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.getBytes",
      "parameters": [
        ""
      ],
      "signature": "byte[] java.lang.String.getBytes()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.query",
      "parameters": [
        "boolean",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletRequestWrapper.setAttribute",
      "parameters": [
        "java.lang.String",
        "java.lang.Object"
      ],
      "signature": "void javax.servlet.ServletRequestWrapper.setAttribute(java.lang.String, java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return setAttribute(String name, Object o) on the wrapped request object.",
        "class": "Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped request object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tomcat-5.5-servlet-api.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.debug",
      "parameters": [
        "java.lang.Throwable",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.debug(java.lang.Throwable, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.auth.NTLMScheme.authenticate",
      "parameters": [
        "org.apache.commons.httpclient.Credentials",
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "java.lang.String org.apache.commons.httpclient.auth.NTLMScheme.authenticate(org.apache.commons.httpclient.Credentials, org.apache.commons.httpclient.HttpMethod)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/auth/NTLMScheme.html",
      "comment": "Depricated method. The credentials are provided. The authentication string is returned.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Produces NTLM authorization string for the given set of {@link Credentials}.",
        "class": "An implementation of the Microsoft proprietary NTLM authentication scheme. For a detailed explanation of the NTLM scheme please see http://davenport.sourceforge.net/ntlm.html."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetImpl.getObject",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object com.mysql.jdbc.ResultSetImpl.getObject(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentialsUnsynchronized",
      "parameters": [
        "com.google.api.client.http.HttpTransport"
      ],
      "signature": "com.google.auth.oauth2.GoogleCredentials com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)",
      "framework": "oauth",
      "link": "https://github.com/google/google-auth-library-java/blob/master/oauth2_http/java/com/google/auth/oauth2/DefaultCredentialsProvider.java",
      "comment": "Source training set",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE862"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Provides the Application Default Credential from the environment. An instance represents the per-process state used to get and cache the credential and allows overriding the state and environment for testing purposes."
      },"return": "com.google.auth.oauth2.GoogleCredentials",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forHtmlAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forHtmlAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This method encodes for HTML text attributes. Example JSP Usage      \n Encoding Table Input Result {@code &} {@code &} {@code }) is not required for attributes. Numeric encoding is used for double-quote character ({@code \"}) as it shorter than the also valid {@code \"}. Carriage return (U+0D), line-feed (U+0A), horizontal tab (U+09) and space (U+20) are valid in quoted attributes and in block in an unescaped form. Surrogate pairs are passed through only if valid. Characters that are not valid according to the XML specification are replaced by a space character as they could lead to parsing errors. In particular only {@code #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]} are considered valid.",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.Text.end",
      "parameters": [
        "java.io.Writer",
        "java.lang.String"
      ],
      "signature": "boolean org.apache.struts2.components.Text.end(java.io.Writer, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.Text",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.pmw.tinylog.Logger.error",
      "parameters": [
        "java.lang.Throwable",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "void org.pmw.tinylog.Logger.error(java.lang.Throwable, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.pmw.tinylog.Logger",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "tinylog-1.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setCharacterStream",
      "parameters": [
        "int",
        "java.io.Reader"
      ],
      "signature": "void com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper.setCharacterStream(int, java.io.Reader)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.jdbc2.optional.JDBC4CallableStatementWrapper",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.PreparedStatement.execute",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "boolean java.sql.PreparedStatement.execute(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.PreparedStatement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.printf",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintStream java.io.PrintStream.printf(java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintStream",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetRow.getNativeTimestamp",
      "parameters": [
        "byte[]",
        "int",
        "int",
        "java.util.Calendar",
        "java.util.TimeZone",
        "boolean",
        "com.mysql.jdbc.ConnectionImpl",
        "com.mysql.jdbc.ResultSetImpl"
      ],
      "signature": "java.sql.Timestamp com.mysql.jdbc.ResultSetRow.getNativeTimestamp(byte[], int, int, java.util.Calendar, java.util.TimeZone, boolean, com.mysql.jdbc.ConnectionImpl, com.mysql.jdbc.ResultSetImpl)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.sql.Timestamp",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang3.ClassUtils.getClass",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Class org.apache.commons.lang3.ClassUtils.getClass(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.lang3.ClassUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.execute",
      "parameters": [
        "java.lang.String",
        "int[]"
      ],
      "signature": "boolean java.sql.Statement.execute(java.lang.String, int[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.sun.jndi.ldap.LdapCtx.search",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.Object[]",
        "javax.naming.directory.SearchControls"
      ],
      "signature": "javax.naming.NamingEnumeration com.sun.jndi.ldap.LdapCtx.search(java.lang.String, java.lang.String, java.lang.Object[], javax.naming.directory.SearchControls)",
      "framework": "",
      "link": "",
      "comment": "com.sun.jndi.ldap.LdapCtx",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE90"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.naming.NamingEnumeration",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "sun-jndi-ldap.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.httpclient.HttpMethodDirector.authenticateHost",
      "parameters": [
        "org.apache.commons.httpclient.HttpMethod"
      ],
      "signature": "void org.apache.commons.httpclient.HttpMethodDirector.authenticateHost(org.apache.commons.httpclient.HttpMethod)",
      "framework": "apache",
      "link": "https://hc.apache.org/httpclient-3.x/xref/org/apache/commons/httpclient/HttpMethodDirector.html",
      "comment": "The authentication string is added to the http method.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-safe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Handles the process of executing a method including authentication, redirection and retries."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.delete",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "int android.database.sqlite.SQLiteDatabase.delete(java.lang.String, java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.portlet.ClientDataRequest.getReader",
      "parameters": [],
      "signature": "java.io.BufferedReader javax.portlet.ClientDataRequest.getReader()",
      "framework": "",
      "link": "",
      "comment": "javax.portlet.ClientDataRequest",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.BufferedReader",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "portlet-2.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.message.BasicHeaderValueFormatter.estimateParametersLen",
      "parameters": [
        "org.apache.http.NameValuePair[]"
      ],
      "signature": "int org.apache.http.message.BasicHeaderValueFormatter.estimateParametersLen(org.apache.http.NameValuePair[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.message.BasicHeaderValueFormatter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.jboss.seam.log.Log.warn",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object[]"
      ],
      "signature": "void org.jboss.seam.log.Log.warn(java.lang.Object, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "org.jboss.seam.log.Log",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE117"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jboss-seam.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "long java.sql.Statement.executeLargeUpdate(java.lang.String, java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.rawQueryWithFactory",
      "parameters": [
        "android.database.sqlite.SQLiteDatabase$CursorFactory",
        "java.lang.String",
        "java.lang.String[]",
        "java.lang.String",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.authentication.jaas.SecurityContextLoginModule.logout",
      "parameters": [],
      "signature": "boolean org.springframework.security.authentication.jaas.SecurityContextLoginModule.logout()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/authentication/jaas/SecurityContextLoginModule.html",
      "comment": "Puts the program is an unauthenticated state.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "auth-unsafe-state"
      ],
      "cwe": [
        "CWE862",
        "CWE306",
        "CWE863"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Log out the Subject.",
        "class": "An implementation of {@link LoginModule} that uses a Spring Security {@link org.springframework.security.core.context.SecurityContext SecurityContext} to provide authentication. This LoginModule provides opposite functionality to the {@link JaasAuthenticationProvider} API, and should not really be used in conjunction with it. The {@link JaasAuthenticationProvider} allows Spring Security to authenticate against Jaas. The SecurityContextLoginModule allows a Jaas based application to authenticate against Spring Security. If there is no Authentication in the {@link SecurityContextHolder} the login() method will throw a LoginException by default. This functionality can be changed with the ignoreMissingAuthentication option by setting it to \"true\". Setting ignoreMissingAuthentication=true will tell the SecurityContextLoginModule to simply return false and be ignored if the authentication is null."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.sendMessage",
      "parameters": [
        "org.springframework.web.socket.WebSocketMessage"
      ],
      "signature": "void org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator.sendMessage(org.springframework.web.socket.WebSocketMessage)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/4.3.9.RELEASE/javadoc-api/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Send a WebSocket message: either {@link TextMessage} or {@link BinaryMessage}.",
        "class": "Wrap a {@link org.springframework.web.socket.WebSocketSession WebSocketSession} to guarantee only one thread can send messages at a time. If a send is slow, subsequent attempts to send more messages from other threads will not be able to acquire the flush lock and messages will be buffered instead -- at that time, the specified buffer-size limit and send-time limit will be checked and the session closed if the limits are exceeded."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.Object",
        "java.lang.Object",
        "java.util.Map"
      ],
      "signature": "void com.opensymphony.xwork2.ognl.OgnlReflectionProvider.setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.ognl.OgnlReflectionProvider",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.getBigDecimal",
      "parameters": [
        "int"
      ],
      "signature": "java.math.BigDecimal com.mysql.jdbc.CallableStatement.getBigDecimal(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.math.BigDecimal",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.Message.setDisposition",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.mail.Message.setDisposition(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.beanutils.locale.LocaleBeanUtilsBean.getProperty",
      "parameters": [
        "java.lang.Object",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.beanutils.locale.LocaleBeanUtilsBean.getProperty(java.lang.Object, java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.beanutils.locale.LocaleBeanUtilsBean",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.socket.client.standard.EndpointConnectionManager.isConnected",
      "parameters": [],
      "signature": "boolean org.springframework.web.socket.client.standard.EndpointConnectionManager.isConnected()",
      "framework": "spring",
      "link": "",
      "comment": "Returnes whether the program is connected.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "auth-no-change"
      ],
      "cwe": [
        "CWE306"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "A WebSocket connection manager that is given a URI, an {@link Endpoint}, connects to a WebSocket server through the {@link #start()} and {@link #stop()} methods. If {@link #setAutoStartup(boolean)} is set to {@code true} this will be done automatically when the Spring ApplicationContext is refreshed."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.tags.ELEncodeFunctions.encodeForCSS",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.tags.ELEncodeFunctions.encodeForCSS(java.lang.String)",
      "framework": "owaspesapi",
      "link": "https://static.javadoc.io/org.owasp.esapi/esapi/2.0.1/org/owasp/esapi/Encoder.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Encode string for use in CSS.",
        "class": "Static encoder methods for JSP EL expression functions."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.MultipartStream.readHeaders",
      "parameters": [],
      "signature": "java.lang.String org.apache.commons.fileupload.MultipartStream.readHeaders()",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.MultipartStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponseWrapper.sendRedirect",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponseWrapper.sendRedirect(java.lang.String)",
      "framework": "javageneral",
      "link": "https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponseWrapper.html",
      "comment": "",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE601"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "The default behavior of this method is to return sendRedirect(String location) on the wrapped response object.",
        "class": "Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling through to the wrapped response object."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintWriter.format",
      "parameters": [
        "java.util.Locale",
        "java.lang.String",
        "java.lang.Object[]"
      ],
      "signature": "java.io.PrintWriter java.io.PrintWriter.format(java.util.Locale, java.lang.String, java.lang.Object[])",
      "framework": "",
      "link": "",
      "comment": "java.io.PrintWriter",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.io.PrintWriter",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.entity.BasicHttpEntity.writeTo",
      "parameters": [
        "java.io.OutputStream"
      ],
      "signature": "void org.apache.http.entity.BasicHttpEntity.writeTo(java.io.OutputStream)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.entity.BasicHttpEntity",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.CopyUtils.copy",
      "parameters": [
        "java.lang.String",
        "java.io.Writer"
      ],
      "signature": "void org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.Writer)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.CopyUtils",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.eclipse.jetty.http.HttpField.getValues",
      "parameters": [],
      "signature": "java.lang.String[] org.eclipse.jetty.http.HttpField.getValues()",
      "framework": "",
      "link": "",
      "comment": "org.eclipse.jetty.http.HttpField",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "jetty-http-11.0.14.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Token.mergeRanges",
      "parameters": [
        "com.google.gxp.org.apache.xerces.impl.xpath.regex.Token"
      ],
      "signature": "void com.google.gxp.org.apache.xerces.impl.xpath.regex.Token.mergeRanges(com.google.gxp.org.apache.xerces.impl.xpath.regex.Token)",
      "framework": "",
      "link": "",
      "comment": "com.google.gxp.org.apache.xerces.impl.xpath.regex.Token",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.context.request.RequestContextListener.requestDestroyed",
      "parameters": [
        "javax.servlet.ServletRequestEvent"
      ],
      "signature": "void org.springframework.web.context.request.RequestContextListener.requestDestroyed(javax.servlet.ServletRequestEvent)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/request/RequestContextListener.html",
      "comment": "Counter example for source",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": "Servlet 2.4+ listener that exposes the request to the current thread, through both {@link org.springframework.context.i18n.LocaleContextHolder} and {@link RequestContextHolder}. To be registered as listener in web.xml. Alternatively, Spring's {@link org.springframework.web.filter.RequestContextFilter} and Spring's {@link org.springframework.web.servlet.DispatcherServlet} also expose the same request context to the current thread. In contrast to this listener, advanced options are available there (e.g. \"threadContextInheritable\"). This listener is mainly for use with third-party servlets, e.g. the JSF FacesServlet. Within Spring's own web support, DispatcherServlet's processing is perfectly sufficient."
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.server.XmlRpcServerWorker.execute",
      "parameters": [
        "org.apache.xmlrpc.XmlRpcRequest"
      ],
      "signature": "java.lang.Object org.apache.xmlrpc.server.XmlRpcServerWorker.execute(org.apache.xmlrpc.XmlRpcRequest)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/XmlRpcServerWorker.html",
      "comment": "Sink",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          0
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79",
        "CWE78"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Performs a synchronous request. The client worker extends this interface with the ability to perform asynchronous requests.",
        "class": "Server specific implementation of {@link XmlRpcWorker}."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.digest.UnixCrypt.dEncrypt",
      "parameters": [
        "int",
        "int",
        "int",
        "int",
        "int",
        "int[]"
      ],
      "signature": "int org.apache.commons.codec.digest.UnixCrypt.dEncrypt(int, int, int, int, int, int[])",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.codec.digest.UnixCrypt",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.beans.factory.support.MethodOverrides.isEmpty",
      "parameters": [],
      "signature": "boolean org.springframework.beans.factory.support.MethodOverrides.isEmpty()",
      "framework": "spring",
      "link": "https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/support/MethodOverrides.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Return whether the set of method overrides is empty.",
        "class": "Set of method overrides, determining which, if any, methods on a managed object the Spring IoC container will override at runtime. The currently supported {@link MethodOverride} variants are {@link LookupOverride} and {@link ReplaceOverride}."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.reference.DefaultEncoder.decodeForHTML",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.reference.DefaultEncoder.decodeForHTML(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Decodes HTML entities.",
        "class": "Reference implementation of the Encoder interface. This implementation takes a whitelist approach to encoding, meaning that everything not specifically identified in a list of \"immune\" characters is encoded."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "esapi-2.0_rc10.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.isMatch",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "boolean org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource.isMatch(java.lang.String, java.lang.String)",
      "framework": "spring",
      "link": "https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.html",
      "comment": "Counter example for authentication (none)",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Return if the given method name matches the mapped name. The default implementation checks for \"xxx\" and \"xxx\" matches.",
        "class": "Stores a list of ConfigAttributes for a method or class signature. This class is the preferred implementation of {@link MethodSecurityMetadataSource} for XML-based definition of method security metadata. To assist in XML-based definition, wildcard support is provided."
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.CallableStatement.fixParameterName",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String com.mysql.jdbc.CallableStatement.fixParameterName(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.CallableStatement",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.struts2.components.ServletUrlRenderer.renderUrl",
      "parameters": [
        "java.io.Writer",
        "org.apache.struts2.components.UrlProvider"
      ],
      "signature": "void org.apache.struts2.components.ServletUrlRenderer.renderUrl(java.io.Writer, org.apache.struts2.components.UrlProvider)",
      "framework": "",
      "link": "",
      "comment": "org.apache.struts2.components.ServletUrlRenderer",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuilder.append",
      "parameters": [
        "java.lang.CharSequence"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.CharSequence)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "Secucheck",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.StringBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.opensymphony.xwork2.util.TextParseUtil.translateVariables",
      "parameters": [
        "char",
        "java.lang.String",
        "com.opensymphony.xwork2.util.ValueStack",
        "java.lang.Class",
        "com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator",
        "int"
      ],
      "signature": "java.lang.Object com.opensymphony.xwork2.util.TextParseUtil.translateVariables(char, java.lang.String, com.opensymphony.xwork2.util.ValueStack, java.lang.Class, com.opensymphony.xwork2.util.TextParseUtil$ParsedValueEvaluator, int)",
      "framework": "",
      "link": "",
      "comment": "com.opensymphony.xwork2.util.TextParseUtil",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "xwork-core-2.2.3.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.ResultSetRow.getNativeLong",
      "parameters": [
        "int"
      ],
      "signature": "long com.mysql.jdbc.ResultSetRow.getNativeLong(int)",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.ResultSetRow",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.format.datetime.joda.PeriodFormatter.parse",
      "parameters": [
        "java.lang.String",
        "java.util.Locale"
      ],
      "signature": "java.lang.Object org.springframework.format.datetime.joda.PeriodFormatter.parse(java.lang.String, java.util.Locale)",
      "framework": "spring",
      "link": "https://github.com/cyejing/spring-framework-yj/blob/master/spring-context/src/main/java/org/springframework/format/datetime/joda/PeriodFormatter.java",
      "comment": "Counter example for sources.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [
          1
        ],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Parse a text String to produce a T.",
        "class": "{@link Formatter} implementation for a Joda-Time {@link Period}, following Joda-Time's parsing rules for a Period."
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.fileupload.util.LimitedInputStream.read",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "int org.apache.commons.fileupload.util.LimitedInputStream.read(byte[], int, int)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.fileupload.util.LimitedInputStream",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.web.util.HtmlUtils.htmlEscapeDecimal",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.web.util.HtmlUtils.htmlEscapeDecimal(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Turn special characters into HTML character references. Handles complete character set defined in HTML 4.01 recommendation. Escapes all special characters to their corresponding numeric reference in decimal format (&#Decimal;). Reference: http://www.w3.org/TR/html4/sgml/entities.html",
        "class": "Utility class for HTML escaping. Escapes and unescapes based on the W3C HTML 4.01 recommendation, handling character entity references. Reference: http://www.w3.org/TR/html4/charset.html For a comprehensive set of String escaping utilities, consider Apache Commons Lang and its StringEscapeUtils class. We are not using that class here to avoid a runtime dependency on Commons Lang just for HTML escaping. Furthermore, Spring's HTML escaping is more flexible and 100% HTML 4.0 compliant."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "spring-web-4.3.9.RELEASE.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.io.output.LockableFileWriter.testLockDir",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "org.apache.commons.io.output.LockableFileWriter",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.encoder.Encode.forJavaScriptAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.encoder.Encode.forJavaScriptAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "This method encodes for JavaScript strings contained within HTML script attributes (such as {@code onclick}). It is NOT safe for use in script blocks. The caller MUST provide the surrounding quotation characters. This method performs the same encode as {@link #forJavaScript(String)} with the exception that / is not escaped. Unless you are interested in saving a few bytes of output or are writing a framework on top of this library, it is recommend that you use {@link #forJavaScript(String)} over this method. Example JSP Usage:     ');\">",
        "class": "Encode -- fluent interface for contextual encoding. Example usage in a JSP:      \" />\n There are two versions of each contextual encoding method. The first takes a {@code String} argument and returns the encoded version as a {@code String}. The second version writes the encoded version directly to a {@code Writer}. Please make sure to read and understand the context that the method encodes for. Encoding for the incorrect context will likely lead to exposing a cross-site scripting vulnerability."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "encoder-1.2.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.client.methods.RequestBuilder.build",
      "parameters": [],
      "signature": "org.apache.http.client.methods.HttpUriRequest org.apache.http.client.methods.RequestBuilder.build()",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.client.methods.RequestBuilder",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.apache.http.client.methods.HttpUriRequest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.http.util.Args.check",
      "parameters": [
        "boolean",
        "java.lang.String"
      ],
      "signature": "void org.apache.http.util.Args.check(boolean, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "org.apache.http.util.Args",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Statement.executeLargeUpdate",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "long java.sql.Statement.executeLargeUpdate(java.lang.String, int)",
      "framework": "",
      "link": "",
      "comment": "java.sql.Statement",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "long",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.xmlrpc.webserver.HttpServletRequestImpl.getRealPath",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.xmlrpc.webserver.HttpServletRequestImpl.getRealPath(java.lang.String)",
      "framework": "apache",
      "link": "https://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/webserver/HttpServletRequestImpl.html",
      "comment": "Counter example for sanitizer.",
      "discovery": "swan",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": true
      },
      "srm": [
        "source"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Gets the real path corresponding to the given virtual path. For example, if path is equal to /index.html, this method will return the absolute file path on the server's filesystem to which a request of the form http://&lt;host&gt;:&lt;port&gt;/&lt;contextPath&gt;/index.html would be mapped, where &lt;contextPath&gt; corresponds to the context path of this ServletContext. The real path returned will be in a form appropriate to the computer and operating system on which the servlet container is running, including the proper path separators. Resources inside the /META-INF/resources directories of JAR files bundled in the application's /WEB-INF/lib directory must be considered only if the container has unpacked them from their containing JAR file, in which case the path to the unpacked location must be returned. This method returns null if the servlet container is unable to translate the given virtual path to a real path.",
        "class": "Stub implementation of a {@link javax.servlet.http.HttpServletRequest} with lots of unimplemented methods. I implemented only those, which are required for testing the {@link org.apache.xmlrpc.webserver.XmlRpcServlet}. Perhaps someone else is adding more at a later time?"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "android.database.sqlite.SQLiteDatabase.rawQuery",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]",
        "android.os.CancellationSignal"
      ],
      "signature": "android.database.Cursor android.database.sqlite.SQLiteDatabase.rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal)",
      "framework": "",
      "link": "",
      "comment": "android.database.sqlite.SQLiteDatabase",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "android.database.Cursor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "android-2.3.1.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "com.mysql.jdbc.StatementImpl.getId",
      "parameters": [],
      "signature": "int com.mysql.jdbc.StatementImpl.getId()",
      "framework": "",
      "link": "",
      "comment": "com.mysql.jdbc.StatementImpl",
      "discovery": "SSCM",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.mail.Message.addHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.mail.Message.addHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URLEncoder.encode",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.net.URLEncoder.encode(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "thecodemaster.com",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sanitizer"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "Translates a string into {@code application/x-www-form-urlencoded} format using a specific encoding scheme. This method uses the supplied encoding scheme to obtain the bytes for unsafe characters. Note: The World Wide Web Consortium Recommendation states that UTF-8 should be used. Not doing so may introduce incompatibilities.",
        "class": "Utility class for HTML form encoding. This class contains static methods for converting a String to the application/x-www-form-urlencoded MIME format. For more information about HTML form encoding, consult the HTML specification. When encoding a String, the following rules apply: The alphanumeric characters \"{@code a}\" through \"{@code z}\", \"{@code A}\" through \"{@code Z}\" and \"{@code 0}\" through \"{@code 9}\" remain the same. The special characters \"{@code .}\", \"{@code -}\", \"{@code *}\", and \"{@code _}\" remain the same. The space character \" \" is converted into a plus sign \"{@code +}\". All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"{@code %xy}\", where xy is the two-digit hexadecimal representation of the byte. The recommended encoding scheme to use is UTF-8. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used. For example using UTF-8 as the encoding scheme the string \"The string ü@foo-bar\" would get converted to \"The+string+%C3%BC%40foo-bar\" because in UTF-8 the character ü is encoded as two bytes C3 (hex) and BC (hex), and the character @ is encoded as one byte 40 (hex)."
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "java-rt-jar-stubs-1.5.0.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
{
      "name": "javax.mail.Part.addHeader",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void javax.mail.Part.addHeader(java.lang.String, java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },{
      "name": "javax.mail.Part.setDescription",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.mail.Part.setDescription(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },
	{
      "name": "javax.mail.Part.setDisposition",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.mail.Part.setDisposition(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "javax.mail.Message",
      "discovery": "find-sec-bugs",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [],
      "known": true,
      "body": null,
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": "javax.mail.jar"
      },
      "usages": [
        {
          "path": "",
           "lineNumber": 0
        }
      ]
    },




    {
      "name": "java.io.File.exists",
      "parameters": [],
      "signature": "boolean java.io.File.exists()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public boolean exists() {\r\n    @SuppressWarnings(\"removal\")\r\n    SecurityManager security = System.getSecurityManager();\r\n    if (security != null) {\r\n        security.checkRead(path);\r\n    }\r\n    if (isInvalid()) {\r\n        return false;\r\n    }\r\n    return fs.hasBooleanAttributes(this, FileSystem.BA_EXISTS);\r\n}",
      "javadoc": {
        "method": "/**\n * Tests whether the file or directory denoted by this abstract pathname\n * exists.\n *\n * @return  {@code true} if and only if the file or directory denoted\n *          by this abstract pathname exists; {@code false} otherwise\n *\n * @throws  SecurityException\n *          If a security manager exists and its {@link\n *          java.lang.SecurityManager#checkRead(java.lang.String)}\n *          method denies read access to the file or directory\n */\n",
        "class": ""
      },"return": "boolean",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.toString",
      "parameters": [],
      "signature": "java.lang.String java.io.File.toString()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String toString() {\r\n    return getPath();\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the pathname string of this abstract pathname.  This is just the\n * string returned by the {@link #getPath} method.\n *\n * @return  The string form of this abstract pathname\n */\n",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.<init>",
      "parameters": [
        "java.io.File",
        "java.lang.String"
      ],
      "signature": "void java.io.File.<init>(java.io.File,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE35",
        "CWE22"
      ],
      "known": false,
      "body": "public File(File parent, String child) {\n        if (child == null) {\n            throw new NullPointerException();\n        }\n        if (parent != null) {\n            if (parent.path.isEmpty()) {\n                this.path = fs.resolve(fs.getDefaultParent(),\n                                       fs.normalize(child));\n            } else {\n                this.path = fs.resolve(parent.path,\n                                       fs.normalize(child));\n            }\n        } else {\n            this.path = fs.normalize(child);\n        }\n        this.prefixLength = fs.prefixLength(this.path);\n    }",
      "javadoc": {
        "method": "/**\n     * Creates a new {@code File} instance from a parent abstract\n     * pathname and a child pathname string.\n     *\n     * <p> If {@code parent} is {@code null} then the new\n     * {@code File} instance is created as if by invoking the\n     * single-argument {@code File} constructor on the given\n     * {@code child} pathname string.\n     *\n     * <p> Otherwise the {@code parent} abstract pathname is taken to\n     * denote a directory, and the {@code child} pathname string is taken\n     * to denote either a directory or a file.  If the {@code child}\n     * pathname string is absolute then it is converted into a relative\n     * pathname in a system-dependent way.  If {@code parent} is the empty\n     * abstract pathname then the new {@code File} instance is created by\n     * converting {@code child} into an abstract pathname and resolving\n     * the result against a system-dependent default directory.  Otherwise each\n     * pathname string is converted into an abstract pathname and the child\n     * abstract pathname is resolved against the parent.\n     *\n     * @param   parent  The parent abstract pathname\n     * @param   child   The child pathname string\n     * @throws  NullPointerException\n     *          If {@code child} is {@code null}\n     */",
        "class": "/**\n * An abstract representation of file and directory pathnames.\n *\n * <p> User interfaces and operating systems use system-dependent <em>pathname\n * strings</em> to name files and directories.  This class presents an\n * abstract, system-independent view of hierarchical pathnames.  An\n * <em>abstract pathname</em> has two components:\n *\n * <ol>\n * <li> An optional system-dependent <em>prefix</em> string,\n *      such as a disk-drive specifier, {@code \"/\"}&nbsp;for the UNIX root\n *      directory, or {@code \"\\\\\\\\\"}&nbsp;for a Microsoft Windows UNC pathname, and\n * <li> A sequence of zero or more string <em>names</em>.\n * </ol>\n *\n * The first name in an abstract pathname may be a directory name or, in the\n * case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name\n * in an abstract pathname denotes a directory; the last name may denote\n * either a directory or a file.  The <em>empty</em> abstract pathname has no\n * prefix and an empty name sequence.\n *\n * <p> The conversion of a pathname string to or from an abstract pathname is\n * inherently system-dependent.  When an abstract pathname is converted into a\n * pathname string, each name is separated from the next by a single copy of\n * the default <em>separator character</em>.  The default name-separator\n * character is defined by the system property {@code file.separator}, and\n * is made available in the public static fields {@link\n * #separator} and {@link #separatorChar} of this class.\n * When a pathname string is converted into an abstract pathname, the names\n * within it may be separated by the default name-separator character or by any\n * other name-separator character that is supported by the underlying system.\n *\n * <p> A pathname, whether abstract or in string form, may be either\n * <em>absolute</em> or <em>relative</em>.  An absolute pathname is complete in\n * that no other information is required in order to locate the file that it\n * denotes.  A relative pathname, in contrast, must be interpreted in terms of\n * information taken from some other pathname.  By default the classes in the\n * {@code java.io} package always resolve relative pathnames against the\n * current user directory.  This directory is named by the system property\n * {@code user.dir}, and is typically the directory in which the Java\n * virtual machine was invoked.\n *\n * <p> The <em>parent</em> of an abstract pathname may be obtained by invoking\n * the {@link #getParent} method of this class and consists of the pathname's\n * prefix and each name in the pathname's name sequence except for the last.\n * Each directory's absolute pathname is an ancestor of any {@code File}\n * object with an absolute abstract pathname which begins with the directory's\n * absolute pathname.  For example, the directory denoted by the abstract\n * pathname {@code \"/usr\"} is an ancestor of the directory denoted by the\n * pathname {@code \"/usr/local/bin\"}.\n *\n * <p> The prefix concept is used to handle root directories on UNIX platforms,\n * and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\n * as follows:\n *\n * <ul>\n *\n * <li> For UNIX platforms, the prefix of an absolute pathname is always\n * {@code \"/\"}.  Relative pathnames have no prefix.  The abstract pathname\n * denoting the root directory has the prefix {@code \"/\"} and an empty\n * name sequence.\n *\n * <li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive\n * specifier consists of the drive letter followed by {@code \":\"} and\n * possibly followed by {@code \"\\\\\"} if the pathname is absolute.  The\n * prefix of a UNC pathname is {@code \"\\\\\\\\\"}; the hostname and the share\n * name are the first two names in the name sequence.  A relative pathname that\n * does not specify a drive has no prefix.\n *\n * </ul>\n *\n * <p> Instances of this class may or may not denote an actual file-system\n * object such as a file or a directory.  If it does denote such an object\n * then that object resides in a <i>partition</i>.  A partition is an\n * operating system-specific portion of storage for a file system.  A single\n * storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\n * contain multiple partitions.  The object, if any, will reside on the\n * partition <a id=\"partName\">named</a> by some ancestor of the absolute\n * form of this pathname.\n *\n * <p> A file system may implement restrictions to certain operations on the\n * actual file-system object, such as reading, writing, and executing.  These\n * restrictions are collectively known as <i>access permissions</i>.  The file\n * system may have multiple sets of access permissions on a single object.\n * For example, one set may apply to the object's <i>owner</i>, and another\n * may apply to all other users.  The access permissions on an object may\n * cause some methods in this class to fail.\n *\n * <p> Instances of the {@code File} class are immutable; that is, once\n * created, the abstract pathname represented by a {@code File} object\n * will never change.\n *\n * <h2>Interoperability with {@code java.nio.file} package</h2>\n *\n * <p> The <a href=\"../../java/nio/file/package-summary.html\">{@code java.nio.file}</a>\n * package defines interfaces and classes for the Java virtual machine to access\n * files, file attributes, and file systems. This API may be used to overcome\n * many of the limitations of the {@code java.io.File} class.\n * The {@link #toPath toPath} method may be used to obtain a {@link\n * Path} that uses the abstract path represented by a {@code File} object to\n * locate a file. The resulting {@code Path} may be used with the {@link\n * java.nio.file.Files} class to provide more efficient and extensive access to\n * additional file operations, file attributes, and I/O exceptions to help\n * diagnose errors when an operation on a file fails.\n *\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.<init>",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.io.File.<init>(java.lang.String,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public File(String parent, String child) {\r\n    if (child == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (parent != null) {\r\n        if (parent.isEmpty()) {\r\n            this.path = fs.resolve(fs.getDefaultParent(), fs.normalize(child));\r\n        } else {\r\n            this.path = fs.resolve(fs.normalize(parent), fs.normalize(child));\r\n        }\r\n    } else {\r\n        this.path = fs.normalize(child);\r\n    }\r\n    this.prefixLength = fs.prefixLength(this.path);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a new {@code File} instance from a parent pathname string\n * and a child pathname string.\n *\n * <p> If {@code parent} is {@code null} then the new\n * {@code File} instance is created as if by invoking the\n * single-argument {@code File} constructor on the given\n * {@code child} pathname string.\n *\n * <p> Otherwise the {@code parent} pathname string is taken to denote\n * a directory, and the {@code child} pathname string is taken to\n * denote either a directory or a file.  If the {@code child} pathname\n * string is absolute then it is converted into a relative pathname in a\n * system-dependent way.  If {@code parent} is the empty string then\n * the new {@code File} instance is created by converting\n * {@code child} into an abstract pathname and resolving the result\n * against a system-dependent default directory.  Otherwise each pathname\n * string is converted into an abstract pathname and the child abstract\n * pathname is resolved against the parent.\n *\n * @param   parent  The parent pathname string\n * @param   child   The child pathname string\n * @throws  NullPointerException\n *          If {@code child} is {@code null}\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.File.<init>",
      "parameters": [
        "java.net.URI"
      ],
      "signature": "void java.io.File.<init>(java.net.URI)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE35",
        "CWE22"
      ],
      "known": false,
      "body": "public File(URI uri) {\n\n        // Check our many preconditions\n        if (!uri.isAbsolute())\n            throw new IllegalArgumentException(\"URI is not absolute\");\n        if (uri.isOpaque())\n            throw new IllegalArgumentException(\"URI is not hierarchical\");\n        String scheme = uri.getScheme();\n        if ((scheme == null) || !scheme.equalsIgnoreCase(\"file\"))\n            throw new IllegalArgumentException(\"URI scheme is not \\\"file\\\"\");\n        if (uri.getRawAuthority() != null)\n            throw new IllegalArgumentException(\"URI has an authority component\");\n        if (uri.getRawFragment() != null)\n            throw new IllegalArgumentException(\"URI has a fragment component\");\n        if (uri.getRawQuery() != null)\n            throw new IllegalArgumentException(\"URI has a query component\");\n        String p = uri.getPath();\n        if (p.isEmpty())\n            throw new IllegalArgumentException(\"URI path component is empty\");\n\n        // Okay, now initialize\n        p = fs.fromURIPath(p);\n        if (File.separatorChar != '/')\n            p = p.replace('/', File.separatorChar);\n        this.path = fs.normalize(p);\n        this.prefixLength = fs.prefixLength(this.path);\n    }",
      "javadoc": {
        "method": "/**\n     * Creates a new {@code File} instance by converting the given\n     * {@code file:} URI into an abstract pathname.\n     *\n     * <p> The exact form of a {@code file:} URI is system-dependent, hence\n     * the transformation performed by this constructor is also\n     * system-dependent.\n     *\n     * <p> For a given abstract pathname <i>f</i> it is guaranteed that\n     *\n     * <blockquote><code>\n     * new File(</code><i>&nbsp;f</i><code>.{@link #toURI()\n     * toURI}()).equals(</code><i>&nbsp;f</i><code>.{@link #getAbsoluteFile() getAbsoluteFile}())\n     * </code></blockquote>\n     *\n     * so long as the original abstract pathname, the URI, and the new abstract\n     * pathname are all created in (possibly different invocations of) the same\n     * Java virtual machine.  This relationship typically does not hold,\n     * however, when a {@code file:} URI that is created in a virtual machine\n     * on one operating system is converted into an abstract pathname in a\n     * virtual machine on a different operating system.\n     *\n     * @param  uri\n     *         An absolute, hierarchical URI with a scheme equal to\n     *         {@code \"file\"}, a non-empty path component, and undefined\n     *         authority, query, and fragment components\n     *\n     * @throws  NullPointerException\n     *          If {@code uri} is {@code null}\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameter do not hold\n     *\n     * @see #toURI()\n     * @see java.net.URI\n     * @since 1.4\n     */",
        "class": "/**\n * An abstract representation of file and directory pathnames.\n *\n * <p> User interfaces and operating systems use system-dependent <em>pathname\n * strings</em> to name files and directories.  This class presents an\n * abstract, system-independent view of hierarchical pathnames.  An\n * <em>abstract pathname</em> has two components:\n *\n * <ol>\n * <li> An optional system-dependent <em>prefix</em> string,\n *      such as a disk-drive specifier, {@code \"/\"}&nbsp;for the UNIX root\n *      directory, or {@code \"\\\\\\\\\"}&nbsp;for a Microsoft Windows UNC pathname, and\n * <li> A sequence of zero or more string <em>names</em>.\n * </ol>\n *\n * The first name in an abstract pathname may be a directory name or, in the\n * case of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name\n * in an abstract pathname denotes a directory; the last name may denote\n * either a directory or a file.  The <em>empty</em> abstract pathname has no\n * prefix and an empty name sequence.\n *\n * <p> The conversion of a pathname string to or from an abstract pathname is\n * inherently system-dependent.  When an abstract pathname is converted into a\n * pathname string, each name is separated from the next by a single copy of\n * the default <em>separator character</em>.  The default name-separator\n * character is defined by the system property {@code file.separator}, and\n * is made available in the public static fields {@link\n * #separator} and {@link #separatorChar} of this class.\n * When a pathname string is converted into an abstract pathname, the names\n * within it may be separated by the default name-separator character or by any\n * other name-separator character that is supported by the underlying system.\n *\n * <p> A pathname, whether abstract or in string form, may be either\n * <em>absolute</em> or <em>relative</em>.  An absolute pathname is complete in\n * that no other information is required in order to locate the file that it\n * denotes.  A relative pathname, in contrast, must be interpreted in terms of\n * information taken from some other pathname.  By default the classes in the\n * {@code java.io} package always resolve relative pathnames against the\n * current user directory.  This directory is named by the system property\n * {@code user.dir}, and is typically the directory in which the Java\n * virtual machine was invoked.\n *\n * <p> The <em>parent</em> of an abstract pathname may be obtained by invoking\n * the {@link #getParent} method of this class and consists of the pathname's\n * prefix and each name in the pathname's name sequence except for the last.\n * Each directory's absolute pathname is an ancestor of any {@code File}\n * object with an absolute abstract pathname which begins with the directory's\n * absolute pathname.  For example, the directory denoted by the abstract\n * pathname {@code \"/usr\"} is an ancestor of the directory denoted by the\n * pathname {@code \"/usr/local/bin\"}.\n *\n * <p> The prefix concept is used to handle root directories on UNIX platforms,\n * and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\n * as follows:\n *\n * <ul>\n *\n * <li> For UNIX platforms, the prefix of an absolute pathname is always\n * {@code \"/\"}.  Relative pathnames have no prefix.  The abstract pathname\n * denoting the root directory has the prefix {@code \"/\"} and an empty\n * name sequence.\n *\n * <li> For Microsoft Windows platforms, the prefix of a pathname that contains a drive\n * specifier consists of the drive letter followed by {@code \":\"} and\n * possibly followed by {@code \"\\\\\"} if the pathname is absolute.  The\n * prefix of a UNC pathname is {@code \"\\\\\\\\\"}; the hostname and the share\n * name are the first two names in the name sequence.  A relative pathname that\n * does not specify a drive has no prefix.\n *\n * </ul>\n *\n * <p> Instances of this class may or may not denote an actual file-system\n * object such as a file or a directory.  If it does denote such an object\n * then that object resides in a <i>partition</i>.  A partition is an\n * operating system-specific portion of storage for a file system.  A single\n * storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\n * contain multiple partitions.  The object, if any, will reside on the\n * partition <a id=\"partName\">named</a> by some ancestor of the absolute\n * form of this pathname.\n *\n * <p> A file system may implement restrictions to certain operations on the\n * actual file-system object, such as reading, writing, and executing.  These\n * restrictions are collectively known as <i>access permissions</i>.  The file\n * system may have multiple sets of access permissions on a single object.\n * For example, one set may apply to the object's <i>owner</i>, and another\n * may apply to all other users.  The access permissions on an object may\n * cause some methods in this class to fail.\n *\n * <p> Instances of the {@code File} class are immutable; that is, once\n * created, the abstract pathname represented by a {@code File} object\n * will never change.\n *\n * <h2>Interoperability with {@code java.nio.file} package</h2>\n *\n * <p> The <a href=\"../../java/nio/file/package-summary.html\">{@code java.nio.file}</a>\n * package defines interfaces and classes for the Java virtual machine to access\n * files, file attributes, and file systems. This API may be used to overcome\n * many of the limitations of the {@code java.io.File} class.\n * The {@link #toPath toPath} method may be used to obtain a {@link\n * Path} that uses the abstract path represented by a {@code File} object to\n * locate a file. The resulting {@code Path} may be used with the {@link\n * java.nio.file.Files} class to provide more efficient and extensive access to\n * additional file operations, file attributes, and I/O exceptions to help\n * diagnose errors when an operation on a file fails.\n *\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileInputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int java.io.FileInputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int read(byte[] b) throws IOException {\r\n    return readBytes(b, 0, b.length);\r\n}",
      "javadoc": {
        "method": "/**\n * Reads up to {@code b.length} bytes of data from this input\n * stream into an array of bytes. This method blocks until some input\n * is available.\n *\n * @param      b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\n *             {@code -1} if there is no more data because the end of\n *             the file has been reached.\n * @throws     IOException  if an I/O error occurs.\n */\n",
        "class": "/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\n"
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileInputStream.getFD",
      "parameters": [],
      "signature": "java.io.FileDescriptor java.io.FileInputStream.getFD()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public final FileDescriptor getFD() throws IOException {\r\n    if (fd != null) {\r\n        return fd;\r\n    }\r\n    throw new IOException();\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the {@code FileDescriptor}\n * object  that represents the connection to\n * the actual file in the file system being\n * used by this {@code FileInputStream}.\n *\n * @return     the file descriptor object associated with this stream.\n * @throws     IOException  if an I/O error occurs.\n * @see        java.io.FileDescriptor\n */\n",
        "class": "/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\n"
      },"return": "java.io.FileDescriptor",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileInputStream.close",
      "parameters": [],
      "signature": "void java.io.FileInputStream.close()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void close() throws IOException {\r\n    fd.close();\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void java.io.FileOutputStream.<init>(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileOutputStream(File file) throws FileNotFoundException {\r\n    this(file, false);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a file output stream to write to the file represented by\n * the specified {@code File} object. A new\n * {@code FileDescriptor} object is created to represent this\n * file connection.\n * <p>\n * First, if there is a security manager, its {@code checkWrite}\n * method is called with the path represented by the {@code file}\n * argument as its argument.\n * <p>\n * If the file exists but is a directory rather than a regular file, does\n * not exist but cannot be created, or cannot be opened for any other\n * reason then a {@code FileNotFoundException} is thrown.\n *\n * @param      file               the file to be opened for writing.\n * @throws     FileNotFoundException  if the file exists but is a directory\n *                   rather than a regular file, does not exist but cannot\n *                   be created, or cannot be opened for any other reason\n * @throws     SecurityException  if a security manager exists and its\n *               {@code checkWrite} method denies write access\n *               to the file.\n * @see        java.io.File#getPath()\n * @see        java.lang.SecurityException\n * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n */\n",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [
        "java.io.File",
        "boolean"
      ],
      "signature": "void java.io.FileOutputStream.<init>(java.io.File,boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileOutputStream(File file, boolean append) throws FileNotFoundException {\r\n    String name = (file != null ? file.getPath() : null);\r\n    @SuppressWarnings(\"removal\")\r\n    SecurityManager security = System.getSecurityManager();\r\n    if (security != null) {\r\n        security.checkWrite(name);\r\n    }\r\n    if (name == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (file.isInvalid()) {\r\n        throw new FileNotFoundException(\"Invalid file path\");\r\n    }\r\n    this.fd = new FileDescriptor();\r\n    fd.attach(this);\r\n    this.path = name;\r\n    open(name, append);\r\n    // open sets the fd, register the cleanup\r\n    FileCleanable.register(fd);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a file output stream to write to the file represented by\n * the specified {@code File} object. If the second argument is\n * {@code true}, then bytes will be written to the end of the file\n * rather than the beginning. A new {@code FileDescriptor} object is\n * created to represent this file connection.\n * <p>\n * First, if there is a security manager, its {@code checkWrite}\n * method is called with the path represented by the {@code file}\n * argument as its argument.\n * <p>\n * If the file exists but is a directory rather than a regular file, does\n * not exist but cannot be created, or cannot be opened for any other\n * reason then a {@code FileNotFoundException} is thrown.\n *\n * @param      file               the file to be opened for writing.\n * @param     append      if {@code true}, then bytes will be written\n *                   to the end of the file rather than the beginning\n * @throws     FileNotFoundException  if the file exists but is a directory\n *                   rather than a regular file, does not exist but cannot\n *                   be created, or cannot be opened for any other reason\n * @throws     SecurityException  if a security manager exists and its\n *               {@code checkWrite} method denies write access\n *               to the file.\n * @see        java.io.File#getPath()\n * @see        java.lang.SecurityException\n * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n * @since 1.4\n */\n",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [
        "java.io.FileDescriptor"
      ],
      "signature": "void java.io.FileOutputStream.<init>(java.io.FileDescriptor)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileOutputStream(FileDescriptor fdObj) {\r\n    @SuppressWarnings(\"removal\")\r\n    SecurityManager security = System.getSecurityManager();\r\n    if (fdObj == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (security != null) {\r\n        security.checkWrite(fdObj);\r\n    }\r\n    this.fd = fdObj;\r\n    this.path = null;\r\n    fd.attach(this);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a file output stream to write to the specified file\n * descriptor, which represents an existing connection to an actual\n * file in the file system.\n * <p>\n * First, if there is a security manager, its {@code checkWrite}\n * method is called with the file descriptor {@code fdObj}\n * argument as its argument.\n * <p>\n * If {@code fdObj} is null then a {@code NullPointerException}\n * is thrown.\n * <p>\n * This constructor does not throw an exception if {@code fdObj}\n * is {@link java.io.FileDescriptor#valid() invalid}.\n * However, if the methods are invoked on the resulting stream to attempt\n * I/O on the stream, an {@code IOException} is thrown.\n *\n * @param      fdObj   the file descriptor to be opened for writing\n * @throws     SecurityException  if a security manager exists and its\n *               {@code checkWrite} method denies\n *               write access to the file descriptor\n * @see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n */\n",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.FileOutputStream.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileOutputStream(String name) throws FileNotFoundException {\r\n    this(name != null ? new File(name) : null, false);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a file output stream to write to the file with the\n * specified name. A new {@code FileDescriptor} object is\n * created to represent this file connection.\n * <p>\n * First, if there is a security manager, its {@code checkWrite}\n * method is called with {@code name} as its argument.\n * <p>\n * If the file exists but is a directory rather than a regular file, does\n * not exist but cannot be created, or cannot be opened for any other\n * reason then a {@code FileNotFoundException} is thrown.\n *\n * @implSpec Invoking this constructor with the parameter {@code name} is\n * equivalent to invoking {@link #FileOutputStream(java.lang.String,boolean)\n * new FileOutputStream(name, false)}.\n *\n * @param      name   the system-dependent filename\n * @throws     FileNotFoundException  if the file exists but is a directory\n *                   rather than a regular file, does not exist but cannot\n *                   be created, or cannot be opened for any other reason\n * @throws     SecurityException  if a security manager exists and its\n *               {@code checkWrite} method denies write access\n *               to the file.\n * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n */\n",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.<init>",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "void java.io.FileOutputStream.<init>(java.lang.String,boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileOutputStream(String name, boolean append) throws FileNotFoundException {\r\n    this(name != null ? new File(name) : null, append);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a file output stream to write to the file with the specified\n * name.  If the second argument is {@code true}, then\n * bytes will be written to the end of the file rather than the beginning.\n * A new {@code FileDescriptor} object is created to represent this\n * file connection.\n * <p>\n * First, if there is a security manager, its {@code checkWrite}\n * method is called with {@code name} as its argument.\n * <p>\n * If the file exists but is a directory rather than a regular file, does\n * not exist but cannot be created, or cannot be opened for any other\n * reason then a {@code FileNotFoundException} is thrown.\n *\n * @param     name        the system-dependent file name\n * @param     append      if {@code true}, then bytes will be written\n *                   to the end of the file rather than the beginning\n * @throws     FileNotFoundException  if the file exists but is a directory\n *                   rather than a regular file, does not exist but cannot\n *                   be created, or cannot be opened for any other reason.\n * @throws     SecurityException  if a security manager exists and its\n *               {@code checkWrite} method denies write access\n *               to the file.\n * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n * @since     1.1\n */\n",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileOutputStream.close",
      "parameters": [],
      "signature": "void java.io.FileOutputStream.close()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void close() throws IOException {\r\n    fd.close();\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.FileWriter.<init>",
      "parameters": [
        "java.io.File",
        "boolean"
      ],
      "signature": "void java.io.FileWriter.<init>(java.io.File,boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public FileWriter(File file, boolean append) throws IOException {\r\n    super(new FileOutputStream(file, append));\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a {@code FileWriter} given the {@code File} to write and\n * a boolean indicating whether to append the data written, using the platform's\n * {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.\n *\n * @param file  the {@code File} to write\n * @param     append    if {@code true}, then bytes will be written\n *                      to the end of the file rather than the beginning\n * @throws IOException  if the file exists but is a directory rather than\n *                  a regular file, does not exist but cannot be created,\n *                  or cannot be opened for any other reason\n * @since 1.4\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.InputStream.read",
      "parameters": [
        "byte[]"
      ],
      "signature": "int java.io.InputStream.read(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int read(byte[] b) throws IOException {\r\n    return read(b, 0, b.length);\r\n}",
      "javadoc": {
        "method": "/**\n * Reads some number of bytes from the input stream and stores them into\n * the buffer array {@code b}. The number of bytes actually read is\n * returned as an integer.  This method blocks until input data is\n * available, end of file is detected, or an exception is thrown.\n *\n * <p> If the length of {@code b} is zero, then no bytes are read and\n * {@code 0} is returned; otherwise, there is an attempt to read at\n * least one byte. If no byte is available because the stream is at the\n * end of the file, the value {@code -1} is returned; otherwise, at\n * least one byte is read and stored into {@code b}.\n *\n * <p> The first byte read is stored into element {@code b[0]}, the\n * next one into {@code b[1]}, and so on. The number of bytes read is,\n * at most, equal to the length of {@code b}. Let <i>k</i> be the\n * number of bytes actually read; these bytes will be stored in elements\n * {@code b[0]} through {@code b[}<i>k</i>{@code -1]},\n * leaving elements {@code b[}<i>k</i>{@code ]} through\n * {@code b[b.length-1]} unaffected.\n *\n * <p> The {@code read(b)} method for class {@code InputStream}\n * has the same effect as: <pre>{@code  read(b, 0, b.length) }</pre>\n *\n * @param      b   the buffer into which the data is read.\n * @return     the total number of bytes read into the buffer, or\n *             {@code -1} if there is no more data because the end of\n *             the stream has been reached.\n * @throws     IOException  If the first byte cannot be read for any reason\n *             other than the end of the file, if the input stream has been\n *             closed, or if some other I/O error occurs.\n * @throws     NullPointerException  if {@code b} is {@code null}.\n * @see        java.io.InputStream#read(byte[], int, int)\n */\n",
        "class": "/**\n * This abstract class is the superclass of all classes representing\n * an input stream of bytes.\n *\n * <p> Applications that need to define a subclass of {@code InputStream}\n * must always provide a method that returns the next byte of input.\n *\n * @author  Arthur van Hoff\n * @see     java.io.BufferedInputStream\n * @see     java.io.ByteArrayInputStream\n * @see     java.io.DataInputStream\n * @see     java.io.FilterInputStream\n * @see     java.io.InputStream#read()\n * @see     java.io.OutputStream\n * @see     java.io.PushbackInputStream\n * @since   1.0\n */\n"
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.InputStream.close",
      "parameters": [],
      "signature": "void java.io.InputStream.close()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void close() throws IOException {\r\n    closed = true;\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * This abstract class is the superclass of all classes representing\n * an input stream of bytes.\n *\n * <p> Applications that need to define a subclass of {@code InputStream}\n * must always provide a method that returns the next byte of input.\n *\n * @author  Arthur van Hoff\n * @see     java.io.BufferedInputStream\n * @see     java.io.ByteArrayInputStream\n * @see     java.io.DataInputStream\n * @see     java.io.FilterInputStream\n * @see     java.io.InputStream#read()\n * @see     java.io.OutputStream\n * @see     java.io.PushbackInputStream\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.OutputStreamWriter.close",
      "parameters": [],
      "signature": "void java.io.OutputStreamWriter.close()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void close() throws IOException {\r\n    se.close();\r\n}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.PrintStream.println",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.PrintStream.println(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void println(String x) {\r\n    if (getClass() == PrintStream.class) {\r\n        writeln(String.valueOf(x));\r\n    } else {\r\n        synchronized (this) {\r\n            print(x);\r\n            newLine();\r\n        }\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Prints a String and then terminate the line.  This method behaves as\n * though it invokes {@link #print(String)} and then\n * {@link #println()}.\n *\n * @param x  The {@code String} to be printed.\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.io.Writer.write",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.Writer.write(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void write(String str) throws IOException {\r\n    Objects.requireNonNull(str);\r\n    ensureOpen();\r\n}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getClassLoader",
      "parameters": [],
      "signature": "java.lang.ClassLoader java.lang.Class.getClassLoader()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public ClassLoader getClassLoader() {\r\n    ClassLoader cl = getClassLoader0();\r\n    if (cl == null)\r\n        return null;\r\n    @SuppressWarnings(\"removal\")\r\n    SecurityManager sm = System.getSecurityManager();\r\n    if (sm != null) {\r\n        ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());\r\n    }\r\n    return cl;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the class loader for the class.  Some implementations may use\n * null to represent the bootstrap class loader. This method will return\n * null in such implementations if this class was loaded by the bootstrap\n * class loader.\n *\n * <p>If this {@code Class} object\n * represents a primitive type or void, null is returned.\n *\n * @return  the class loader that loaded the class or interface\n *          represented by this {@code Class} object.\n * @throws  SecurityException\n *          if a security manager is present, and the caller's class loader\n *          is not {@code null} and is not the same as or an ancestor of the\n *          class loader for the class whose class loader is requested,\n *          and the caller does not have the\n *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n * @see java.lang.ClassLoader\n * @see SecurityManager#checkPermission\n * @see java.lang.RuntimePermission\n */\n",
        "class": "/**\n * Instances of the class {@code Class} represent classes and\n * interfaces in a running Java application. An enum class and a record\n * class are kinds of class; an annotation interface is a kind of\n * interface. Every array also belongs to a class that is reflected as\n * a {@code Class} object that is shared by all arrays with the same\n * element type and number of dimensions.  The primitive Java types\n * ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code\n * int}, {@code long}, {@code float}, and {@code double}), and the\n * keyword {@code void} are also represented as {@code Class} objects.\n *\n * <p> {@code Class} has no public constructor. Instead a {@code Class}\n * object is constructed automatically by the Java Virtual Machine when\n * a class is derived from the bytes of a {@code class} file through\n * the invocation of one of the following methods:\n * <ul>\n * <li> {@link ClassLoader#defineClass(java.lang.String, byte[], int, int) ClassLoader::defineClass}\n * <li> {@link java.lang.invoke.MethodHandles.Lookup#defineClass(byte[])\n *      java.lang.invoke.MethodHandles.Lookup::defineClass}\n * <li> {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n *      java.lang.invoke.MethodHandles.Lookup::defineHiddenClass}\n * </ul>\n *\n * <p> The methods of class {@code Class} expose many characteristics of a\n * class or interface. Most characteristics are derived from the {@code class}\n * file that the class loader passed to the Java Virtual Machine or\n * from the {@code class} file passed to {@code Lookup::defineClass}\n * or {@code Lookup::defineHiddenClass}.\n * A few characteristics are determined by the class loading environment\n * at run time, such as the module returned by {@link #getModule() getModule()}.\n *\n * <p> The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * <blockquote><pre>\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * </pre></blockquote>\n *\n * It is also possible to get the {@code Class} object for a named\n * class or interface (or for {@code void}) using a <i>class literal</i>.\n * For example:\n *\n * <blockquote>\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * </blockquote>\n *\n * <p> Some methods of class {@code Class} expose whether the declaration of\n * a class or interface in Java source code was <em>enclosed</em> within\n * another declaration. Other methods describe how a class or interface\n * is situated in a <em>nest</em>. A <a id=\"nest\">nest</a> is a set of\n * classes and interfaces, in the same run-time package, that\n * allow mutual access to their {@code private} members.\n * The classes and interfaces are known as <em>nestmates</em>.\n * One nestmate acts as the\n * <em>nest host</em>, and enumerates the other nestmates which\n * belong to the nest; each of them in turn records it as the nest host.\n * The classes and interfaces which belong to a nest, including its host, are\n * determined when\n * {@code class} files are generated, for example, a Java compiler\n * will typically record a top-level class as the host of a nest where the\n * other members are the classes and interfaces whose declarations are\n * enclosed within the top-level class declaration.\n *\n * <p> A class or interface created by the invocation of\n * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n * Lookup::defineHiddenClass} is a {@linkplain Class#isHidden() <em>hidden</em>}\n * class or interface.\n * All kinds of class, including enum classes and record classes, may be\n * hidden classes; all kinds of interface, including annotation interfaces,\n * may be hidden interfaces.\n *\n * The {@linkplain #getName() name of a hidden class or interface} is\n * not a <a href=\"ClassLoader.html#binary-name\">binary name</a>,\n * which means the following:\n * <ul>\n * <li>A hidden class or interface cannot be referenced by the constant pools\n *     of other classes and interfaces.\n * <li>A hidden class or interface cannot be described in\n *     {@linkplain java.lang.constant.ConstantDesc <em>nominal form</em>} by\n *     {@link #describeConstable() Class::describeConstable},\n *     {@link ClassDesc#of(String) ClassDesc::of}, or\n *     {@link ClassDesc#ofDescriptor(String) ClassDesc::ofDescriptor}.\n * <li>A hidden class or interface cannot be discovered by {@link #forName Class::forName}\n *     or {@link ClassLoader#loadClass(java.lang.String, boolean) ClassLoader::loadClass}.\n * </ul>\n *\n * A hidden class or interface is never an array class, but may be\n * the element type of an array. In all other respects, the fact that\n * a class or interface is hidden has no bearing on the characteristics\n * exposed by the methods of class {@code Class}.\n *\n * @param <T> the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class<String>}.  Use {@code Class<?>} if the class being modeled is\n * unknown.\n *\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   1.0\n * @jls 15.8.2 Class Literals\n */\n"
      },"return": "java.lang.ClassLoader",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Class.getName",
      "parameters": [],
      "signature": "java.lang.String java.lang.Class.getName()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String getName() {\r\n    String name = this.name;\r\n    return name != null ? name : initClassName();\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the  name of the entity (class, interface, array class,\n * primitive type, or void) represented by this {@code Class} object.\n *\n * <p> If this {@code Class} object represents a class or interface,\n * not an array class, then:\n * <ul>\n * <li> If the class or interface is not {@linkplain #isHidden() hidden},\n *      then the <a href=\"ClassLoader.html#binary-name\">binary name</a>\n *      of the class or interface is returned.\n * <li> If the class or interface is hidden, then the result is a string\n *      of the form: {@code N + '/' + <suffix>}\n *      where {@code N} is the <a href=\"ClassLoader.html#binary-name\">binary name</a>\n *      indicated by the {@code class} file passed to\n *      {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n *      Lookup::defineHiddenClass}, and {@code <suffix>} is an unqualified name.\n * </ul>\n *\n * <p> If this {@code Class} object represents an array class, then\n * the result is a string consisting of one or more '{@code [}' characters\n * representing the depth of the array nesting, followed by the element\n * type as encoded using the following table:\n *\n * <blockquote><table class=\"striped\">\n * <caption style=\"display:none\">Element types and encodings</caption>\n * <thead>\n * <tr><th scope=\"col\"> Element Type <th scope=\"col\"> Encoding\n * </thead>\n * <tbody style=\"text-align:left\">\n * <tr><th scope=\"row\"> {@code boolean} <td style=\"text-align:center\"> {@code Z}\n * <tr><th scope=\"row\"> {@code byte}    <td style=\"text-align:center\"> {@code B}\n * <tr><th scope=\"row\"> {@code char}    <td style=\"text-align:center\"> {@code C}\n * <tr><th scope=\"row\"> class or interface with <a href=\"ClassLoader.html#binary-name\">binary name</a> <i>N</i>\n *                                      <td style=\"text-align:center\"> {@code L}<em>N</em>{@code ;}\n * <tr><th scope=\"row\"> {@code double}  <td style=\"text-align:center\"> {@code D}\n * <tr><th scope=\"row\"> {@code float}   <td style=\"text-align:center\"> {@code F}\n * <tr><th scope=\"row\"> {@code int}     <td style=\"text-align:center\"> {@code I}\n * <tr><th scope=\"row\"> {@code long}    <td style=\"text-align:center\"> {@code J}\n * <tr><th scope=\"row\"> {@code short}   <td style=\"text-align:center\"> {@code S}\n * </tbody>\n * </table></blockquote>\n *\n * <p> If this {@code Class} object represents a primitive type or {@code void},\n * then the result is a string with the same spelling as the Java language\n * keyword which corresponds to the primitive type or {@code void}.\n *\n * <p> Examples:\n * <blockquote><pre>\n * String.class.getName()\n *     returns \"java.lang.String\"\n * byte.class.getName()\n *     returns \"byte\"\n * (new Object[3]).getClass().getName()\n *     returns \"[Ljava.lang.Object;\"\n * (new int[3][4][5][6][7][8][9]).getClass().getName()\n *     returns \"[[[[[[[I\"\n * </pre></blockquote>\n *\n * @return  the name of the class, interface, or other entity\n *          represented by this {@code Class} object.\n * @jls 13.1 The Form of a Binary\n */\n",
        "class": "/**\n * Instances of the class {@code Class} represent classes and\n * interfaces in a running Java application. An enum class and a record\n * class are kinds of class; an annotation interface is a kind of\n * interface. Every array also belongs to a class that is reflected as\n * a {@code Class} object that is shared by all arrays with the same\n * element type and number of dimensions.  The primitive Java types\n * ({@code boolean}, {@code byte}, {@code char}, {@code short}, {@code\n * int}, {@code long}, {@code float}, and {@code double}), and the\n * keyword {@code void} are also represented as {@code Class} objects.\n *\n * <p> {@code Class} has no public constructor. Instead a {@code Class}\n * object is constructed automatically by the Java Virtual Machine when\n * a class is derived from the bytes of a {@code class} file through\n * the invocation of one of the following methods:\n * <ul>\n * <li> {@link ClassLoader#defineClass(java.lang.String, byte[], int, int) ClassLoader::defineClass}\n * <li> {@link java.lang.invoke.MethodHandles.Lookup#defineClass(byte[])\n *      java.lang.invoke.MethodHandles.Lookup::defineClass}\n * <li> {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n *      java.lang.invoke.MethodHandles.Lookup::defineHiddenClass}\n * </ul>\n *\n * <p> The methods of class {@code Class} expose many characteristics of a\n * class or interface. Most characteristics are derived from the {@code class}\n * file that the class loader passed to the Java Virtual Machine or\n * from the {@code class} file passed to {@code Lookup::defineClass}\n * or {@code Lookup::defineHiddenClass}.\n * A few characteristics are determined by the class loading environment\n * at run time, such as the module returned by {@link #getModule() getModule()}.\n *\n * <p> The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * <blockquote><pre>\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * </pre></blockquote>\n *\n * It is also possible to get the {@code Class} object for a named\n * class or interface (or for {@code void}) using a <i>class literal</i>.\n * For example:\n *\n * <blockquote>\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * </blockquote>\n *\n * <p> Some methods of class {@code Class} expose whether the declaration of\n * a class or interface in Java source code was <em>enclosed</em> within\n * another declaration. Other methods describe how a class or interface\n * is situated in a <em>nest</em>. A <a id=\"nest\">nest</a> is a set of\n * classes and interfaces, in the same run-time package, that\n * allow mutual access to their {@code private} members.\n * The classes and interfaces are known as <em>nestmates</em>.\n * One nestmate acts as the\n * <em>nest host</em>, and enumerates the other nestmates which\n * belong to the nest; each of them in turn records it as the nest host.\n * The classes and interfaces which belong to a nest, including its host, are\n * determined when\n * {@code class} files are generated, for example, a Java compiler\n * will typically record a top-level class as the host of a nest where the\n * other members are the classes and interfaces whose declarations are\n * enclosed within the top-level class declaration.\n *\n * <p> A class or interface created by the invocation of\n * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)\n * Lookup::defineHiddenClass} is a {@linkplain Class#isHidden() <em>hidden</em>}\n * class or interface.\n * All kinds of class, including enum classes and record classes, may be\n * hidden classes; all kinds of interface, including annotation interfaces,\n * may be hidden interfaces.\n *\n * The {@linkplain #getName() name of a hidden class or interface} is\n * not a <a href=\"ClassLoader.html#binary-name\">binary name</a>,\n * which means the following:\n * <ul>\n * <li>A hidden class or interface cannot be referenced by the constant pools\n *     of other classes and interfaces.\n * <li>A hidden class or interface cannot be described in\n *     {@linkplain java.lang.constant.ConstantDesc <em>nominal form</em>} by\n *     {@link #describeConstable() Class::describeConstable},\n *     {@link ClassDesc#of(String) ClassDesc::of}, or\n *     {@link ClassDesc#ofDescriptor(String) ClassDesc::ofDescriptor}.\n * <li>A hidden class or interface cannot be discovered by {@link #forName Class::forName}\n *     or {@link ClassLoader#loadClass(java.lang.String, boolean) ClassLoader::loadClass}.\n * </ul>\n *\n * A hidden class or interface is never an array class, but may be\n * the element type of an array. In all other respects, the fact that\n * a class or interface is hidden has no bearing on the characteristics\n * exposed by the methods of class {@code Class}.\n *\n * @param <T> the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class<String>}.  Use {@code Class<?>} if the class being modeled is\n * unknown.\n *\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   1.0\n * @jls 15.8.2 Class Literals\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ClassLoader.getResourceAsStream",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public InputStream getResourceAsStream(String name) {\r\n    Objects.requireNonNull(name);\r\n    URL url = getResource(name);\r\n    try {\r\n        return url != null ? url.openStream() : null;\r\n    } catch (IOException e) {\r\n        return null;\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Returns an input stream for reading the specified resource.\n *\n * <p> The search order is described in the documentation for {@link\n * #getResource(String)}.  </p>\n *\n * <p> Resources in named modules are subject to the encapsulation rules\n * specified by {@link Module#getResourceAsStream Module.getResourceAsStream}.\n * Additionally, and except for the special case where the resource has a\n * name ending with \"{@code .class}\", this method will only find resources in\n * packages of named modules when the package is {@link Module#isOpen(String)\n * opened} unconditionally. </p>\n *\n * @param  name\n *         The resource name\n *\n * @return  An input stream for reading the resource; {@code null} if the\n *          resource could not be found, the resource is in a package that\n *          is not opened unconditionally, or access to the resource is\n *          denied by the security manager.\n *\n * @throws  NullPointerException If {@code name} is {@code null}\n *\n * @since  1.1\n * @revised 9\n */\n",
        "class": "/**\n * A class loader is an object that is responsible for loading classes. The\n * class {@code ClassLoader} is an abstract class.  Given the <a\n * href=\"#binary-name\">binary name</a> of a class, a class loader should attempt to\n * locate or generate data that constitutes a definition for the class.  A\n * typical strategy is to transform the name into a file name and then read a\n * \"class file\" of that name from a file system.\n *\n * <p> Every {@link java.lang.Class Class} object contains a {@link\n * Class#getClassLoader() reference} to the {@code ClassLoader} that defined\n * it.\n *\n * <p> {@code Class} objects for array classes are not created by class\n * loaders, but are created automatically as required by the Java runtime.\n * The class loader for an array class, as returned by {@link\n * Class#getClassLoader()} is the same as the class loader for its element\n * type; if the element type is a primitive type, then the array class has no\n * class loader.\n *\n * <p> Applications implement subclasses of {@code ClassLoader} in order to\n * extend the manner in which the Java virtual machine dynamically loads\n * classes.\n *\n * <p> Class loaders may typically be used by security managers to indicate\n * security domains.\n *\n * <p> In addition to loading classes, a class loader is also responsible for\n * locating resources. A resource is some data (a \"{@code .class}\" file,\n * configuration data, or an image for example) that is identified with an\n * abstract '/'-separated path name. Resources are typically packaged with an\n * application or library so that they can be located by code in the\n * application or library. In some cases, the resources are included so that\n * they can be located by other libraries.\n *\n * <p> The {@code ClassLoader} class uses a delegation model to search for\n * classes and resources.  Each instance of {@code ClassLoader} has an\n * associated parent class loader. When requested to find a class or\n * resource, a {@code ClassLoader} instance will usually delegate the search\n * for the class or resource to its parent class loader before attempting to\n * find the class or resource itself.\n *\n * <p> Class loaders that support concurrent loading of classes are known as\n * <em>{@linkplain #isRegisteredAsParallelCapable() parallel capable}</em> class\n * loaders and are required to register themselves at their class initialization\n * time by invoking the {@link\n * #registerAsParallelCapable ClassLoader.registerAsParallelCapable}\n * method. Note that the {@code ClassLoader} class is registered as parallel\n * capable by default. However, its subclasses still need to register themselves\n * if they are parallel capable.\n * In environments in which the delegation model is not strictly\n * hierarchical, class loaders need to be parallel capable, otherwise class\n * loading can lead to deadlocks because the loader lock is held for the\n * duration of the class loading process (see {@link #loadClass\n * loadClass} methods).\n *\n * <h2> <a id=\"builtinLoaders\">Run-time Built-in Class Loaders</a></h2>\n *\n * The Java run-time has the following built-in class loaders:\n *\n * <ul>\n * <li><p>Bootstrap class loader.\n *     It is the virtual machine's built-in class loader, typically represented\n *     as {@code null}, and does not have a parent.</li>\n * <li><p>{@linkplain #getPlatformClassLoader() Platform class loader}.\n *     The platform class loader is responsible for loading the\n *     <em>platform classes</em>.  Platform classes include Java SE platform APIs,\n *     their implementation classes and JDK-specific run-time classes that are\n *     defined by the platform class loader or its ancestors.\n *     The platform class loader can be used as the parent of a {@code ClassLoader}\n *     instance.\n *     <p> To allow for upgrading/overriding of modules defined to the platform\n *     class loader, and where upgraded modules read modules defined to class\n *     loaders other than the platform class loader and its ancestors, then\n *     the platform class loader may have to delegate to other class loaders,\n *     the application class loader for example.\n *     In other words, classes in named modules defined to class loaders\n *     other than the platform class loader and its ancestors may be visible\n *     to the platform class loader. </li>\n * <li><p>{@linkplain #getSystemClassLoader() System class loader}.\n *     It is also known as <em>application class loader</em> and is distinct\n *     from the platform class loader.\n *     The system class loader is typically used to define classes on the\n *     application class path, module path, and JDK-specific tools.\n *     The platform class loader is the parent or an ancestor of the system class\n *     loader, so the system class loader can load platform classes by delegating\n *     to its parent.</li>\n * </ul>\n *\n * <p> Normally, the Java virtual machine loads classes from the local file\n * system in a platform-dependent manner.\n * However, some classes may not originate from a file; they may originate\n * from other sources, such as the network, or they could be constructed by an\n * application.  The method {@link #defineClass(java.lang.String, byte[], int, int)\n * defineClass} converts an array of bytes into an instance of class\n * {@code Class}. Instances of this newly defined class can be created using\n * {@link Class#newInstance Class.newInstance}.\n *\n * <p> The methods and constructors of objects created by a class loader may\n * reference other classes.  To determine the class(es) referred to, the Java\n * virtual machine invokes the {@link #loadClass loadClass} method of\n * the class loader that originally created the class.\n *\n * <p> For example, an application could create a network class loader to\n * download class files from a server.  Sample code might look like:\n *\n * <blockquote><pre>\n *   ClassLoader loader&nbsp;= new NetworkClassLoader(host,&nbsp;port);\n *   Object main&nbsp;= loader.loadClass(\"Main\", true).newInstance();\n *       &nbsp;.&nbsp;.&nbsp;.\n * </pre></blockquote>\n *\n * <p> The network class loader subclass must define the methods {@link\n * #findClass findClass} and {@code loadClassData} to load a class\n * from the network.  Once it has downloaded the bytes that make up the class,\n * it should use the method {@link #defineClass defineClass} to\n * create a class instance.  A sample implementation is:\n *\n * <blockquote><pre>\n *     class NetworkClassLoader extends ClassLoader {\n *         String host;\n *         int port;\n *\n *         public Class findClass(String name) {\n *             byte[] b = loadClassData(name);\n *             return defineClass(name, b, 0, b.length);\n *         }\n *\n *         private byte[] loadClassData(String name) {\n *             // load the class data from the connection\n *             &nbsp;.&nbsp;.&nbsp;.\n *         }\n *     }\n * </pre></blockquote>\n *\n * <h3> <a id=\"binary-name\">Binary names</a> </h3>\n *\n * <p> Any class name provided as a {@code String} parameter to methods in\n * {@code ClassLoader} must be a binary name as defined by\n * <cite>The Java Language Specification</cite>.\n *\n * <p> Examples of valid class names include:\n * <blockquote><pre>\n *   \"java.lang.String\"\n *   \"javax.swing.JSpinner$DefaultEditor\"\n *   \"java.security.KeyStore$Builder$FileBuilder$1\"\n *   \"java.net.URLClassLoader$3$1\"\n * </pre></blockquote>\n *\n * <p> Any package name provided as a {@code String} parameter to methods in\n * {@code ClassLoader} must be either the empty string (denoting an unnamed package)\n * or a fully qualified name as defined by\n * <cite>The Java Language Specification</cite>.\n *\n * @jls 6.7 Fully Qualified Names\n * @jls 13.1 The Form of a Binary\n * @see      #resolveClass(Class)\n * @since 1.0\n * @revised 9\n */\n"
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Double.toString",
      "parameters": [
        "double"
      ],
      "signature": "java.lang.String java.lang.Double.toString(double)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static String toString(double d) {\r\n    return FloatingDecimal.toJavaFormatString(d);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a string representation of the {@code double}\n * argument. All characters mentioned below are ASCII characters.\n * <ul>\n * <li>If the argument is NaN, the result is the string\n *     \"{@code NaN}\".\n * <li>Otherwise, the result is a string that represents the sign and\n * magnitude (absolute value) of the argument. If the sign is negative,\n * the first character of the result is '{@code -}'\n * ({@code '\\u005Cu002D'}); if the sign is positive, no sign character\n * appears in the result. As for the magnitude <i>m</i>:\n * <ul>\n * <li>If <i>m</i> is infinity, it is represented by the characters\n * {@code \"Infinity\"}; thus, positive infinity produces the result\n * {@code \"Infinity\"} and negative infinity produces the result\n * {@code \"-Infinity\"}.\n *\n * <li>If <i>m</i> is zero, it is represented by the characters\n * {@code \"0.0\"}; thus, negative zero produces the result\n * {@code \"-0.0\"} and positive zero produces the result\n * {@code \"0.0\"}.\n *\n * <li>If <i>m</i> is greater than or equal to 10<sup>-3</sup> but less\n * than 10<sup>7</sup>, then it is represented as the integer part of\n * <i>m</i>, in decimal form with no leading zeroes, followed by\n * '{@code .}' ({@code '\\u005Cu002E'}), followed by one or\n * more decimal digits representing the fractional part of <i>m</i>.\n *\n * <li>If <i>m</i> is less than 10<sup>-3</sup> or greater than or\n * equal to 10<sup>7</sup>, then it is represented in so-called\n * \"computerized scientific notation.\" Let <i>n</i> be the unique\n * integer such that 10<sup><i>n</i></sup> &le; <i>m</i> {@literal <}\n * 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the\n * mathematically exact quotient of <i>m</i> and\n * 10<sup><i>n</i></sup> so that 1 &le; <i>a</i> {@literal <} 10. The\n * magnitude is then represented as the integer part of <i>a</i>,\n * as a single decimal digit, followed by '{@code .}'\n * ({@code '\\u005Cu002E'}), followed by decimal digits\n * representing the fractional part of <i>a</i>, followed by the\n * letter '{@code E}' ({@code '\\u005Cu0045'}), followed\n * by a representation of <i>n</i> as a decimal integer, as\n * produced by the method {@link Integer#toString(int)}.\n * </ul>\n * </ul>\n * How many digits must be printed for the fractional part of\n * <i>m</i> or <i>a</i>? There must be at least one digit to represent\n * the fractional part, and beyond that as many, but only as many, more\n * digits as are needed to uniquely distinguish the argument value from\n * adjacent values of type {@code double}. That is, suppose that\n * <i>x</i> is the exact mathematical value represented by the decimal\n * representation produced by this method for a finite nonzero argument\n * <i>d</i>. Then <i>d</i> must be the {@code double} value nearest\n * to <i>x</i>; or if two {@code double} values are equally close\n * to <i>x</i>, then <i>d</i> must be one of them and the least\n * significant bit of the significand of <i>d</i> must be {@code 0}.\n *\n * <p>To create localized string representations of a floating-point\n * value, use subclasses of {@link java.text.NumberFormat}.\n *\n * @param   d   the {@code double} to be converted.\n * @return a string representation of the argument.\n */\n",
        "class": "/**\n * The {@code Double} class wraps a value of the primitive type\n * {@code double} in an object. An object of type\n * {@code Double} contains a single field whose type is\n * {@code double}.\n *\n * <p>In addition, this class provides several methods for converting a\n * {@code double} to a {@code String} and a\n * {@code String} to a {@code double}, as well as other\n * constants and methods useful when dealing with a\n * {@code double}.\n *\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n *\n * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,\n * and Comparison</a></h2>\n *\n * IEEE 754 floating-point values include finite nonzero values,\n * signed zeros ({@code +0.0} and {@code -0.0}), signed infinities\n * {@linkplain Double#POSITIVE_INFINITY positive infinity} and\n * {@linkplain Double#NEGATIVE_INFINITY negative infinity}), and\n * {@linkplain Double#NaN NaN} (not-a-number).\n *\n * <p>An <em>equivalence relation</em> on a set of values is a boolean\n * relation on pairs of values that is reflexive, symmetric, and\n * transitive. For more discussion of equivalence relations and object\n * equality, see the {@link Object#equals Object.equals}\n * specification. An equivalence relation partitions the values it\n * operates over into sets called <i>equivalence classes</i>.  All the\n * members of the equivalence class are equal to each other under the\n * relation. An equivalence class may contain only a single member. At\n * least for some purposes, all the members of an equivalence class\n * are substitutable for each other.  In particular, in a numeric\n * expression equivalent values can be <em>substituted</em> for one\n * another without changing the result of the expression, meaning\n * changing the equivalence class of the result of the expression.\n *\n * <p>Notably, the built-in {@code ==} operation on floating-point\n * values is <em>not</em> an equivalence relation. Despite not\n * defining an equivalence relation, the semantics of the IEEE 754\n * {@code ==} operator were deliberately designed to meet other needs\n * of numerical computation. There are two exceptions where the\n * properties of an equivalence relation are not satisfied by {@code\n * ==} on floating-point values:\n *\n * <ul>\n *\n * <li>If {@code v1} and {@code v2} are both NaN, then {@code v1\n * == v2} has the value {@code false}. Therefore, for two NaN\n * arguments the <em>reflexive</em> property of an equivalence\n * relation is <em>not</em> satisfied by the {@code ==} operator.\n *\n * <li>If {@code v1} represents {@code +0.0} while {@code v2}\n * represents {@code -0.0}, or vice versa, then {@code v1 == v2} has\n * the value {@code true} even though {@code +0.0} and {@code -0.0}\n * are distinguishable under various floating-point operations. For\n * example, {@code 1.0/+0.0} evaluates to positive infinity while\n * {@code 1.0/-0.0} evaluates to <em>negative</em> infinity and\n * positive infinity and negative infinity are neither equal to each\n * other nor equivalent to each other. Thus, while a signed zero input\n * most commonly determines the sign of a zero result, because of\n * dividing by zero, {@code +0.0} and {@code -0.0} may not be\n * substituted for each other in general. The sign of a zero input\n * also has a non-substitutable effect on the result of some math\n * library methods.\n *\n * </ul>\n *\n * <p>For ordered comparisons using the built-in comparison operators\n * ({@code <}, {@code <=}, etc.), NaN values have another anomalous\n * situation: a NaN is neither less than, nor greater than, nor equal\n * to any value, including itself. This means the <i>trichotomy of\n * comparison</i> does <em>not</em> hold.\n *\n * <p>To provide the appropriate semantics for {@code equals} and\n * {@code compareTo} methods, those methods cannot simply be wrappers\n * around {@code ==} or ordered comparison operations. Instead, {@link\n * Double#equals equals} defines NaN arguments to be equal to each\n * other and defines {@code +0.0} to <em>not</em> be equal to {@code\n * -0.0}, restoring reflexivity. For comparisons, {@link\n * Double#compareTo compareTo} defines a total order where {@code\n * -0.0} is less than {@code +0.0} and where a NaN is equal to itself\n * and considered greater than positive infinity.\n *\n * <p>The operational semantics of {@code equals} and {@code\n * compareTo} are expressed in terms of {@linkplain #doubleToLongBits\n * bit-wise converting} the floating-point values to integral values.\n *\n * <p>The <em>natural ordering</em> implemented by {@link #compareTo\n * compareTo} is {@linkplain Comparable consistent with equals}. That\n * is, two objects are reported as equal by {@code equals} if and only\n * if {@code compareTo} on those objects returns zero.\n *\n * <p>The adjusted behaviors defined for {@code equals} and {@code\n * compareTo} allow instances of wrapper classes to work properly with\n * conventional data structures. For example, defining NaN\n * values to be {@code equals} to one another allows NaN to be used as\n * an element of a {@link java.util.HashSet HashSet} or as the key of\n * a {@link java.util.HashMap HashMap}. Similarly, defining {@code\n * compareTo} as a total ordering, including {@code +0.0}, {@code\n * -0.0}, and NaN, allows instances of wrapper classes to be used as\n * elements of a {@link java.util.SortedSet SortedSet} or as keys of a\n * {@link java.util.SortedMap SortedMap}.\n *\n * @jls 4.2.3 Floating-Point Types, Formats, and Values\n * @jls 4.2.4. Floating-Point Operations\n * @jls 15.21.1 Numerical Equality Operators == and !=\n * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Joseph D. Darcy\n * @since 1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Float.toString",
      "parameters": [
        "float"
      ],
      "signature": "java.lang.String java.lang.Float.toString(float)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static String toString(float f) {\r\n    return FloatingDecimal.toJavaFormatString(f);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a string representation of the {@code float}\n * argument. All characters mentioned below are ASCII characters.\n * <ul>\n * <li>If the argument is NaN, the result is the string\n * \"{@code NaN}\".\n * <li>Otherwise, the result is a string that represents the sign and\n *     magnitude (absolute value) of the argument. If the sign is\n *     negative, the first character of the result is\n *     '{@code -}' ({@code '\\u005Cu002D'}); if the sign is\n *     positive, no sign character appears in the result. As for\n *     the magnitude <i>m</i>:\n * <ul>\n * <li>If <i>m</i> is infinity, it is represented by the characters\n *     {@code \"Infinity\"}; thus, positive infinity produces\n *     the result {@code \"Infinity\"} and negative infinity\n *     produces the result {@code \"-Infinity\"}.\n * <li>If <i>m</i> is zero, it is represented by the characters\n *     {@code \"0.0\"}; thus, negative zero produces the result\n *     {@code \"-0.0\"} and positive zero produces the result\n *     {@code \"0.0\"}.\n * <li> If <i>m</i> is greater than or equal to 10<sup>-3</sup> but\n *      less than 10<sup>7</sup>, then it is represented as the\n *      integer part of <i>m</i>, in decimal form with no leading\n *      zeroes, followed by '{@code .}'\n *      ({@code '\\u005Cu002E'}), followed by one or more\n *      decimal digits representing the fractional part of\n *      <i>m</i>.\n * <li> If <i>m</i> is less than 10<sup>-3</sup> or greater than or\n *      equal to 10<sup>7</sup>, then it is represented in\n *      so-called \"computerized scientific notation.\" Let <i>n</i>\n *      be the unique integer such that 10<sup><i>n</i> </sup>&le;\n *      <i>m</i> {@literal <} 10<sup><i>n</i>+1</sup>; then let <i>a</i>\n *      be the mathematically exact quotient of <i>m</i> and\n *      10<sup><i>n</i></sup> so that 1 &le; <i>a</i> {@literal <} 10.\n *      The magnitude is then represented as the integer part of\n *      <i>a</i>, as a single decimal digit, followed by\n *      '{@code .}' ({@code '\\u005Cu002E'}), followed by\n *      decimal digits representing the fractional part of\n *      <i>a</i>, followed by the letter '{@code E}'\n *      ({@code '\\u005Cu0045'}), followed by a representation\n *      of <i>n</i> as a decimal integer, as produced by the\n *      method {@link java.lang.Integer#toString(int)}.\n *\n * </ul>\n * </ul>\n * How many digits must be printed for the fractional part of\n * <i>m</i> or <i>a</i>? There must be at least one digit\n * to represent the fractional part, and beyond that as many, but\n * only as many, more digits as are needed to uniquely distinguish\n * the argument value from adjacent values of type\n * {@code float}. That is, suppose that <i>x</i> is the\n * exact mathematical value represented by the decimal\n * representation produced by this method for a finite nonzero\n * argument <i>f</i>. Then <i>f</i> must be the {@code float}\n * value nearest to <i>x</i>; or, if two {@code float} values are\n * equally close to <i>x</i>, then <i>f</i> must be one of\n * them and the least significant bit of the significand of\n * <i>f</i> must be {@code 0}.\n *\n * <p>To create localized string representations of a floating-point\n * value, use subclasses of {@link java.text.NumberFormat}.\n *\n * @param   f   the float to be converted.\n * @return a string representation of the argument.\n */\n",
        "class": "/**\n * The {@code Float} class wraps a value of primitive type\n * {@code float} in an object. An object of type\n * {@code Float} contains a single field whose type is\n * {@code float}.\n *\n * <p>In addition, this class provides several methods for converting a\n * {@code float} to a {@code String} and a\n * {@code String} to a {@code float}, as well as other\n * constants and methods useful when dealing with a\n * {@code float}.\n *\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n *\n * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,\n * and Comparison</a></h2>\n *\n * The class {@code java.lang.Double} has a <a\n * href=\"Double.html#equivalenceRelation\">discussion of equality,\n * equivalence, and comparison of floating-point values</a> that is\n * equality applicable to {@code float} values.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Joseph D. Darcy\n * @since 1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Integer.toString",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.String java.lang.Integer.toString(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static String toString(int i) {\r\n    int size = stringSize(i);\r\n    if (COMPACT_STRINGS) {\r\n        byte[] buf = new byte[size];\r\n        getChars(i, size, buf);\r\n        return new String(buf, LATIN1);\r\n    } else {\r\n        byte[] buf = new byte[size * 2];\r\n        StringUTF16.getChars(i, size, buf);\r\n        return new String(buf, UTF16);\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a {@code String} object representing the\n * specified integer. The argument is converted to signed decimal\n * representation and returned as a string, exactly as if the\n * argument and radix 10 were given as arguments to the {@link\n * #toString(int, int)} method.\n *\n * @param   i   an integer to be converted.\n * @return  a string representation of the argument in base&nbsp;10.\n */\n",
        "class": "/**\n * The {@code Integer} class wraps a value of the primitive type\n * {@code int} in an object. An object of type {@code Integer}\n * contains a single field whose type is {@code int}.\n *\n * <p>In addition, this class provides several methods for converting\n * an {@code int} to a {@code String} and a {@code String} to an\n * {@code int}, as well as other constants and methods useful when\n * dealing with an {@code int}.\n *\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(int) highestOneBit} and\n * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since 1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Long.toString",
      "parameters": [
        "long"
      ],
      "signature": "java.lang.String java.lang.Long.toString(long)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static String toString(long i) {\r\n    int size = stringSize(i);\r\n    if (COMPACT_STRINGS) {\r\n        byte[] buf = new byte[size];\r\n        getChars(i, size, buf);\r\n        return new String(buf, LATIN1);\r\n    } else {\r\n        byte[] buf = new byte[size * 2];\r\n        StringUTF16.getChars(i, size, buf);\r\n        return new String(buf, UTF16);\r\n    }\r\n}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Math.random",
      "parameters": [],
      "signature": "double java.lang.Math.random()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static double random() {\n        return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();\n    }\n",
      "javadoc": {
        "method": "/**\n     * Returns a {@code double} value with a positive sign, greater\n     * than or equal to {@code 0.0} and less than {@code 1.0}.\n     * Returned values are chosen pseudorandomly with (approximately)\n     * uniform distribution from that range.\n     *\n     * <p>When this method is first called, it creates a single new\n     * pseudorandom-number generator, exactly as if by the expression\n     *\n     * <blockquote>{@code new java.util.Random()}</blockquote>\n     *\n     * This new pseudorandom-number generator is used thereafter for\n     * all calls to this method and is used nowhere else.\n     *\n     * <p>This method is properly synchronized to allow correct use by\n     * more than one thread. However, if many threads need to generate\n     * pseudorandom numbers at a great rate, it may reduce contention\n     * for each thread to have its own pseudorandom-number generator.\n     *\n     * @apiNote\n     * As the largest {@code double} value less than {@code 1.0}\n     * is {@code Math.nextDown(1.0)}, a value {@code x} in the closed range\n     * {@code [x1,x2]} where {@code x1<=x2} may be defined by the statements\n     *\n     * <blockquote><pre>{@code\n     * double f = Math.random()/Math.nextDown(1.0);\n     * double x = x1*(1.0 - f) + x2*f;\n     * }</pre></blockquote>\n     *\n     * @return  a pseudorandom {@code double} greater than or equal\n     * to {@code 0.0} and less than {@code 1.0}.\n     * @see #nextDown(double)\n     * @see Random#nextDouble()\n     */",
        "class": "/**\n * The class {@code Math} contains methods for performing basic\n * numeric operations such as the elementary exponential, logarithm,\n * square root, and trigonometric functions.\n *\n * <p>Unlike some of the numeric methods of class\n * {@link java.lang.StrictMath StrictMath}, all implementations of the equivalent\n * functions of class {@code Math} are not defined to return the\n * bit-for-bit same results.  This relaxation permits\n * better-performing implementations where strict reproducibility is\n * not required.\n *\n * <p>By default many of the {@code Math} methods simply call\n * the equivalent method in {@code StrictMath} for their\n * implementation.  Code generators are encouraged to use\n * platform-specific native libraries or microprocessor instructions,\n * where available, to provide higher-performance implementations of\n * {@code Math} methods.  Such higher-performance\n * implementations still must conform to the specification for\n * {@code Math}.\n *\n * <p>The quality of implementation specifications concern two\n * properties, accuracy of the returned result and monotonicity of the\n * method.  Accuracy of the floating-point {@code Math} methods is\n * measured in terms of <i>ulps</i>, units in the last place.  For a\n * given floating-point format, an {@linkplain #ulp(double) ulp} of a\n * specific real number value is the distance between the two\n * floating-point values bracketing that numerical value.  When\n * discussing the accuracy of a method as a whole rather than at a\n * specific argument, the number of ulps cited is for the worst-case\n * error at any argument.  If a method always has an error less than\n * 0.5 ulps, the method always returns the floating-point number\n * nearest the exact result; such a method is <i>correctly\n * rounded</i>.  A correctly rounded method is generally the best a\n * floating-point approximation can be; however, it is impractical for\n * many floating-point methods to be correctly rounded.  Instead, for\n * the {@code Math} class, a larger error bound of 1 or 2 ulps is\n * allowed for certain methods.  Informally, with a 1 ulp error bound,\n * when the exact result is a representable number, the exact result\n * should be returned as the computed result; otherwise, either of the\n * two floating-point values which bracket the exact result may be\n * returned.  For exact results large in magnitude, one of the\n * endpoints of the bracket may be infinite.  Besides accuracy at\n * individual arguments, maintaining proper relations between the\n * method at different arguments is also important.  Therefore, most\n * methods with more than 0.5 ulp errors are required to be\n * <i>semi-monotonic</i>: whenever the mathematical function is\n * non-decreasing, so is the floating-point approximation, likewise,\n * whenever the mathematical function is non-increasing, so is the\n * floating-point approximation.  Not all approximations that have 1\n * ulp accuracy will automatically meet the monotonicity requirements.\n *\n * <p>\n * The platform uses signed two's complement integer arithmetic with\n * int and long primitive types.  The developer should choose\n * the primitive type to ensure that arithmetic operations consistently\n * produce correct results, which in some cases means the operations\n * will not overflow the range of values of the computation.\n * The best practice is to choose the primitive type and algorithm to avoid\n * overflow. In cases where the size is {@code int} or {@code long} and\n * overflow errors need to be detected, the methods {@code addExact},\n * {@code subtractExact}, {@code multiplyExact}, {@code toIntExact},\n * {@code incrementExact}, {@code decrementExact} and {@code negateExact}\n * throw an {@code ArithmeticException} when the results overflow.\n * For the arithmetic operations divide and absolute value, overflow\n * occurs only with a specific minimum or maximum value and\n * should be checked against the minimum or maximum as appropriate.\n *\n * <h2><a id=Ieee754RecommendedOps>IEEE 754 Recommended\n * Operations</a></h2>\n *\n * The 2019 revision of the IEEE 754 floating-point standard includes\n * a section of recommended operations and the semantics of those\n * operations if they are included in a programming environment. The\n * recommended operations present in this class include {@link sin\n * sin}, {@link cos cos}, {@link tan tan}, {@link asin asin}, {@link\n * acos acos}, {@link atan atan}, {@link exp exp}, {@link expm1\n * expm1}, {@link log log}, {@link log10 log10}, {@link log1p log1p},\n * {@link sinh sinh}, {@link cosh cosh}, {@link tanh tanh}, {@link\n * hypot hypot}, and {@link pow pow}.  (The {@link sqrt sqrt}\n * operation is a required part of IEEE 754 from a different section\n * of the standard.) The special case behavior of the recommended\n * operations generally follows the guidance of the IEEE 754\n * standard. However, the {@code pow} method defines different\n * behavior for some arguments, as noted in its {@linkplain pow\n * specification}. The IEEE 754 standard defines its operations to be\n * correctly rounded, which is a more stringent quality of\n * implementation condition than required for most of the methods in\n * question that are also included in this class.\n *\n * @author  Joseph D. Darcy\n * @since   1.0\n */"
      },"return": "double",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Object.getClass",
      "parameters": [],
      "signature": "java.lang.Class java.lang.Object.getClass()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public final native Class<?> getClass() {}",
      "javadoc": {
        "method": "/**\n * Returns the runtime class of this {@code Object}. The returned\n * {@code Class} object is the object that is locked by {@code\n * static synchronized} methods of the represented class.\n *\n * <p><b>The actual result type is {@code Class<? extends |X|>}\n * where {@code |X|} is the erasure of the static type of the\n * expression on which {@code getClass} is called.</b> For\n * example, no cast is required in this code fragment:</p>\n *\n * <p>\n * {@code Number n = 0;                             }<br>\n * {@code Class<? extends Number> c = n.getClass(); }\n * </p>\n *\n * @return The {@code Class} object that represents the runtime\n *         class of this object.\n * @jls 15.8.2 Class Literals\n */\n",
        "class": "/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @see     java.lang.Class\n * @since   1.0\n */\n"
      },"return": "java.lang.Class",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Object.toString",
      "parameters": [],
      "signature": "java.lang.String java.lang.Object.toString()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String toString() {\r\n    return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a string representation of the object.\n * @apiNote\n * In general, the\n * {@code toString} method returns a string that\n * \"textually represents\" this object. The result should\n * be a concise but informative representation that is easy for a\n * person to read.\n * It is recommended that all subclasses override this method.\n * The string output is not necessarily stable over time or across\n * JVM invocations.\n * @implSpec\n * The {@code toString} method for class {@code Object}\n * returns a string consisting of the name of the class of which the\n * object is an instance, the at-sign character `{@code @}', and\n * the unsigned hexadecimal representation of the hash code of the\n * object. In other words, this method returns a string equal to the\n * value of:\n * <blockquote>\n * <pre>\n * getClass().getName() + '@' + Integer.toHexString(hashCode())\n * </pre></blockquote>\n *\n * @return  a string representation of the object.\n */\n",
        "class": "/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @see     java.lang.Class\n * @since   1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.ProcessBuilder.<init>",
      "parameters": [
        "java.util.List"
      ],
      "signature": "void java.lang.ProcessBuilder.<init>(java.util.List)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": false,
      "body": "public ProcessBuilder(List<String> command) {\n        if (command == null)\n            throw new NullPointerException();\n        this.command = command;\n    }",
      "javadoc": {
        "method": "/**\n     * Constructs a process builder with the specified operating\n     * system program and arguments.  This constructor does <i>not</i>\n     * make a copy of the {@code command} list.  Subsequent\n     * updates to the list will be reflected in the state of the\n     * process builder.  It is not checked whether\n     * {@code command} corresponds to a valid operating system\n     * command.\n     *\n     * @param  command the list containing the program and its arguments\n     */",
        "class": "/**\n * This class is used to create operating system processes.\n *\n * <p>Each {@code ProcessBuilder} instance manages a collection\n * of process attributes.  The {@link #start()} method creates a new\n * {@link Process} instance with those attributes.  The {@link\n * #start()} method can be invoked repeatedly from the same instance\n * to create new subprocesses with identical or related attributes.\n * <p>\n * The {@link #startPipeline startPipeline} method can be invoked to create\n * a pipeline of new processes that send the output of each process\n * directly to the next process.  Each process has the attributes of\n * its respective ProcessBuilder.\n *\n * <p>Each process builder manages these process attributes:\n *\n * <ul>\n *\n * <li>a <i>command</i>, a list of strings which signifies the\n * external program file to be invoked and its arguments, if any.\n * Which string lists represent a valid operating system command is\n * system-dependent.  For example, it is common for each conceptual\n * argument to be an element in this list, but there are operating\n * systems where programs are expected to tokenize command line\n * strings themselves - on such a system a Java implementation might\n * require commands to contain exactly two elements.\n *\n * <li>an <i>environment</i>, which is a system-dependent mapping from\n * <i>variables</i> to <i>values</i>.  The initial value is a copy of\n * the environment of the current process (see {@link System#getenv()}).\n *\n * <li>a <i>working directory</i>.  The default value is the current\n * working directory of the current process, usually the directory\n * named by the system property {@code user.dir}.\n *\n * <li><a id=\"redirect-input\">a source of <i>standard input</i></a>.\n * By default, the subprocess reads input from a pipe.  Java code\n * can access this pipe via the output stream returned by\n * {@link Process#getOutputStream()}.  However, standard input may\n * be redirected to another source using\n * {@link #redirectInput(Redirect) redirectInput}.\n * In this case, {@link Process#getOutputStream()} will return a\n * <i>null output stream</i>, for which:\n *\n * <ul>\n * <li>the {@link OutputStream#write(int) write} methods always\n * throw {@code IOException}\n * <li>the {@link OutputStream#close() close} method does nothing\n * </ul>\n *\n * <li><a id=\"redirect-output\">a destination for <i>standard output</i>\n * and <i>standard error</i></a>.  By default, the subprocess writes standard\n * output and standard error to pipes.  Java code can access these pipes\n * via the input streams returned by {@link Process#getInputStream()} and\n * {@link Process#getErrorStream()}.  However, standard output and\n * standard error may be redirected to other destinations using\n * {@link #redirectOutput(Redirect) redirectOutput} and\n * {@link #redirectError(Redirect) redirectError}.\n * In this case, {@link Process#getInputStream()} and/or\n * {@link Process#getErrorStream()} will return a <i>null input\n * stream</i>, for which:\n *\n * <ul>\n * <li>the {@link InputStream#read() read} methods always return\n * {@code -1}\n * <li>the {@link InputStream#available() available} method always returns\n * {@code 0}\n * <li>the {@link InputStream#close() close} method does nothing\n * </ul>\n *\n * <li>a <i>redirectErrorStream</i> property.  Initially, this property\n * is {@code false}, meaning that the standard output and error\n * output of a subprocess are sent to two separate streams, which can\n * be accessed using the {@link Process#getInputStream()} and {@link\n * Process#getErrorStream()} methods.\n *\n * <p>If the value is set to {@code true}, then:\n *\n * <ul>\n * <li>standard error is merged with the standard output and always sent\n * to the same destination (this makes it easier to correlate error\n * messages with the corresponding output)\n * <li>the common destination of standard error and standard output can be\n * redirected using\n * {@link #redirectOutput(Redirect) redirectOutput}\n * <li>any redirection set by the\n * {@link #redirectError(Redirect) redirectError}\n * method is ignored when creating a subprocess\n * <li>the stream returned from {@link Process#getErrorStream()} will\n * always be a <a href=\"#redirect-output\">null input stream</a>\n * </ul>\n *\n * </ul>\n *\n * <p>Modifying a process builder's attributes will affect processes\n * subsequently started by that object's {@link #start()} method, but\n * will never affect previously started processes or the Java process\n * itself.\n *\n * <p>Most error checking is performed by the {@link #start()} method.\n * It is possible to modify the state of an object so that {@link\n * #start()} will fail.  For example, setting the command attribute to\n * an empty list will not throw an exception unless {@link #start()}\n * is invoked.\n *\n * <p><strong>Note that this class is not synchronized.</strong>\n * If multiple threads access a {@code ProcessBuilder} instance\n * concurrently, and at least one of the threads modifies one of the\n * attributes structurally, it <i>must</i> be synchronized externally.\n *\n * <p>Starting a new process which uses the default working directory\n * and environment is easy:\n *\n * <pre> {@code\n * Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();\n * }</pre>\n *\n * <p>Here is an example that starts a process with a modified working\n * directory and environment, and redirects standard output and error\n * to be appended to a log file:\n *\n * <pre> {@code\n * ProcessBuilder pb =\n *   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n * Map<String, String> env = pb.environment();\n * env.put(\"VAR1\", \"myValue\");\n * env.remove(\"OTHERVAR\");\n * env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n * pb.directory(new File(\"myDir\"));\n * File log = new File(\"log\");\n * pb.redirectErrorStream(true);\n * pb.redirectOutput(Redirect.appendTo(log));\n * Process p = pb.start();\n * assert pb.redirectInput() == Redirect.PIPE;\n * assert pb.redirectOutput().file() == log;\n * assert p.getInputStream().read() == -1;\n * }</pre>\n *\n * <p>To start a process with an explicit set of environment\n * variables, first call {@link java.util.Map#clear() Map.clear()}\n * before adding environment variables.\n *\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @author Martin Buchholz\n * @since 1.5\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Runtime.getRuntime",
      "parameters": [],
      "signature": "java.lang.Runtime java.lang.Runtime.getRuntime()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static Runtime getRuntime() {\r\n    return currentRuntime;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the runtime object associated with the current Java application.\n * Most of the methods of class {@code Runtime} are instance\n * methods and must be invoked with respect to the current runtime object.\n *\n * @return  the {@code Runtime} object associated with the current\n *          Java application.\n */\n",
        "class": ""
      },"return": "java.lang.Runtime",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.charAt",
      "parameters": [
        "int"
      ],
      "signature": "char java.lang.String.charAt(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public char charAt(int index) {\r\n    if (isLatin1()) {\r\n        return StringLatin1.charAt(value, index);\r\n    } else {\r\n        return StringUTF16.charAt(value, index);\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the {@code char} value at the\n * specified index. An index ranges from {@code 0} to\n * {@code length() - 1}. The first {@code char} value of the sequence\n * is at index {@code 0}, the next at index {@code 1},\n * and so on, as for array indexing.\n *\n * <p>If the {@code char} value specified by the index is a\n * <a href=\"Character.html#unicode\">surrogate</a>, the surrogate\n * value is returned.\n *\n * @param      index   the index of the {@code char} value.\n * @return     the {@code char} value at the specified index of this string.\n *             The first {@code char} value is at index {@code 0}.\n * @throws     IndexOutOfBoundsException  if the {@code index}\n *             argument is negative or not less than the length of this\n *             string.\n */\n",
        "class": ""
      },"return": "char",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.indexOf",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "int java.lang.String.indexOf(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int indexOf(String str) {\r\n    byte coder = coder();\r\n    if (coder == str.coder()) {\r\n        return isLatin1() ? StringLatin1.indexOf(value, str.value) : StringUTF16.indexOf(value, str.value);\r\n    }\r\n    if (coder == LATIN1) {\r\n        // str.coder == UTF16\r\n        return -1;\r\n    }\r\n    return StringUTF16.indexOfLatin1(value, str.value);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the index within this string of the first occurrence of the\n * specified substring.\n *\n * <p>The returned index is the smallest value {@code k} for which:\n * <pre>{@code\n * this.startsWith(str, k)\n * }</pre>\n * If no such value of {@code k} exists, then {@code -1} is returned.\n *\n * @param   str   the substring to search for.\n * @return  the index of the first occurrence of the specified substring,\n *          or {@code -1} if there is no such occurrence.\n */\n",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.indexOf",
      "parameters": [
        "java.lang.String",
        "int"
      ],
      "signature": "int java.lang.String.indexOf(java.lang.String,int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int indexOf(String str, int fromIndex) {\r\n    return indexOf(value, coder(), length(), str, fromIndex);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the index within this string of the first occurrence of the\n * specified substring, starting at the specified index.\n *\n * <p>The returned index is the smallest value {@code k} for which:\n * <pre>{@code\n *     k >= Math.min(fromIndex, this.length()) &&\n *                   this.startsWith(str, k)\n * }</pre>\n * If no such value of {@code k} exists, then {@code -1} is returned.\n *\n * @param   str         the substring to search for.\n * @param   fromIndex   the index from which to start the search.\n * @return  the index of the first occurrence of the specified substring,\n *          starting at the specified index,\n *          or {@code -1} if there is no such occurrence.\n */\n",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.lastIndexOf",
      "parameters": [
        "int"
      ],
      "signature": "int java.lang.String.lastIndexOf(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int lastIndexOf(int ch) {\r\n    return lastIndexOf(ch, length() - 1);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the index within this string of the last occurrence of\n * the specified character. For values of {@code ch} in the\n * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n * units) returned is the largest value <i>k</i> such that:\n * <blockquote><pre>\n * this.charAt(<i>k</i>) == ch\n * </pre></blockquote>\n * is true. For other values of {@code ch}, it is the\n * largest value <i>k</i> such that:\n * <blockquote><pre>\n * this.codePointAt(<i>k</i>) == ch\n * </pre></blockquote>\n * is true.  In either case, if no such character occurs in this\n * string, then {@code -1} is returned.  The\n * {@code String} is searched backwards starting at the last\n * character.\n *\n * @param   ch   a character (Unicode code point).\n * @return  the index of the last occurrence of the character in the\n *          character sequence represented by this object, or\n *          {@code -1} if the character does not occur.\n */\n",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.length",
      "parameters": [],
      "signature": "int java.lang.String.length()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int length() {\r\n    return value.length >> coder();\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the length of this string.\n * The length is equal to the number of <a href=\"Character.html#unicode\">Unicode\n * code units</a> in the string.\n *\n * @return  the length of the sequence of characters represented by this\n *          object.\n */\n",
        "class": ""
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.replace",
      "parameters": [
        "char",
        "char"
      ],
      "signature": "java.lang.String java.lang.String.replace(char,char)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String replace(char oldChar, char newChar) {\r\n    if (oldChar != newChar) {\r\n        String ret = isLatin1() ? StringLatin1.replace(value, oldChar, newChar) : StringUTF16.replace(value, oldChar, newChar);\r\n        if (ret != null) {\r\n            return ret;\r\n        }\r\n    }\r\n    return this;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a string resulting from replacing all occurrences of\n * {@code oldChar} in this string with {@code newChar}.\n * <p>\n * If the character {@code oldChar} does not occur in the\n * character sequence represented by this {@code String} object,\n * then a reference to this {@code String} object is returned.\n * Otherwise, a {@code String} object is returned that\n * represents a character sequence identical to the character sequence\n * represented by this {@code String} object, except that every\n * occurrence of {@code oldChar} is replaced by an occurrence\n * of {@code newChar}.\n * <p>\n * Examples:\n * <blockquote><pre>\n * \"mesquite in your cellar\".replace('e', 'o')\n *         returns \"mosquito in your collar\"\n * \"the war of baronets\".replace('r', 'y')\n *         returns \"the way of bayonets\"\n * \"sparring with a purple porpoise\".replace('p', 't')\n *         returns \"starring with a turtle tortoise\"\n * \"JonL\".replace('q', 'x') returns \"JonL\" (no change)\n * </pre></blockquote>\n *\n * @param   oldChar   the old character.\n * @param   newChar   the new character.\n * @return  a string derived from this string by replacing every\n *          occurrence of {@code oldChar} with {@code newChar}.\n */\n",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.substring",
      "parameters": [
        "int",
        "int"
      ],
      "signature": "java.lang.String java.lang.String.substring(int,int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String substring(int beginIndex, int endIndex) {\r\n    int length = length();\r\n    checkBoundsBeginEnd(beginIndex, endIndex, length);\r\n    if (beginIndex == 0 && endIndex == length) {\r\n        return this;\r\n    }\r\n    int subLen = endIndex - beginIndex;\r\n    return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen) : StringUTF16.newString(value, beginIndex, subLen);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a string that is a substring of this string. The\n * substring begins at the specified {@code beginIndex} and\n * extends to the character at index {@code endIndex - 1}.\n * Thus the length of the substring is {@code endIndex-beginIndex}.\n * <p>\n * Examples:\n * <blockquote><pre>\n * \"hamburger\".substring(4, 8) returns \"urge\"\n * \"smiles\".substring(1, 5) returns \"mile\"\n * </pre></blockquote>\n *\n * @param      beginIndex   the beginning index, inclusive.\n * @param      endIndex     the ending index, exclusive.\n * @return     the specified substring.\n * @throws     IndexOutOfBoundsException  if the\n *             {@code beginIndex} is negative, or\n *             {@code endIndex} is larger than the length of\n *             this {@code String} object, or\n *             {@code beginIndex} is larger than\n *             {@code endIndex}.\n */\n",
        "class": ""
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.split",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String[] java.lang.String.split(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String[] split(String regex) {\r\n    return split(regex, 0);\r\n}",
      "javadoc": {
        "method": "/**\n * Splits this string around matches of the given <a\n * href=\"../util/regex/Pattern.html#sum\">regular expression</a>.\n *\n * <p> This method works as if by invoking the two-argument {@link\n * #split(java.lang.String, int) split} method with the given expression and a limit\n * argument of zero.  Trailing empty strings are therefore not included in\n * the resulting array.\n *\n * <p> The string {@code \"boo:and:foo\"}, for example, yields the following\n * results with these expressions:\n *\n * <blockquote><table class=\"plain\">\n * <caption style=\"display:none\">Split examples showing regex and result</caption>\n * <thead>\n * <tr>\n *  <th scope=\"col\">Regex</th>\n *  <th scope=\"col\">Result</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr><th scope=\"row\" style=\"text-weight:normal\">:</th>\n *     <td>{@code { \"boo\", \"and\", \"foo\" }}</td></tr>\n * <tr><th scope=\"row\" style=\"text-weight:normal\">o</th>\n *     <td>{@code { \"b\", \"\", \":and:f\" }}</td></tr>\n * </tbody>\n * </table></blockquote>\n *\n *\n * @param  regex\n *         the delimiting regular expression\n *\n * @return  the array of strings computed by splitting this string\n *          around matches of the given regular expression\n *\n * @throws  PatternSyntaxException\n *          if the regular expression's syntax is invalid\n *\n * @see java.util.regex.Pattern\n *\n * @since 1.4\n */\n",
        "class": ""
      },"return": "java.lang.String[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.<init>",
      "parameters": [
        "byte[]"
      ],
      "signature": "void java.lang.String.<init>(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String(byte[] bytes) {\r\n    this(bytes, 0, bytes.length);\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a new {@code String} by decoding the specified array of bytes\n * using the platform's default charset.  The length of the new {@code\n * String} is a function of the charset, and hence may not be equal to the\n * length of the byte array.\n *\n * <p> The behavior of this constructor when the given bytes are not valid\n * in the default charset is unspecified.  The {@link\n * java.nio.charset.CharsetDecoder} class should be used when more control\n * over the decoding process is required.\n *\n * @param  bytes\n *         The bytes to be decoded into characters\n *\n * @since  1.1\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.String.<init>",
      "parameters": [
        "byte[]",
        "int",
        "int"
      ],
      "signature": "void java.lang.String.<init>(byte[],int,int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String(byte[] bytes, int offset, int length) {\r\n    this(bytes, offset, length, Charset.defaultCharset());\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a new {@code String} by decoding the specified subarray of\n * bytes using the platform's default charset.  The length of the new\n * {@code String} is a function of the charset, and hence may not be equal\n * to the length of the subarray.\n *\n * <p> The behavior of this constructor when the given bytes are not valid\n * in the default charset is unspecified.  The {@link\n * java.nio.charset.CharsetDecoder} class should be used when more control\n * over the decoding process is required.\n *\n * @param  bytes\n *         The bytes to be decoded into characters\n *\n * @param  offset\n *         The index of the first byte to decode\n *\n * @param  length\n *         The number of bytes to decode\n *\n * @throws  IndexOutOfBoundsException\n *          If {@code offset} is negative, {@code length} is negative, or\n *          {@code offset} is greater than {@code bytes.length - length}\n *\n * @since  1.1\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.StringBuffer.toString",
      "parameters": [],
      "signature": "java.lang.String java.lang.StringBuffer.toString()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public synchronized String toString() {\r\n    if (toStringCache == null) {\r\n        return toStringCache = isLatin1() ? StringLatin1.newString(value, 0, count) : StringUTF16.newString(value, 0, count);\r\n    }\r\n    return new String(toStringCache);\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * A thread-safe, mutable sequence of characters.\n * A string buffer is like a {@link String}, but can be modified. At any\n * point in time it contains some particular sequence of characters, but\n * the length and content of the sequence can be changed through certain\n * method calls.\n * <p>\n * String buffers are safe for use by multiple threads. The methods\n * are synchronized where necessary so that all the operations on any\n * particular instance behave as if they occur in some serial order\n * that is consistent with the order of the method calls made by each of\n * the individual threads involved.\n * <p>\n * The principal operations on a {@code StringBuffer} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string buffer. The\n * {@code append} method always adds these characters at the end\n * of the buffer; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string buffer object\n * whose current contents are {@code \"start\"}, then\n * the method call {@code z.append(\"le\")} would cause the string\n * buffer to contain {@code \"startle\"}, whereas\n * {@code z.insert(4, \"le\")} would alter the string buffer to\n * contain {@code \"starlet\"}.\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuffer},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Whenever an operation occurs involving a source sequence (such as\n * appending or inserting from a source sequence), this class synchronizes\n * only on the string buffer performing the operation, not on the source.\n * Note that while {@code StringBuffer} is designed to be safe to use\n * concurrently from multiple threads, if the constructor or the\n * {@code append} or {@code insert} operation is passed a source sequence\n * that is shared across threads, the calling code must ensure\n * that the operation has a consistent and unchanging view of the source\n * sequence for the duration of the operation.\n * This could be satisfied by the caller holding a lock during the\n * operation's call, by using an immutable source sequence, or by not\n * sharing the source sequence across threads.\n * <p>\n * Every string buffer has a capacity. As long as the length of the\n * character sequence contained in the string buffer does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer array. If the internal buffer overflows, it is\n * automatically made larger.\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n * <p>\n * As of  release JDK 5, this class has been supplemented with an equivalent\n * class designed for use by a single thread, {@link StringBuilder}.  The\n * {@code StringBuilder} class should generally be used in preference to\n * this one, as it supports all of the same operations but it is faster, as\n * it performs no synchronization.\n *\n * @apiNote\n * {@code StringBuffer} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuffer}\n * is inconsistent with equals. Care should be exercised if {@code StringBuffer}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Arthur van Hoff\n * @see     java.lang.StringBuilder\n * @see     java.lang.String\n * @since   1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Throwable.getMessage",
      "parameters": [],
      "signature": "java.lang.String java.lang.Throwable.getMessage()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String getMessage() {\r\n    return detailMessage;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the detail message string of this throwable.\n *\n * @return  the detail message string of this {@code Throwable} instance\n *          (which may be {@code null}).\n */\n",
        "class": "/**\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * <p>Instances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * <p>A throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a <i>cause</i>: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the <i>chained exception</i> facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * <p>One reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer's exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * <p>A second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * <p>A cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * <p>By convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since 1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Throwable.addSuppressed",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "void java.lang.Throwable.addSuppressed(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public final synchronized void addSuppressed(Throwable exception) {\r\n    if (exception == this)\r\n        throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE, exception);\r\n    Objects.requireNonNull(exception, NULL_CAUSE_MESSAGE);\r\n    if (// Suppressed exceptions not recorded\r\n    suppressedExceptions == null)\r\n        return;\r\n    if (suppressedExceptions == SUPPRESSED_SENTINEL)\r\n        suppressedExceptions = new ArrayList<>(1);\r\n    suppressedExceptions.add(exception);\r\n}",
      "javadoc": {
        "method": "/**\n * Appends the specified exception to the exceptions that were\n * suppressed in order to deliver this exception. This method is\n * thread-safe and typically called (automatically and implicitly)\n * by the {@code try}-with-resources statement.\n *\n * <p>The suppression behavior is enabled <em>unless</em> disabled\n * {@linkplain #Throwable(java.lang.String, Throwable, boolean, boolean) via\n * a constructor}.  When suppression is disabled, this method does\n * nothing other than to validate its argument.\n *\n * <p>Note that when one exception {@linkplain\n * #initCause(Throwable) causes} another exception, the first\n * exception is usually caught and then the second exception is\n * thrown in response.  In other words, there is a causal\n * connection between the two exceptions.\n *\n * In contrast, there are situations where two independent\n * exceptions can be thrown in sibling code blocks, in particular\n * in the {@code try} block of a {@code try}-with-resources\n * statement and the compiler-generated {@code finally} block\n * which closes the resource.\n *\n * In these situations, only one of the thrown exceptions can be\n * propagated.  In the {@code try}-with-resources statement, when\n * there are two such exceptions, the exception originating from\n * the {@code try} block is propagated and the exception from the\n * {@code finally} block is added to the list of exceptions\n * suppressed by the exception from the {@code try} block.  As an\n * exception unwinds the stack, it can accumulate multiple\n * suppressed exceptions.\n *\n * <p>An exception may have suppressed exceptions while also being\n * caused by another exception.  Whether or not an exception has a\n * cause is semantically known at the time of its creation, unlike\n * whether or not an exception will suppress other exceptions\n * which is typically only determined after an exception is\n * thrown.\n *\n * <p>Note that programmer written code is also able to take\n * advantage of calling this method in situations where there are\n * multiple sibling exceptions and only one can be propagated.\n *\n * @param exception the exception to be added to the list of\n *        suppressed exceptions\n * @throws IllegalArgumentException if {@code exception} is this\n *         throwable; a throwable cannot suppress itself.\n * @throws NullPointerException if {@code exception} is {@code null}\n * @since 1.7\n */\n",
        "class": "/**\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * <p>Instances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * <p>A throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a <i>cause</i>: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the <i>chained exception</i> facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * <p>One reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer's exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * <p>A second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * <p>A cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * <p>By convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since 1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.lang.Throwable.printStackTrace",
      "parameters": [
        "java.io.PrintWriter"
      ],
      "signature": "void java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void printStackTrace(PrintWriter s) {\r\n    printStackTrace(new WrappedPrintWriter(s));\r\n}",
      "javadoc": {
        "method": "/**\n * Prints this throwable and its backtrace to the specified\n * print writer.\n *\n * @param s {@code PrintWriter} to use for output\n * @since   1.1\n */\n",
        "class": "/**\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * <p>Instances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * <p>A throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a <i>cause</i>: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the <i>chained exception</i> facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * <p>One reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer's exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * <p>A second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * <p>A cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * <p>By convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since 1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URI.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.net.URI.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public URI(String str) throws URISyntaxException {\r\n    new Parser(str).parse(false);\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a URI by parsing the given string.\n *\n * <p> This constructor parses the given string exactly as specified by the\n * grammar in <a\n * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,\n * Appendix&nbsp;A, <b><i>except for the following deviations:</i></b> </p>\n *\n * <ul>\n *\n *   <li><p> An empty authority component is permitted as long as it is\n *   followed by a non-empty path, a query component, or a fragment\n *   component.  This allows the parsing of URIs such as\n *   {@code \"file:///foo/bar\"}, which seems to be the intent of\n *   RFC&nbsp;2396 although the grammar does not permit it.  If the\n *   authority component is empty then the user-information, host, and port\n *   components are undefined. </p></li>\n *\n *   <li><p> Empty relative paths are permitted; this seems to be the\n *   intent of RFC&nbsp;2396 although the grammar does not permit it.  The\n *   primary consequence of this deviation is that a standalone fragment\n *   such as {@code \"#foo\"} parses as a relative URI with an empty path\n *   and the given fragment, and can be usefully <a\n *   href=\"#resolve-frag\">resolved</a> against a base URI.\n *\n *   <li><p> IPv4 addresses in host components are parsed rigorously, as\n *   specified by <a\n *   href=\"http://www.ietf.org/rfc/rfc2732.txt\">RFC&nbsp;2732</a>: Each\n *   element of a dotted-quad address must contain no more than three\n *   decimal digits.  Each element is further constrained to have a value\n *   no greater than 255. </p></li>\n *\n *   <li> <p> Hostnames in host components that comprise only a single\n *   domain label are permitted to start with an <i>alphanum</i>\n *   character. This seems to be the intent of <a\n *   href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>\n *   section&nbsp;3.2.2 although the grammar does not permit it. The\n *   consequence of this deviation is that the authority component of a\n *   hierarchical URI such as {@code s://123}, will parse as a server-based\n *   authority. </p></li>\n *\n *   <li><p> IPv6 addresses are permitted for the host component.  An IPv6\n *   address must be enclosed in square brackets ({@code '['} and\n *   {@code ']'}) as specified by <a\n *   href=\"http://www.ietf.org/rfc/rfc2732.txt\">RFC&nbsp;2732</a>.  The\n *   IPv6 address itself must parse according to <a\n *   href=\"http://www.ietf.org/rfc/rfc2373.txt\">RFC&nbsp;2373</a>.  IPv6\n *   addresses are further constrained to describe no more than sixteen\n *   bytes of address information, a constraint implicit in RFC&nbsp;2373\n *   but not expressible in the grammar. </p></li>\n *\n *   <li><p> Characters in the <i>other</i> category are permitted wherever\n *   RFC&nbsp;2396 permits <i>escaped</i> octets, that is, in the\n *   user-information, path, query, and fragment components, as well as in\n *   the authority component if the authority is registry-based.  This\n *   allows URIs to contain Unicode characters beyond those in the US-ASCII\n *   character set. </p></li>\n *\n * </ul>\n *\n * @param  str   The string to be parsed into a URI\n *\n * @throws  NullPointerException\n *          If {@code str} is {@code null}\n *\n * @throws  URISyntaxException\n *          If the given string violates RFC&nbsp;2396, as augmented\n *          by the above deviations\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URI.<init>",
      "parameters": [
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "void java.net.URI.<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "public URI(String scheme,\n               String authority,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            authority, null, null, -1,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(false);\n    }",
      "javadoc": {
        "method": "/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,\n     * section&nbsp;5.2, step&nbsp;7: </p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty.  </p></li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  </p></li>\n     *\n     *   <li><p> If an authority is given then the string {@code \"//\"} is\n     *   appended, followed by the authority.  If the authority contains a\n     *   literal IPv6 address then the address must be enclosed in square\n     *   brackets ({@code '['} and {@code ']'}).  Any character not in the\n     *   <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>\n     *   categories, and not equal to the commercial-at character\n     *   ({@code '@'}), is <a href=\"#quote\">quoted</a>.  </p></li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved</i>, <i>punct</i>, <i>escaped</i>, or <i>other</i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  </p></li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character</a> is quoted.\n     *   </p></li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  </p></li>\n     *\n     * </ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  </p>\n     *\n     * @param   scheme     Scheme name\n     * @param   authority  Authority\n     * @param   path       Path\n     * @param   query      Query\n     * @param   fragment   Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */",
        "class": "/**\n * Represents a Uniform Resource Identifier (URI) reference.\n *\n * <p> Aside from some minor deviations noted below, an instance of this\n * class represents a URI reference as defined by\n * <a href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform\n * Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a\n * href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for\n * Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format\n * also supports scope_ids. The syntax and usage of scope_ids is described\n * <a href=\"Inet6Address.html#scoped\">here</a>.\n * This class provides constructors for creating URI instances from\n * their components or by parsing their string forms, methods for accessing the\n * various components of an instance, and methods for normalizing, resolving,\n * and relativizing URI instances.  Instances of this class are immutable.\n *\n *\n * <h2> URI syntax and components </h2>\n *\n * At the highest level a URI reference (hereinafter simply \"URI\") in string\n * form has the syntax\n *\n * <blockquote>\n * [<i>scheme</i><b>{@code :}</b>]<i>scheme-specific-part</i>[<b>{@code #}</b><i>fragment</i>]\n * </blockquote>\n *\n * where square brackets [...] delineate optional components and the characters\n * <b>{@code :}</b> and <b>{@code #}</b> stand for themselves.\n *\n * <p> An <i>absolute</i> URI specifies a scheme; a URI that is not absolute is\n * said to be <i>relative</i>.  URIs are also classified according to whether\n * they are <i>opaque</i> or <i>hierarchical</i>.\n *\n * <p> An <i>opaque</i> URI is an absolute URI whose scheme-specific part does\n * not begin with a slash character ({@code '/'}).  Opaque URIs are not\n * subject to further parsing.  Some examples of opaque URIs are:\n *\n * <blockquote><ul style=\"list-style-type:none\">\n * <li>{@code mailto:java-net@www.example.com}</li>\n * <li>{@code news:comp.lang.java}</li>\n * <li>{@code urn:isbn:096139210x}</li>\n * </ul></blockquote>\n *\n * <p> A <i>hierarchical</i> URI is either an absolute URI whose\n * scheme-specific part begins with a slash character, or a relative URI, that\n * is, a URI that does not specify a scheme.  Some examples of hierarchical\n * URIs are:\n *\n * <blockquote>\n * {@code http://example.com/languages/java/}<br>\n * {@code sample/a/index.html#28}<br>\n * {@code ../../demo/b/index.html}<br>\n * {@code file:///~/calendar}\n * </blockquote>\n *\n * <p> A hierarchical URI is subject to further parsing according to the syntax\n *\n * <blockquote>\n * [<i>scheme</i><b>{@code :}</b>][<b>{@code //}</b><i>authority</i>][<i>path</i>][<b>{@code ?}</b><i>query</i>][<b>{@code #}</b><i>fragment</i>]\n * </blockquote>\n *\n * where the characters <b>{@code :}</b>, <b>{@code /}</b>,\n * <b>{@code ?}</b>, and <b>{@code #}</b> stand for themselves.  The\n * scheme-specific part of a hierarchical URI consists of the characters\n * between the scheme and fragment components.\n *\n * <p> The authority component of a hierarchical URI is, if specified, either\n * <i>server-based</i> or <i>registry-based</i>.  A server-based authority\n * parses according to the familiar syntax\n *\n * <blockquote>\n * [<i>user-info</i><b>{@code @}</b>]<i>host</i>[<b>{@code :}</b><i>port</i>]\n * </blockquote>\n *\n * where the characters <b>{@code @}</b> and <b>{@code :}</b> stand for\n * themselves.  Nearly all URI schemes currently in use are server-based.  An\n * authority component that does not parse in this way is considered to be\n * registry-based.\n *\n * <p> The path component of a hierarchical URI is itself said to be absolute\n * if it begins with a slash character ({@code '/'}); otherwise it is\n * relative.  The path of a hierarchical URI that is either absolute or\n * specifies an authority is always absolute.\n *\n * <p> All told, then, a URI instance has the following nine components:\n *\n * <table class=\"striped\" style=\"margin-left:2em\">\n * <caption style=\"display:none\">Describes the components of a URI:scheme,scheme-specific-part,authority,user-info,host,port,path,query,fragment</caption>\n * <thead>\n * <tr><th scope=\"col\">Component</th><th scope=\"col\">Type</th></tr>\n * </thead>\n * <tbody style=\"text-align:left\">\n * <tr><th scope=\"row\">scheme</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">scheme-specific-part</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">authority</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">user-info</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">host</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">port</th><td>{@code int}</td></tr>\n * <tr><th scope=\"row\">path</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">query</th><td>{@code String}</td></tr>\n * <tr><th scope=\"row\">fragment</th><td>{@code String}</td></tr>\n * </tbody>\n * </table>\n *\n * In a given instance any particular component is either <i>undefined</i> or\n * <i>defined</i> with a distinct value.  Undefined string components are\n * represented by {@code null}, while undefined integer components are\n * represented by {@code -1}.  A string component may be defined to have the\n * empty string as its value; this is not equivalent to that component being\n * undefined.\n *\n * <p> Whether a particular component is or is not defined in an instance\n * depends upon the type of the URI being represented.  An absolute URI has a\n * scheme component.  An opaque URI has a scheme, a scheme-specific part, and\n * possibly a fragment, but has no other components.  A hierarchical URI always\n * has a path (though it may be empty) and a scheme-specific-part (which at\n * least contains the path), and may have any of the other components.  If the\n * authority component is present and is server-based then the host component\n * will be defined and the user-information and port components may be defined.\n *\n *\n * <h3> Operations on URI instances </h3>\n *\n * The key operations supported by this class are those of\n * <i>normalization</i>, <i>resolution</i>, and <i>relativization</i>.\n *\n * <p> <i>Normalization</i> is the process of removing unnecessary {@code \".\"}\n * and {@code \"..\"} segments from the path component of a hierarchical URI.\n * Each {@code \".\"} segment is simply removed.  A {@code \"..\"} segment is\n * removed only if it is preceded by a non-{@code \"..\"} segment.\n * Normalization has no effect upon opaque URIs.\n *\n * <p> <i>Resolution</i> is the process of resolving one URI against another,\n * <i>base</i> URI.  The resulting URI is constructed from components of both\n * URIs in the manner specified by RFC&nbsp;2396, taking components from the\n * base URI for those not specified in the original.  For hierarchical URIs,\n * the path of the original is resolved against the path of the base and then\n * normalized.  The result, for example, of resolving\n *\n * <blockquote>\n * {@code sample/a/index.html#28}\n * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n * &nbsp;&nbsp;&nbsp;&nbsp;(1)\n * </blockquote>\n *\n * against the base URI {@code http://example.com/languages/java/} is the result\n * URI\n *\n * <blockquote>\n * {@code http://example.com/languages/java/sample/a/index.html#28}\n * </blockquote>\n *\n * Resolving the relative URI\n *\n * <blockquote>\n * {@code ../../demo/b/index.html}&nbsp;&nbsp;&nbsp;&nbsp;(2)\n * </blockquote>\n *\n * against this result yields, in turn,\n *\n * <blockquote>\n * {@code http://example.com/languages/java/demo/b/index.html}\n * </blockquote>\n *\n * Resolution of both absolute and relative URIs, and of both absolute and\n * relative paths in the case of hierarchical URIs, is supported.  Resolving\n * the URI {@code file:///~calendar} against any other URI simply yields the\n * original URI, since it is absolute.  Resolving the relative URI (2) above\n * against the relative base URI (1) yields the normalized, but still relative,\n * URI\n *\n * <blockquote>\n * {@code demo/b/index.html}\n * </blockquote>\n *\n * <p> <i>Relativization</i>, finally, is the inverse of resolution: For any\n * two normalized URIs <i>u</i> and&nbsp;<i>v</i>,\n *\n * <blockquote>\n *   <i>u</i>{@code .relativize(}<i>u</i>{@code .resolve(}<i>v</i>{@code )).equals(}<i>v</i>{@code )}&nbsp;&nbsp;and<br>\n *   <i>u</i>{@code .resolve(}<i>u</i>{@code .relativize(}<i>v</i>{@code )).equals(}<i>v</i>{@code )}&nbsp;&nbsp;.<br>\n * </blockquote>\n *\n * This operation is often useful when constructing a document containing URIs\n * that must be made relative to the base URI of the document wherever\n * possible.  For example, relativizing the URI\n *\n * <blockquote>\n * {@code http://example.com/languages/java/sample/a/index.html#28}\n * </blockquote>\n *\n * against the base URI\n *\n * <blockquote>\n * {@code http://example.com/languages/java/}\n * </blockquote>\n *\n * yields the relative URI {@code sample/a/index.html#28}.\n *\n *\n * <h3> Character categories </h3>\n *\n * RFC&nbsp;2396 specifies precisely which characters are permitted in the\n * various components of a URI reference.  The following categories, most of\n * which are taken from that specification, are used below to describe these\n * constraints:\n *\n * <table class=\"striped\" style=\"margin-left:2em\">\n * <caption style=\"display:none\">Describes categories alpha,digit,alphanum,unreserved,punct,reserved,escaped,and other</caption>\n *   <thead>\n *   <tr><th scope=\"col\">Category</th><th scope=\"col\">Description</th></tr>\n *   </thead>\n *   <tbody style=\"text-align:left\">\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">alpha</th>\n *       <td>The US-ASCII alphabetic characters,\n *        {@code 'A'}&nbsp;through&nbsp;{@code 'Z'}\n *        and {@code 'a'}&nbsp;through&nbsp;{@code 'z'}</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">digit</th>\n *       <td>The US-ASCII decimal digit characters,\n *       {@code '0'}&nbsp;through&nbsp;{@code '9'}</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">alphanum</th>\n *       <td>All <i>alpha</i> and <i>digit</i> characters</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">unreserved</th>\n *       <td>All <i>alphanum</i> characters together with those in the string\n *        {@code \"_-!.~'()*\"}</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">punct</th>\n *       <td>The characters in the string {@code \",;:$&+=\"}</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">reserved</th>\n *       <td>All <i>punct</i> characters together with those in the string\n *        {@code \"?/[]@\"}</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">escaped</th>\n *       <td>Escaped octets, that is, triplets consisting of the percent\n *           character ({@code '%'}) followed by two hexadecimal digits\n *           ({@code '0'}-{@code '9'}, {@code 'A'}-{@code 'F'}, and\n *           {@code 'a'}-{@code 'f'})</td></tr>\n *   <tr><th scope=\"row\" style=\"vertical-align:top\">other</th>\n *       <td>The Unicode characters that are not in the US-ASCII character set,\n *           are not control characters (according to the {@link\n *           java.lang.Character#isISOControl(char) Character.isISOControl}\n *           method), and are not space characters (according to the {@link\n *           java.lang.Character#isSpaceChar(char) Character.isSpaceChar}\n *           method)&nbsp;&nbsp;<i>(<b>Deviation from RFC 2396</b>, which is\n *           limited to US-ASCII)</i></td></tr>\n * </tbody>\n * </table>\n *\n * <p><a id=\"legal-chars\"></a> The set of all legal URI characters consists of\n * the <i>unreserved</i>, <i>reserved</i>, <i>escaped</i>, and <i>other</i>\n * characters.\n *\n *\n * <h3> Escaped octets, quotation, encoding, and decoding </h3>\n *\n * RFC 2396 allows escaped octets to appear in the user-info, path, query, and\n * fragment components.  Escaping serves two purposes in URIs:\n *\n * <ul>\n *\n *   <li><p> To <i>encode</i> non-US-ASCII characters when a URI is required to\n *   conform strictly to RFC&nbsp;2396 by not containing any <i>other</i>\n *   characters.  </p></li>\n *\n *   <li><p> To <i>quote</i> characters that are otherwise illegal in a\n *   component.  The user-info, path, query, and fragment components differ\n *   slightly in terms of which characters are considered legal and illegal.\n *   </p></li>\n *\n * </ul>\n *\n * These purposes are served in this class by three related operations:\n *\n * <ul>\n *\n *   <li><p><a id=\"encode\"></a> A character is <i>encoded</i> by replacing it\n *   with the sequence of escaped octets that represent that character in the\n *   UTF-8 character set.  The Euro currency symbol ({@code '\\u005Cu20AC'}),\n *   for example, is encoded as {@code \"%E2%82%AC\"}.  <i>(<b>Deviation from\n *   RFC&nbsp;2396</b>, which does not specify any particular character\n *   set.)</i> </p></li>\n *\n *   <li><p><a id=\"quote\"></a> An illegal character is <i>quoted</i> simply by\n *   encoding it.  The space character, for example, is quoted by replacing it\n *   with {@code \"%20\"}.  UTF-8 contains US-ASCII, hence for US-ASCII\n *   characters this transformation has exactly the effect required by\n *   RFC&nbsp;2396. </p></li>\n *\n *   <li><p><a id=\"decode\"></a>\n *   A sequence of escaped octets is <i>decoded</i> by\n *   replacing it with the sequence of characters that it represents in the\n *   UTF-8 character set.  UTF-8 contains US-ASCII, hence decoding has the\n *   effect of de-quoting any quoted US-ASCII characters as well as that of\n *   decoding any encoded non-US-ASCII characters.  If a <a\n *   href=\"../nio/charset/CharsetDecoder.html#ce\">decoding error</a> occurs\n *   when decoding the escaped octets then the erroneous octets are replaced by\n *   {@code '\\u005CuFFFD'}, the Unicode replacement character.  </p></li>\n *\n * </ul>\n *\n * These operations are exposed in the constructors and methods of this class\n * as follows:\n *\n * <ul>\n *\n *   <li><p> The {@linkplain #URI(java.lang.String) single-argument\n *   constructor} requires any illegal characters in its argument to be\n *   quoted and preserves any escaped octets and <i>other</i> characters that\n *   are present.  </p></li>\n *\n *   <li><p> The {@linkplain\n *   #URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)\n *   multi-argument constructors} quote illegal characters as\n *   required by the components in which they appear.  The percent character\n *   ({@code '%'}) is always quoted by these constructors.  Any <i>other</i>\n *   characters are preserved.  </p></li>\n *\n *   <li><p> The {@link #getRawUserInfo() getRawUserInfo}, {@link #getRawPath()\n *   getRawPath}, {@link #getRawQuery() getRawQuery}, {@link #getRawFragment()\n *   getRawFragment}, {@link #getRawAuthority() getRawAuthority}, and {@link\n *   #getRawSchemeSpecificPart() getRawSchemeSpecificPart} methods return the\n *   values of their corresponding components in raw form, without interpreting\n *   any escaped octets.  The strings returned by these methods may contain\n *   both escaped octets and <i>other</i> characters, and will not contain any\n *   illegal characters.  </p></li>\n *\n *   <li><p> The {@link #getUserInfo() getUserInfo}, {@link #getPath()\n *   getPath}, {@link #getQuery() getQuery}, {@link #getFragment()\n *   getFragment}, {@link #getAuthority() getAuthority}, and {@link\n *   #getSchemeSpecificPart() getSchemeSpecificPart} methods decode any escaped\n *   octets in their corresponding components.  The strings returned by these\n *   methods may contain both <i>other</i> characters and illegal characters,\n *   and will not contain any escaped octets.  </p></li>\n *\n *   <li><p> The {@link #toString() toString} method returns a URI string with\n *   all necessary quotation but which may contain <i>other</i> characters.\n *   </p></li>\n *\n *   <li><p> The {@link #toASCIIString() toASCIIString} method returns a fully\n *   quoted and encoded URI string that does not contain any <i>other</i>\n *   characters.  </p></li>\n *\n * </ul>\n *\n *\n * <h3> Identities </h3>\n *\n * For any URI <i>u</i>, it is always the case that\n *\n * <blockquote>\n * {@code new URI(}<i>u</i>{@code .toString()).equals(}<i>u</i>{@code )}&nbsp;.\n * </blockquote>\n *\n * For any URI <i>u</i> that does not contain redundant syntax such as two\n * slashes before an empty authority (as in {@code file:///tmp/}&nbsp;) or a\n * colon following a host name but no port (as in\n * {@code http://www.example.com:}&nbsp;), and that does not encode characters\n * except those that must be quoted, the following identities also hold:\n * <pre>\n *     new URI(<i>u</i>.getScheme(),\n *             <i>u</i>.getSchemeSpecificPart(),\n *             <i>u</i>.getFragment())\n *     .equals(<i>u</i>)</pre>\n * in all cases,\n * <pre>\n *     new URI(<i>u</i>.getScheme(),\n *             <i>u</i>.getAuthority(),\n *             <i>u</i>.getPath(), <i>u</i>.getQuery(),\n *             <i>u</i>.getFragment())\n *     .equals(<i>u</i>)</pre>\n * if <i>u</i> is hierarchical, and\n * <pre>\n *     new URI(<i>u</i>.getScheme(),\n *             <i>u</i>.getUserInfo(), <i>u</i>.getHost(), <i>u</i>.getPort(),\n *             <i>u</i>.getPath(), <i>u</i>.getQuery(),\n *             <i>u</i>.getFragment())\n *     .equals(<i>u</i>)</pre>\n * if <i>u</i> is hierarchical and has either no authority or a server-based\n * authority.\n *\n *\n * <h3> URIs, URLs, and URNs </h3>\n *\n * A URI is a uniform resource <i>identifier</i> while a URL is a uniform\n * resource <i>locator</i>.  Hence every URL is a URI, abstractly speaking, but\n * not every URI is a URL.  This is because there is another subcategory of\n * URIs, uniform resource <i>names</i> (URNs), which name resources but do not\n * specify how to locate them.  The {@code mailto}, {@code news}, and\n * {@code isbn} URIs shown above are examples of URNs.\n *\n * <p> The conceptual distinction between URIs and URLs is reflected in the\n * differences between this class and the {@link URL} class.\n *\n * <p> An instance of this class represents a URI reference in the syntactic\n * sense defined by RFC&nbsp;2396.  A URI may be either absolute or relative.\n * A URI string is parsed according to the generic syntax without regard to the\n * scheme, if any, that it specifies.  No lookup of the host, if any, is\n * performed, and no scheme-dependent stream handler is constructed.  Equality,\n * hashing, and comparison are defined strictly in terms of the character\n * content of the instance.  In other words, a URI instance is little more than\n * a structured string that supports the syntactic, scheme-independent\n * operations of comparison, normalization, resolution, and relativization.\n *\n * <p> An instance of the {@link URL} class, by contrast, represents the\n * syntactic components of a URL together with some of the information required\n * to access the resource that it describes.  A URL must be absolute, that is,\n * it must always specify a scheme.  A URL string is parsed according to its\n * scheme.  A stream handler is always established for a URL, and in fact it is\n * impossible to create a URL instance for a scheme for which no handler is\n * available.  Equality and hashing depend upon both the scheme and the\n * Internet address of the host, if any; comparison is not defined.  In other\n * words, a URL is a structured string that supports the syntactic operation of\n * resolution as well as the network I/O operations of looking up the host and\n * opening a connection to the specified resource.\n *\n * @apiNote\n *\n * Applications working with file paths and file URIs should take great\n * care to use the appropriate methods to convert between the two.\n * The {@link Path#of(URI)} factory method and the {@link File#File(URI)}\n * constructor can be used to create {@link Path} or {@link File}\n * objects from a file URI. {@link Path#toUri()} and {@link File#toURI()}\n * can be used to create a {@link URI} from a file path.\n * Applications should never try to {@linkplain\n * #URI(java.lang.String, String, String, int, String, String, String)\n * construct}, {@linkplain #URI(String) parse}, or\n * {@linkplain #resolve(String) resolve} a {@code URI}\n * from the direct string representation of a {@code File} or {@code Path}\n * instance.\n * <p>\n * Some components of a URL or URI, such as <i>userinfo</i>, may\n * be abused to construct misleading URLs or URIs. Applications\n * that deal with URLs or URIs should take into account\n * the recommendations advised in <a\n * href=\"https://tools.ietf.org/html/rfc3986#section-7\">RFC3986,\n * Section 7, Security Considerations</a>.\n *\n * @author Mark Reinhold\n * @since 1.4\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc2279.txt\"><i>RFC&nbsp;2279: UTF-8, a\n * transformation format of ISO 10646</i></a>\n * @see <a href=\"http://www.ietf.org/rfc/rfc2373.txt\"><i>RFC&nbsp;2373: IPv6 Addressing\n * Architecture</i></a>\n * @see <a href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform\n * Resource Identifiers (URI): Generic Syntax</i></a>\n * @see <a href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for\n * Literal IPv6 Addresses in URLs</i></a>\n * @see <a href=\"URISyntaxException.html\">URISyntaxException</a>\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.getHost",
      "parameters": [],
      "signature": "java.lang.String java.net.URL.getHost()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String getHost() {\r\n    return host;\r\n}",
      "javadoc": {
        "method": "/**\n * Gets the host name of this {@code URL}, if applicable.\n * The format of the host conforms to RFC 2732, i.e. for a\n * literal IPv6 address, this method will return the IPv6 address\n * enclosed in square brackets ({@code '['} and {@code ']'}).\n *\n * @return  the host name of this {@code URL}.\n */\n",
        "class": "/**\n * Class {@code URL} represents a Uniform Resource\n * Locator, a pointer to a \"resource\" on the World\n * Wide Web. A resource can be something as simple as a file or a\n * directory, or it can be a reference to a more complicated object,\n * such as a query to a database or to a search engine. More\n * information on the types of URLs and their formats can be found at:\n * <a href=\n * \"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\">\n * <i>Types of URL</i></a>\n * <p>\n * In general, a URL can be broken into several parts. Consider the\n * following example:\n * <blockquote><pre>\n *     http://www.example.com/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The URL above indicates that the protocol to use is\n * {@code http} (HyperText Transfer Protocol) and that the\n * information resides on a host machine named\n * {@code www.example.com}. The information on that host\n * machine is named {@code /docs/resource1.html}. The exact\n * meaning of this name on the host machine is both protocol\n * dependent and host dependent. The information normally resides in\n * a file, but it could be generated on the fly. This component of\n * the URL is called the <i>path</i> component.\n * <p>\n * A URL can optionally specify a \"port\", which is the\n * port number to which the TCP connection is made on the remote host\n * machine. If the port is not specified, the default port for\n * the protocol is used instead. For example, the default port for\n * {@code http} is {@code 80}. An alternative port could be\n * specified as:\n * <blockquote><pre>\n *     http://www.example.com:1080/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The syntax of {@code URL} is defined by  <a\n * href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform\n * Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a\n * href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for\n * Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format\n * also supports scope_ids. The syntax and usage of scope_ids is described\n * <a href=\"Inet6Address.html#scoped\">here</a>.\n * <p>\n * A URL may have appended to it a \"fragment\", also known\n * as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n * sign character \"#\" followed by more characters. For example,\n * <blockquote><pre>\n *     http://www.example.com/index.html#chapter1\n * </pre></blockquote>\n * <p>\n * This fragment is not technically part of the URL. Rather, it\n * indicates that after the specified resource is retrieved, the\n * application is specifically interested in that part of the\n * document that has the tag {@code chapter1} attached to it. The\n * meaning of a tag is resource specific.\n * <p>\n * An application can also specify a \"relative URL\",\n * which contains only enough information to reach the resource\n * relative to another URL. Relative URLs are frequently used within\n * HTML pages. For example, if the contents of the URL:\n * <blockquote><pre>\n *     http://www.example.com/index.html\n * </pre></blockquote>\n * contained within it the relative URL:\n * <blockquote><pre>\n *     FAQ.html\n * </pre></blockquote>\n * it would be a shorthand for:\n * <blockquote><pre>\n *     http://www.example.com/FAQ.html\n * </pre></blockquote>\n * <p>\n * The relative URL need not specify all the components of a URL. If\n * the protocol, host name, or port number is missing, the value is\n * inherited from the fully specified URL. The file component must be\n * specified. The optional fragment is not inherited.\n * <p>\n * The URL class does not itself encode or decode any URL components\n * according to the escaping mechanism defined in RFC2396. It is the\n * responsibility of the caller to encode any fields, which need to be\n * escaped prior to calling URL, and also to decode any escaped fields,\n * that are returned from URL. Furthermore, because URL has no knowledge\n * of URL escaping, it does not recognise equivalence between the encoded\n * or decoded form of the same URL. For example, the two URLs:<br>\n * <pre>    http://foo.com/hello world/ and http://foo.com/hello%20world</pre>\n * would be considered not equal to each other.\n * <p>\n * Note, the {@link java.net.URI} class does perform escaping of its\n * component fields in certain circumstances. The recommended way\n * to manage the encoding and decoding of URLs is to use {@link java.net.URI},\n * and to convert between these two classes using {@link #toURI()} and\n * {@link URI#toURL()}.\n * <p>\n * The {@link URLEncoder} and {@link URLDecoder} classes can also be\n * used, but only for HTML form encoding, which is not the same\n * as the encoding scheme defined in RFC2396.\n *\n * @apiNote\n *\n * Applications working with file paths and file URIs should take great\n * care to use the appropriate methods to convert between the two.\n * The {@link Path#of(URI)} factory method and the {@link File#File(URI)}\n * constructor can be used to create {@link Path} or {@link File}\n * objects from a file URI. {@link Path#toUri()} and {@link File#toURI()}\n * can be used to create a {@link URI} from a file path, which can be\n * converted to URL using {@link URI#toURL()}.\n * Applications should never try to {@linkplain #URL(java.lang.String, String, String)\n * construct} or {@linkplain #URL(String) parse} a {@code URL}\n * from the direct string representation of a {@code File} or {@code Path}\n * instance.\n * <p>\n * Some components of a URL or URI, such as <i>userinfo</i>, may\n * be abused to construct misleading URLs or URIs. Applications\n * that deal with URLs or URIs should take into account\n * the recommendations advised in <a\n * href=\"https://tools.ietf.org/html/rfc3986#section-7\">RFC3986,\n * Section 7, Security Considerations</a>.\n *\n * @author  James Gosling\n * @since 1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.net.URL.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.net.URL.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public URL(String spec) throws MalformedURLException {\r\n    this(null, spec);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a {@code URL} object from the {@code String}\n * representation.\n * <p>\n * This constructor is equivalent to a call to the two-argument\n * constructor with a {@code null} first argument.\n *\n * @param      spec   the {@code String} to parse as a URL.\n * @throws     MalformedURLException  if no protocol is specified, or an\n *               unknown protocol is found, or {@code spec} is {@code null},\n *               or the parsed URL fails to comply with the specific syntax\n *               of the associated protocol.\n * @see        java.net.URL#URL(java.net.URL, java.lang.String)\n */\n",
        "class": "/**\n * Class {@code URL} represents a Uniform Resource\n * Locator, a pointer to a \"resource\" on the World\n * Wide Web. A resource can be something as simple as a file or a\n * directory, or it can be a reference to a more complicated object,\n * such as a query to a database or to a search engine. More\n * information on the types of URLs and their formats can be found at:\n * <a href=\n * \"http://web.archive.org/web/20051219043731/http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/Demo/url-primer.html\">\n * <i>Types of URL</i></a>\n * <p>\n * In general, a URL can be broken into several parts. Consider the\n * following example:\n * <blockquote><pre>\n *     http://www.example.com/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The URL above indicates that the protocol to use is\n * {@code http} (HyperText Transfer Protocol) and that the\n * information resides on a host machine named\n * {@code www.example.com}. The information on that host\n * machine is named {@code /docs/resource1.html}. The exact\n * meaning of this name on the host machine is both protocol\n * dependent and host dependent. The information normally resides in\n * a file, but it could be generated on the fly. This component of\n * the URL is called the <i>path</i> component.\n * <p>\n * A URL can optionally specify a \"port\", which is the\n * port number to which the TCP connection is made on the remote host\n * machine. If the port is not specified, the default port for\n * the protocol is used instead. For example, the default port for\n * {@code http} is {@code 80}. An alternative port could be\n * specified as:\n * <blockquote><pre>\n *     http://www.example.com:1080/docs/resource1.html\n * </pre></blockquote>\n * <p>\n * The syntax of {@code URL} is defined by  <a\n * href=\"http://www.ietf.org/rfc/rfc2396.txt\"><i>RFC&nbsp;2396: Uniform\n * Resource Identifiers (URI): Generic Syntax</i></a>, amended by <a\n * href=\"http://www.ietf.org/rfc/rfc2732.txt\"><i>RFC&nbsp;2732: Format for\n * Literal IPv6 Addresses in URLs</i></a>. The Literal IPv6 address format\n * also supports scope_ids. The syntax and usage of scope_ids is described\n * <a href=\"Inet6Address.html#scoped\">here</a>.\n * <p>\n * A URL may have appended to it a \"fragment\", also known\n * as a \"ref\" or a \"reference\". The fragment is indicated by the sharp\n * sign character \"#\" followed by more characters. For example,\n * <blockquote><pre>\n *     http://www.example.com/index.html#chapter1\n * </pre></blockquote>\n * <p>\n * This fragment is not technically part of the URL. Rather, it\n * indicates that after the specified resource is retrieved, the\n * application is specifically interested in that part of the\n * document that has the tag {@code chapter1} attached to it. The\n * meaning of a tag is resource specific.\n * <p>\n * An application can also specify a \"relative URL\",\n * which contains only enough information to reach the resource\n * relative to another URL. Relative URLs are frequently used within\n * HTML pages. For example, if the contents of the URL:\n * <blockquote><pre>\n *     http://www.example.com/index.html\n * </pre></blockquote>\n * contained within it the relative URL:\n * <blockquote><pre>\n *     FAQ.html\n * </pre></blockquote>\n * it would be a shorthand for:\n * <blockquote><pre>\n *     http://www.example.com/FAQ.html\n * </pre></blockquote>\n * <p>\n * The relative URL need not specify all the components of a URL. If\n * the protocol, host name, or port number is missing, the value is\n * inherited from the fully specified URL. The file component must be\n * specified. The optional fragment is not inherited.\n * <p>\n * The URL class does not itself encode or decode any URL components\n * according to the escaping mechanism defined in RFC2396. It is the\n * responsibility of the caller to encode any fields, which need to be\n * escaped prior to calling URL, and also to decode any escaped fields,\n * that are returned from URL. Furthermore, because URL has no knowledge\n * of URL escaping, it does not recognise equivalence between the encoded\n * or decoded form of the same URL. For example, the two URLs:<br>\n * <pre>    http://foo.com/hello world/ and http://foo.com/hello%20world</pre>\n * would be considered not equal to each other.\n * <p>\n * Note, the {@link java.net.URI} class does perform escaping of its\n * component fields in certain circumstances. The recommended way\n * to manage the encoding and decoding of URLs is to use {@link java.net.URI},\n * and to convert between these two classes using {@link #toURI()} and\n * {@link URI#toURL()}.\n * <p>\n * The {@link URLEncoder} and {@link URLDecoder} classes can also be\n * used, but only for HTML form encoding, which is not the same\n * as the encoding scheme defined in RFC2396.\n *\n * @apiNote\n *\n * Applications working with file paths and file URIs should take great\n * care to use the appropriate methods to convert between the two.\n * The {@link Path#of(URI)} factory method and the {@link File#File(URI)}\n * constructor can be used to create {@link Path} or {@link File}\n * objects from a file URI. {@link Path#toUri()} and {@link File#toURI()}\n * can be used to create a {@link URI} from a file path, which can be\n * converted to URL using {@link URI#toURL()}.\n * Applications should never try to {@linkplain #URL(java.lang.String, String, String)\n * construct} or {@linkplain #URL(String) parse} a {@code URL}\n * from the direct string representation of a {@code File} or {@code Path}\n * instance.\n * <p>\n * Some components of a URL or URI, such as <i>userinfo</i>, may\n * be abused to construct misleading URLs or URIs. Applications\n * that deal with URLs or URIs should take into account\n * the recommendations advised in <a\n * href=\"https://tools.ietf.org/html/rfc3986#section-7\">RFC3986,\n * Section 7, Security Considerations</a>.\n *\n * @author  James Gosling\n * @since 1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.nio.file.Files.newInputStream",
      "parameters": [
        "java.nio.file.Path",
        "java.nio.file.OpenOption[]"
      ],
      "signature": "java.io.InputStream java.nio.file.Files.newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": false,
      "body": "public static InputStream newInputStream(Path path, OpenOption... options)\n        throws IOException\n    {\n        return provider(path).newInputStream(path, options);\n    }",
      "javadoc": {
        "method": " /**\n     * Opens a file, returning an input stream to read from the file. The stream\n     * will not be buffered, and is not required to support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods. The\n     * stream will be safe for access by multiple concurrent threads. Reading\n     * commences at the beginning of the file. Whether the returned stream is\n     * <i>asynchronously closeable</i> and/or <i>interruptible</i> is highly\n     * file system provider specific and therefore not specified.\n     *\n     * <p> The {@code options} parameter determines how the file is opened.\n     * If no options are present then it is equivalent to opening the file with\n     * the {@link StandardOpenOption#READ READ} option. In addition to the {@code\n     * READ} option, an implementation may also support additional implementation\n     * specific options.\n     *\n     * @param   path\n     *          the path to the file to open\n     * @param   options\n     *          options specifying how the file is opened\n     *\n     * @return  a new input stream\n     *\n     * @throws  IllegalArgumentException\n     *          if an invalid combination of options is specified\n     * @throws  UnsupportedOperationException\n     *          if an unsupported option is specified\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */",
        "class": "/**\n * This class consists exclusively of static methods that operate on files,\n * directories, or other types of files.\n *\n * <p> In most cases, the methods defined here will delegate to the associated\n * file system provider to perform the file operations.\n *\n * @since 1.7\n */"
      },"return": "java.io.InputStream",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.nio.file.Paths.get",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.nio.file.Path java.nio.file.Paths.get(java.lang.String,java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": false,
      "body": "public static Path get(String first, String... more) {\n        return Path.of(first, more);\n    }",
      "javadoc": {
        "method": "/**\n     * Converts a path string, or a sequence of strings that when joined form\n     * a path string, to a {@code Path}.\n     *\n     * @implSpec\n     * This method simply invokes {@link Path#of(java.lang.String,String...)\n     * Path.of(java.lang.String, String...)} with the given parameters.\n     *\n     * @param   first\n     *          the path string or initial part of the path string\n     * @param   more\n     *          additional strings to be joined to form the path string\n     *\n     * @return  the resulting {@code Path}\n     *\n     * @throws  InvalidPathException\n     *          if the path string cannot be converted to a {@code Path}\n     *\n     * @see FileSystem#getPath\n     * @see Path#of(java.lang.String,String...)\n     */",
        "class": "/**\n * This class consists exclusively of static methods that return a {@link Path}\n * by converting a path string or {@link URI}.\n *\n * @apiNote\n * It is recommended to obtain a {@code Path} via the {@code Path.of} methods\n * instead of via the {@code get} methods defined in this class as this class\n * may be deprecated in a future release.\n *\n * @since 1.7\n * @see Path\n */"
      },"return": "java.nio.file.Path",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.digest",
      "parameters": [],
      "signature": "byte[] java.security.MessageDigest.digest()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public byte[] digest() {\r\n    /* Resetting is the responsibility of implementors. */\r\n    byte[] result = engineDigest();\r\n    state = INITIAL;\r\n    return result;\r\n}",
      "javadoc": {
        "method": "/**\n * Completes the hash computation by performing final operations\n * such as padding. The digest is reset after this call is made.\n *\n * @return the array of bytes for the resulting hash value.\n */\n",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.getInstance",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE328"
      ],
      "known": false,
      "body": "public static MessageDigest getInstance(String algorithm)\n        throws NoSuchAlgorithmException\n    {\n        Objects.requireNonNull(algorithm, \"null algorithm name\");\n        MessageDigest md;\n\n        GetInstance.Instance instance = GetInstance.getInstance(\"MessageDigest\",\n                MessageDigestSpi.class, algorithm);\n        if (instance.impl instanceof MessageDigest messageDigest) {\n            md = messageDigest;\n            md.provider = instance.provider;\n        } else {\n            md = Delegate.of((MessageDigestSpi)instance.impl, algorithm,\n                instance.provider);\n        }\n\n        if (!skipDebug && pdebug != null) {\n            pdebug.println(\"MessageDigest.\" + algorithm +\n                \" algorithm from: \" + md.provider.getName());\n        }\n\n        return md;\n    }",
      "javadoc": {
        "method": "/**\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code MessageDigestSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     */",
        "class": "/**\n * This MessageDigest class provides applications the functionality of a\n * message digest algorithm, such as SHA-1 or SHA-256.\n * Message digests are secure one-way hash functions that take arbitrary-sized\n * data and output a fixed-length hash value.\n *\n * <p>A MessageDigest object starts out initialized. The data is\n * processed through it using the {@link #update(byte) update}\n * methods. At any point {@link #reset() reset} can be called\n * to reset the digest. Once all the data to be updated has been\n * updated, one of the {@link #digest() digest} methods should\n * be called to complete the hash computation.\n *\n * <p>The {@code digest} method can be called once for a given number\n * of updates. After {@code digest} has been called, the MessageDigest\n * object is reset to its initialized state.\n *\n * <p>Implementations are free to implement the Cloneable interface.\n * Client applications can test cloneability by attempting cloning\n * and catching the CloneNotSupportedException:\n *\n * <pre>{@code\n * MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n *\n * try {\n *     md.update(toChapter1);\n *     MessageDigest tc1 = md.clone();\n *     byte[] toChapter1Digest = tc1.digest();\n *     md.update(toChapter2);\n *     ...etc.\n * } catch (CloneNotSupportedException cnse) {\n *     throw new DigestException(\"couldn't make digest of partial content\");\n * }\n * }</pre>\n *\n * <p>Note that if a given implementation is not cloneable, it is\n * still possible to compute intermediate digests by instantiating\n * several instances, if the number of digests is known in advance.\n *\n * <p>Note that this class is abstract and extends from\n * {@code MessageDigestSpi} for historical reasons.\n * Application developers should only take notice of the methods defined in\n * this {@code MessageDigest} class; all the methods in\n * the superclass are intended for cryptographic service providers who wish to\n * supply their own implementations of message digest algorithms.\n *\n * <p> Every implementation of the Java platform is required to support\n * the following standard {@code MessageDigest} algorithms:\n * <ul>\n * <li>{@code SHA-1}</li>\n * <li>{@code SHA-256}</li>\n * </ul>\n * These algorithms are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n * MessageDigest section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * @author Benjamin Renaud\n * @since 1.1\n *\n * @see DigestInputStream\n * @see DigestOutputStream\n */"
      },"return": "java.security.MessageDigest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.getInstance",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE328"
      ],
      "known": false,
      "body": "public static MessageDigest getInstance(String algorithm, String provider)\n        throws NoSuchAlgorithmException, NoSuchProviderException\n    {\n        Objects.requireNonNull(algorithm, \"null algorithm name\");\n        if (provider == null || provider.isEmpty())\n            throw new IllegalArgumentException(\"missing provider\");\n\n        MessageDigest md;\n        GetInstance.Instance instance = GetInstance.getInstance(\"MessageDigest\",\n                MessageDigestSpi.class, algorithm, provider);\n        if (instance.impl instanceof MessageDigest messageDigest) {\n            md = messageDigest;\n            md.provider = instance.provider;\n        } else {\n            md = Delegate.of((MessageDigestSpi)instance.impl, algorithm,\n                    instance.provider);\n        }\n        return md;\n    }",
      "javadoc": {
        "method": " /**\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     */",
        "class": "/**\n * This MessageDigest class provides applications the functionality of a\n * message digest algorithm, such as SHA-1 or SHA-256.\n * Message digests are secure one-way hash functions that take arbitrary-sized\n * data and output a fixed-length hash value.\n *\n * <p>A MessageDigest object starts out initialized. The data is\n * processed through it using the {@link #update(byte) update}\n * methods. At any point {@link #reset() reset} can be called\n * to reset the digest. Once all the data to be updated has been\n * updated, one of the {@link #digest() digest} methods should\n * be called to complete the hash computation.\n *\n * <p>The {@code digest} method can be called once for a given number\n * of updates. After {@code digest} has been called, the MessageDigest\n * object is reset to its initialized state.\n *\n * <p>Implementations are free to implement the Cloneable interface.\n * Client applications can test cloneability by attempting cloning\n * and catching the CloneNotSupportedException:\n *\n * <pre>{@code\n * MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n *\n * try {\n *     md.update(toChapter1);\n *     MessageDigest tc1 = md.clone();\n *     byte[] toChapter1Digest = tc1.digest();\n *     md.update(toChapter2);\n *     ...etc.\n * } catch (CloneNotSupportedException cnse) {\n *     throw new DigestException(\"couldn't make digest of partial content\");\n * }\n * }</pre>\n *\n * <p>Note that if a given implementation is not cloneable, it is\n * still possible to compute intermediate digests by instantiating\n * several instances, if the number of digests is known in advance.\n *\n * <p>Note that this class is abstract and extends from\n * {@code MessageDigestSpi} for historical reasons.\n * Application developers should only take notice of the methods defined in\n * this {@code MessageDigest} class; all the methods in\n * the superclass are intended for cryptographic service providers who wish to\n * supply their own implementations of message digest algorithms.\n *\n * <p> Every implementation of the Java platform is required to support\n * the following standard {@code MessageDigest} algorithms:\n * <ul>\n * <li>{@code SHA-1}</li>\n * <li>{@code SHA-256}</li>\n * </ul>\n * These algorithms are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n * MessageDigest section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * @author Benjamin Renaud\n * @since 1.1\n *\n * @see DigestInputStream\n * @see DigestOutputStream\n */"
      },"return": "java.security.MessageDigest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.getInstance",
      "parameters": [
        "java.lang.String",
        "java.security.Provider"
      ],
      "signature": "java.security.MessageDigest java.security.MessageDigest.getInstance(java.lang.String,java.security.Provider)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE328"
      ],
      "known": false,
      "body": "public static MessageDigest getInstance(String algorithm,\n Provider provider)\n        throws NoSuchAlgorithmException\n    {\n        Objects.requireNonNull(algorithm, \"null algorithm name\");\n        if (provider == null)\n            throw new IllegalArgumentException(\"missing provider\");\n        Object[] objs = Security.getImpl(algorithm, \"MessageDigest\", provider);\n        if (objs[0] instanceof MessageDigest md) {\n            md.provider = (Provider)objs[1];\n            return md;\n        } else {\n            MessageDigest delegate =\n                    Delegate.of((MessageDigestSpi)objs[0], algorithm,\n                    (Provider)objs[1]);\n            return delegate;\n        }\n    }",
      "javadoc": {
        "method": "/**\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     */",
        "class": "/**\n * This MessageDigest class provides applications the functionality of a\n * message digest algorithm, such as SHA-1 or SHA-256.\n * Message digests are secure one-way hash functions that take arbitrary-sized\n * data and output a fixed-length hash value.\n *\n * <p>A MessageDigest object starts out initialized. The data is\n * processed through it using the {@link #update(byte) update}\n * methods. At any point {@link #reset() reset} can be called\n * to reset the digest. Once all the data to be updated has been\n * updated, one of the {@link #digest() digest} methods should\n * be called to complete the hash computation.\n *\n * <p>The {@code digest} method can be called once for a given number\n * of updates. After {@code digest} has been called, the MessageDigest\n * object is reset to its initialized state.\n *\n * <p>Implementations are free to implement the Cloneable interface.\n * Client applications can test cloneability by attempting cloning\n * and catching the CloneNotSupportedException:\n *\n * <pre>{@code\n * MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n *\n * try {\n *     md.update(toChapter1);\n *     MessageDigest tc1 = md.clone();\n *     byte[] toChapter1Digest = tc1.digest();\n *     md.update(toChapter2);\n *     ...etc.\n * } catch (CloneNotSupportedException cnse) {\n *     throw new DigestException(\"couldn't make digest of partial content\");\n * }\n * }</pre>\n *\n * <p>Note that if a given implementation is not cloneable, it is\n * still possible to compute intermediate digests by instantiating\n * several instances, if the number of digests is known in advance.\n *\n * <p>Note that this class is abstract and extends from\n * {@code MessageDigestSpi} for historical reasons.\n * Application developers should only take notice of the methods defined in\n * this {@code MessageDigest} class; all the methods in\n * the superclass are intended for cryptographic service providers who wish to\n * supply their own implementations of message digest algorithms.\n *\n * <p> Every implementation of the Java platform is required to support\n * the following standard {@code MessageDigest} algorithms:\n * <ul>\n * <li>{@code SHA-1}</li>\n * <li>{@code SHA-256}</li>\n * </ul>\n * These algorithms are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n * MessageDigest section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * @author Benjamin Renaud\n * @since 1.1\n *\n * @see DigestInputStream\n * @see DigestOutputStream\n */"
      },"return": "java.security.MessageDigest",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.MessageDigest.update",
      "parameters": [
        "byte[]"
      ],
      "signature": "void java.security.MessageDigest.update(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void update(byte[] input) {\r\n    engineUpdate(input, 0, input.length);\r\n    state = IN_PROGRESS;\r\n}",
      "javadoc": {
        "method": "/**\n * Updates the digest using the specified array of bytes.\n *\n * @param input the array of bytes.\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.SecureRandom.generateSeed",
      "parameters": [
        "int"
      ],
      "signature": "byte[] java.security.SecureRandom.generateSeed(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public byte[] generateSeed(int numBytes) {\r\n    if (numBytes < 0) {\r\n        throw new IllegalArgumentException(\"numBytes cannot be negative\");\r\n    }\r\n    if (threadSafe) {\r\n        return secureRandomSpi.engineGenerateSeed(numBytes);\r\n    } else {\r\n        synchronized (this) {\r\n            return secureRandomSpi.engineGenerateSeed(numBytes);\r\n        }\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the given number of seed bytes, computed using the seed\n * generation algorithm that this class uses to seed itself.  This\n * call may be used to seed other random number generators.\n *\n * @param numBytes the number of seed bytes to generate.\n * @throws IllegalArgumentException if {@code numBytes} is negative\n * @return the seed bytes.\n */\n",
        "class": ""
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.SecureRandom.getInstance",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.security.SecureRandom java.security.SecureRandom.getInstance(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static SecureRandom getInstance(String algorithm) throws NoSuchAlgorithmException {\r\n    Objects.requireNonNull(algorithm, \"null algorithm name\");\r\n    Instance instance = GetInstance.getInstance(\"SecureRandom\", SecureRandomSpi.class, algorithm);\r\n    return new SecureRandom((SecureRandomSpi) instance.impl, instance.provider, algorithm);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a {@code SecureRandom} object that implements the specified\n * Random Number Generator (RNG) algorithm.\n *\n * <p> This method traverses the list of registered security Providers,\n * starting with the most preferred Provider.\n * A new {@code SecureRandom} object encapsulating the\n * {@code SecureRandomSpi} implementation from the first\n * Provider that supports the specified algorithm is returned.\n *\n * <p> Note that the list of registered providers may be retrieved via\n * the {@link Security#getProviders() Security.getProviders()} method.\n *\n * @implNote\n * The JDK Reference Implementation additionally uses the\n * {@code jdk.security.provider.preferred}\n * {@link Security#getProperty(String) Security} property to determine\n * the preferred provider order for the specified algorithm. This\n * may be different than the order of providers returned by\n * {@link Security#getProviders() Security.getProviders()}.\n *\n * @param algorithm the name of the RNG algorithm.\n * See the {@code SecureRandom} section in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n * Java Security Standard Algorithm Names Specification</a>\n * for information about standard RNG algorithm names.\n *\n * @return the new {@code SecureRandom} object\n *\n * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n *         {@code SecureRandomSpi} implementation for the\n *         specified algorithm\n *\n * @throws NullPointerException if {@code algorithm} is {@code null}\n *\n * @see Provider\n *\n * @since 1.2\n */\n",
        "class": ""
      },"return": "java.security.SecureRandom",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.SecureRandom.<init>",
      "parameters": [],
      "signature": "void java.security.SecureRandom.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public SecureRandom() {\r\n    /*\r\n         * This call to our superclass constructor will result in a call\r\n         * to our own {@code setSeed} method, which will return\r\n         * immediately when it is passed zero.\r\n         */\r\n    super(0);\r\n    getDefaultPRNG(false, null);\r\n    this.threadSafe = getThreadSafe();\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a secure random number generator (RNG) implementing the\n * default random number algorithm.\n *\n * <p> This constructor traverses the list of registered security Providers,\n * starting with the most preferred Provider.\n * A new {@code SecureRandom} object encapsulating the\n * {@code SecureRandomSpi} implementation from the first\n * Provider that supports a {@code SecureRandom} (RNG) algorithm is returned.\n * If none of the Providers support a RNG algorithm,\n * then an implementation-specific default is returned.\n *\n * <p> Note that the list of registered providers may be retrieved via\n * the {@link Security#getProviders() Security.getProviders()} method.\n *\n * <p> See the {@code SecureRandom} section in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#securerandom-number-generation-algorithms\">\n * Java Security Standard Algorithm Names Specification</a>\n * for information about standard RNG algorithm names.\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.SecureRandom.nextBytes",
      "parameters": [
        "byte[]"
      ],
      "signature": "void java.security.SecureRandom.nextBytes(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void nextBytes(byte[] bytes) {\r\n    if (threadSafe) {\r\n        secureRandomSpi.engineNextBytes(bytes);\r\n    } else {\r\n        synchronized (this) {\r\n            secureRandomSpi.engineNextBytes(bytes);\r\n        }\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Generates a user-specified number of random bytes.\n *\n * @param bytes the array to be filled in with random bytes.\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.Security.getProvider",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.security.Provider java.security.Security.getProvider(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static Provider getProvider(String name) {\r\n    return Providers.getProviderList().getProvider(name);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the provider installed with the specified name, if\n * any. Returns null if no provider with the specified name is\n * installed or if name is null.\n *\n * @param name the name of the provider to get.\n *\n * @return the provider of the specified name.\n *\n * @see #removeProvider\n * @see #addProvider\n */\n",
        "class": ""
      },"return": "java.security.Provider",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.security.Security.getProviders",
      "parameters": [],
      "signature": "java.security.Provider[] java.security.Security.getProviders()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static Provider[] getProviders() {\r\n    return Providers.getFullProviderList().toArray();\r\n}",
      "javadoc": {
        "method": "/**\n * Returns an array containing all the installed providers. The order of\n * the providers in the array is their preference order.\n *\n * @return an array of all the installed providers.\n */\n",
        "class": ""
      },"return": "java.security.Provider[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.sql.Connection.prepareCall",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "java.sql.CallableStatement java.sql.Connection.prepareCall(java.lang.String,int,int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {}",
      "javadoc": {
        "method": "/**\n * Creates a {@code CallableStatement} object that will generate\n * {@code ResultSet} objects with the given type and concurrency.\n * This method is the same as the {@code prepareCall} method\n * above, but it allows the default result set\n * type and concurrency to be overridden.\n * The holdability of the created result sets can be determined by\n * calling {@link #getHoldability}.\n *\n * @param sql a {@code String} object that is the SQL statement to\n *            be sent to the database; may contain on or more '?' parameters\n * @param resultSetType a result set type; one of\n *         {@code ResultSet.TYPE_FORWARD_ONLY},\n *         {@code ResultSet.TYPE_SCROLL_INSENSITIVE}, or\n *         {@code ResultSet.TYPE_SCROLL_SENSITIVE}\n * @param resultSetConcurrency a concurrency type; one of\n *         {@code ResultSet.CONCUR_READ_ONLY} or\n *         {@code ResultSet.CONCUR_UPDATABLE}\n * @return a new {@code CallableStatement} object containing the\n * pre-compiled SQL statement that will produce {@code ResultSet}\n * objects with the given type and concurrency\n * @throws SQLException if a database access error occurs, this method\n * is called on a closed connection\n *         or the given parameters are not {@code ResultSet}\n *         constants indicating type and concurrency\n * @throws SQLFeatureNotSupportedException if the JDBC driver does not support\n * this method or this method is not supported for the specified result\n * set type and result set concurrency.\n * @since 1.2\n */\n",
        "class": "/**\n * <P>A connection (session) with a specific\n * database. SQL statements are executed and results are returned\n * within the context of a connection.\n * <P>\n * A {@code Connection} object's database is able to provide information\n * describing its tables, its supported SQL grammar, its stored\n * procedures, the capabilities of this connection, and so on. This\n * information is obtained with the {@code getMetaData} method.\n *\n * <P><B>Note:</B> When configuring a {@code Connection}, JDBC applications\n *  should use the appropriate {@code Connection} method such as\n *  {@code setAutoCommit} or {@code setTransactionIsolation}.\n *  Applications should not invoke SQL commands directly to change the connection's\n *   configuration when there is a JDBC method available.  By default a {@code Connection} object is in\n * auto-commit mode, which means that it automatically commits changes\n * after executing each statement. If auto-commit mode has been\n * disabled, the method {@code commit} must be called explicitly in\n * order to commit changes; otherwise, database changes will not be saved.\n * <P>\n * A new {@code Connection} object created using the JDBC 2.1 core API\n * has an initially empty type map associated with it. A user may enter a\n * custom mapping for a UDT in this type map.\n * When a UDT is retrieved from a data source with the\n * method {@code ResultSet.getObject}, the {@code getObject} method\n * will check the connection's type map to see if there is an entry for that\n * UDT.  If so, the {@code getObject} method will map the UDT to the\n * class indicated.  If there is no entry, the UDT will be mapped using the\n * standard mapping.\n * <p>\n * A user may create a new type map, which is a {@code java.util.Map}\n * object, make an entry in it, and pass it to the {@code java.sql}\n * methods that can perform custom mapping.  In this case, the method\n * will use the given type map instead of the one associated with\n * the connection.\n * <p>\n * For example, the following code fragment specifies that the SQL\n * type {@code ATHLETES} will be mapped to the class\n * {@code Athletes} in the Java programming language.\n * The code fragment retrieves the type map for the {@code Connection\n * } object {@code con}, inserts the entry into it, and then sets\n * the type map with the new entry as the connection's type map.\n * <pre>\n *      java.util.Map map = con.getTypeMap();\n *      map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));\n *      con.setTypeMap(map);\n * </pre>\n *\n * @see DriverManager#getConnection\n * @see Statement\n * @see ResultSet\n * @see DatabaseMetaData\n * @since 1.1\n */\n"
      },"return": "java.sql.CallableStatement",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.ArrayList.<init>",
      "parameters": [],
      "signature": "void java.util.ArrayList.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public ArrayList() {\r\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs an empty list with an initial capacity of ten.\n */\n",
        "class": "/**\n * Resizable-array implementation of the {@code List} interface.  Implements\n * all optional list operations, and permits all elements, including\n * {@code null}.  In addition to implementing the {@code List} interface,\n * this class provides methods to manipulate the size of the array that is\n * used internally to store the list.  (This class is roughly equivalent to\n * {@code Vector}, except that it is unsynchronized.)\n *\n * <p>The {@code size}, {@code isEmpty}, {@code get}, {@code set},\n * {@code iterator}, and {@code listIterator} operations run in constant\n * time.  The {@code add} operation runs in <i>amortized constant time</i>,\n * that is, adding n elements requires O(n) time.  All of the other operations\n * run in linear time (roughly speaking).  The constant factor is low compared\n * to that for the {@code LinkedList} implementation.\n *\n * <p>Each {@code ArrayList} instance has a <i>capacity</i>.  The capacity is\n * the size of the array used to store the elements in the list.  It is always\n * at least as large as the list size.  As elements are added to an ArrayList,\n * its capacity grows automatically.  The details of the growth policy are not\n * specified beyond the fact that adding an element has constant amortized\n * time cost.\n *\n * <p>An application can increase the capacity of an {@code ArrayList} instance\n * before adding a large number of elements using the {@code ensureCapacity}\n * operation.  This may reduce the amount of incremental reallocation.\n *\n * <p><strong>Note that this implementation is not synchronized.</strong>\n * If multiple threads access an {@code ArrayList} instance concurrently,\n * and at least one of the threads modifies the list structurally, it\n * <i>must</i> be synchronized externally.  (A structural modification is\n * any operation that adds or deletes one or more elements, or explicitly\n * resizes the backing array; merely setting the value of an element is not\n * a structural modification.)  This is typically accomplished by\n * synchronizing on some object that naturally encapsulates the list.\n *\n * If no such object exists, the list should be \"wrapped\" using the\n * {@link Collections#synchronizedList Collections.synchronizedList}\n * method.  This is best done at creation time, to prevent accidental\n * unsynchronized access to the list:<pre>\n *   List list = Collections.synchronizedList(new ArrayList(...));</pre>\n *\n * <p id=\"fail-fast\">\n * The iterators returned by this class's {@link #iterator() iterator} and\n * {@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:\n * if the list is structurally modified at any time after the iterator is\n * created, in any way except through the iterator's own\n * {@link ListIterator#remove() remove} or\n * {@link ListIterator#add(Object) add} methods, the iterator will throw a\n * {@link ConcurrentModificationException}.  Thus, in the face of\n * concurrent modification, the iterator fails quickly and cleanly, rather\n * than risking arbitrary, non-deterministic behavior at an undetermined\n * time in the future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness:  <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <E> the type of elements in this list\n *\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see     Collection\n * @see     List\n * @see     LinkedList\n * @see     Vector\n * @since   1.2\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Arrays.copyOf",
      "parameters": [
        "byte[]",
        "int"
      ],
      "signature": "byte[] java.util.Arrays.copyOf(byte[],int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static byte[] copyOf(byte[] original, int newLength) {\r\n    byte[] copy = new byte[newLength];\r\n    System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength));\r\n    return copy;\r\n}",
      "javadoc": {
        "method": "/**\n * Copies the specified array, truncating or padding with zeros (if necessary)\n * so the copy has the specified length.  For all indices that are\n * valid in both the original array and the copy, the two arrays will\n * contain identical values.  For any indices that are valid in the\n * copy but not the original, the copy will contain {@code (byte)0}.\n * Such indices will exist if and only if the specified length\n * is greater than that of the original array.\n *\n * @param original the array to be copied\n * @param newLength the length of the copy to be returned\n * @return a copy of the original array, truncated or padded with zeros\n *     to obtain the specified length\n * @throws NegativeArraySizeException if {@code newLength} is negative\n * @throws NullPointerException if {@code original} is null\n * @since 1.6\n */\n",
        "class": "/**\n * This class contains various methods for manipulating arrays (such as\n * sorting and searching). This class also contains a static factory\n * that allows arrays to be viewed as lists.\n *\n * <p>The methods in this class all throw a {@code NullPointerException},\n * if the specified array reference is null, except where noted.\n *\n * <p>The documentation for the methods contained in this class includes\n * brief descriptions of the <i>implementations</i>. Such descriptions should\n * be regarded as <i>implementation notes</i>, rather than parts of the\n * <i>specification</i>. Implementors should feel free to substitute other\n * algorithms, so long as the specification itself is adhered to. (For\n * example, the algorithm used by {@code sort(Object[])} does not have to be\n * a MergeSort, but it does have to be <i>stable</i>.)\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author Josh Bloch\n * @author Neal Gafter\n * @author John Rose\n * @since  1.2\n */\n"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Enumeration.hasMoreElements",
      "parameters": [],
      "signature": "boolean java.util.Enumeration.hasMoreElements()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract boolean hasMoreElements() {}",
      "javadoc": {
        "method": "/**\n * Tests if this enumeration contains more elements.\n *\n * @return  {@code true} if and only if this enumeration object\n *           contains at least one more element to provide;\n *          {@code false} otherwise.\n */\n",
        "class": "/**\n * An object that implements the Enumeration interface generates a\n * series of elements, one at a time. Successive calls to the\n * {@code nextElement} method return successive elements of the\n * series.\n * <p>\n * For example, to print all elements of a {@code Vector<E>} <i>v</i>:\n * <pre>\n *   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)\n *       System.out.println(e.nextElement());</pre>\n * <p>\n * Methods are provided to enumerate through the elements of a\n * vector, the keys of a hashtable, and the values in a hashtable.\n * Enumerations are also used to specify the input streams to a\n * {@code SequenceInputStream}.\n *\n * @apiNote\n * The functionality of this interface is duplicated by the {@link Iterator}\n * interface.  In addition, {@code Iterator} adds an optional remove operation,\n * and has shorter method names.  New implementations should consider using\n * {@code Iterator} in preference to {@code Enumeration}. It is possible to\n * adapt an {@code Enumeration} to an {@code Iterator} by using the\n * {@link #asIterator} method.\n *\n * @see     java.util.Iterator\n * @see     java.io.SequenceInputStream\n * @see     java.util.Enumeration#nextElement()\n * @see     java.util.Hashtable\n * @see     java.util.Hashtable#elements()\n * @see     java.util.Hashtable#keys()\n * @see     java.util.Vector\n * @see     java.util.Vector#elements()\n *\n * @author  Lee Boynton\n * @since   1.0\n */\n"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Enumeration.nextElement",
      "parameters": [],
      "signature": "java.lang.Object java.util.Enumeration.nextElement()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "E nextElement();",
      "javadoc": {
        "method": "/**\n     * Returns the next element of this enumeration if this enumeration\n     * object has at least one more element to provide.\n     *\n     * @return     the next element of this enumeration.\n     * @throws     NoSuchElementException  if no more elements exist.\n     */",
        "class": "/**\n * An object that implements the Enumeration interface generates a\n * series of elements, one at a time. Successive calls to the\n * {@code nextElement} method return successive elements of the\n * series.\n * <p>\n * For example, to print all elements of a {@code Vector<E>} <i>v</i>:\n * <pre>\n *   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)\n *       System.out.println(e.nextElement());</pre>\n * <p>\n * Methods are provided to enumerate through the elements of a\n * vector, the keys of a hashtable, and the values in a hashtable.\n * Enumerations are also used to specify the input streams to a\n * {@code SequenceInputStream}.\n *\n * @apiNote\n * The functionality of this interface is duplicated by the {@link Iterator}\n * interface.  In addition, {@code Iterator} adds an optional remove operation,\n * and has shorter method names.  New implementations should consider using\n * {@code Iterator} in preference to {@code Enumeration}. It is possible to\n * adapt an {@code Enumeration} to an {@code Iterator} by using the\n * {@link #asIterator} method.\n *\n * @see     java.util.Iterator\n * @see     java.io.SequenceInputStream\n * @see     java.util.Enumeration#nextElement()\n * @see     java.util.Hashtable\n * @see     java.util.Hashtable#elements()\n * @see     java.util.Hashtable#keys()\n * @see     java.util.Vector\n * @see     java.util.Vector#elements()\n *\n * @author  Lee Boynton\n * @since   1.0\n */"
      },"return": " java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.HashMap.get",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.Object java.util.HashMap.get(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public V get(Object key) {\r\n    Node<K, V> e;\r\n    return (e = getNode(key)) == null ? null : e.value;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the value to which the specified key is mapped,\n * or {@code null} if this map contains no mapping for the key.\n *\n * <p>More formally, if this map contains a mapping from a key\n * {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n * key.equals(k))}, then this method returns {@code v}; otherwise\n * it returns {@code null}.  (There can be at most one such mapping.)\n *\n * <p>A return value of {@code null} does not <i>necessarily</i>\n * indicate that the map contains no mapping for the key; it's also\n * possible that the map explicitly maps the key to {@code null}.\n * The {@link #containsKey containsKey} operation may be used to\n * distinguish these two cases.\n *\n * @see #put(Object, Object)\n */\n",
        "class": "/**\n * Hash table based implementation of the {@code Map} interface.  This\n * implementation provides all of the optional map operations, and permits\n * {@code null} values and the {@code null} key.  (The {@code HashMap}\n * class is roughly equivalent to {@code Hashtable}, except that it is\n * unsynchronized and permits nulls.)  This class makes no guarantees as to\n * the order of the map; in particular, it does not guarantee that the order\n * will remain constant over time.\n *\n * <p>This implementation provides constant-time performance for the basic\n * operations ({@code get} and {@code put}), assuming the hash function\n * disperses the elements properly among the buckets.  Iteration over\n * collection views requires time proportional to the \"capacity\" of the\n * {@code HashMap} instance (the number of buckets) plus its size (the number\n * of key-value mappings).  Thus, it's very important not to set the initial\n * capacity too high (or the load factor too low) if iteration performance is\n * important.\n *\n * <p>An instance of {@code HashMap} has two parameters that affect its\n * performance: <i>initial capacity</i> and <i>load factor</i>.  The\n * <i>capacity</i> is the number of buckets in the hash table, and the initial\n * capacity is simply the capacity at the time the hash table is created.  The\n * <i>load factor</i> is a measure of how full the hash table is allowed to\n * get before its capacity is automatically increased.  When the number of\n * entries in the hash table exceeds the product of the load factor and the\n * current capacity, the hash table is <i>rehashed</i> (that is, internal data\n * structures are rebuilt) so that the hash table has approximately twice the\n * number of buckets.\n *\n * <p>As a general rule, the default load factor (.75) offers a good\n * tradeoff between time and space costs.  Higher values decrease the\n * space overhead but increase the lookup cost (reflected in most of\n * the operations of the {@code HashMap} class, including\n * {@code get} and {@code put}).  The expected number of entries in\n * the map and its load factor should be taken into account when\n * setting its initial capacity, so as to minimize the number of\n * rehash operations.  If the initial capacity is greater than the\n * maximum number of entries divided by the load factor, no rehash\n * operations will ever occur.\n *\n * <p>If many mappings are to be stored in a {@code HashMap}\n * instance, creating it with a sufficiently large capacity will allow\n * the mappings to be stored more efficiently than letting it perform\n * automatic rehashing as needed to grow the table.  Note that using\n * many keys with the same {@code hashCode()} is a sure way to slow\n * down performance of any hash table. To ameliorate impact, when keys\n * are {@link Comparable}, this class may use comparison order among\n * keys to help break ties.\n *\n * <p><strong>Note that this implementation is not synchronized.</strong>\n * If multiple threads access a hash map concurrently, and at least one of\n * the threads modifies the map structurally, it <i>must</i> be\n * synchronized externally.  (A structural modification is any operation\n * that adds or deletes one or more mappings; merely changing the value\n * associated with a key that an instance already contains is not a\n * structural modification.)  This is typically accomplished by\n * synchronizing on some object that naturally encapsulates the map.\n *\n * If no such object exists, the map should be \"wrapped\" using the\n * {@link Collections#synchronizedMap Collections.synchronizedMap}\n * method.  This is best done at creation time, to prevent accidental\n * unsynchronized access to the map:<pre>\n *   Map m = Collections.synchronizedMap(new HashMap(...));</pre>\n *\n * <p>The iterators returned by all of this class's \"collection view methods\"\n * are <i>fail-fast</i>: if the map is structurally modified at any time after\n * the iterator is created, in any way except through the iterator's own\n * {@code remove} method, the iterator will throw a\n * {@link ConcurrentModificationException}.  Thus, in the face of concurrent\n * modification, the iterator fails quickly and cleanly, rather than risking\n * arbitrary, non-deterministic behavior at an undetermined time in the\n * future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n *\n * @author  Doug Lea\n * @author  Josh Bloch\n * @author  Arthur van Hoff\n * @author  Neal Gafter\n * @see     Object#hashCode()\n * @see     Collection\n * @see     Map\n * @see     TreeMap\n * @see     Hashtable\n * @since   1.2\n */\n"
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.HashMap.put",
      "parameters": [
        "java.lang.Object",
        "java.lang.Object"
      ],
      "signature": "java.lang.Object java.util.HashMap.put(java.lang.Object,java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public V put(K key, V value) {\r\n    return putVal(hash(key), key, value, false, true);\r\n}",
      "javadoc": {
        "method": "/**\n * Associates the specified value with the specified key in this map.\n * If the map previously contained a mapping for the key, the old\n * value is replaced.\n *\n * @param key key with which the specified value is to be associated\n * @param value value to be associated with the specified key\n * @return the previous value associated with {@code key}, or\n *         {@code null} if there was no mapping for {@code key}.\n *         (A {@code null} return can also indicate that the map\n *         previously associated {@code null} with {@code key}.)\n */\n",
        "class": "/**\n * Hash table based implementation of the {@code Map} interface.  This\n * implementation provides all of the optional map operations, and permits\n * {@code null} values and the {@code null} key.  (The {@code HashMap}\n * class is roughly equivalent to {@code Hashtable}, except that it is\n * unsynchronized and permits nulls.)  This class makes no guarantees as to\n * the order of the map; in particular, it does not guarantee that the order\n * will remain constant over time.\n *\n * <p>This implementation provides constant-time performance for the basic\n * operations ({@code get} and {@code put}), assuming the hash function\n * disperses the elements properly among the buckets.  Iteration over\n * collection views requires time proportional to the \"capacity\" of the\n * {@code HashMap} instance (the number of buckets) plus its size (the number\n * of key-value mappings).  Thus, it's very important not to set the initial\n * capacity too high (or the load factor too low) if iteration performance is\n * important.\n *\n * <p>An instance of {@code HashMap} has two parameters that affect its\n * performance: <i>initial capacity</i> and <i>load factor</i>.  The\n * <i>capacity</i> is the number of buckets in the hash table, and the initial\n * capacity is simply the capacity at the time the hash table is created.  The\n * <i>load factor</i> is a measure of how full the hash table is allowed to\n * get before its capacity is automatically increased.  When the number of\n * entries in the hash table exceeds the product of the load factor and the\n * current capacity, the hash table is <i>rehashed</i> (that is, internal data\n * structures are rebuilt) so that the hash table has approximately twice the\n * number of buckets.\n *\n * <p>As a general rule, the default load factor (.75) offers a good\n * tradeoff between time and space costs.  Higher values decrease the\n * space overhead but increase the lookup cost (reflected in most of\n * the operations of the {@code HashMap} class, including\n * {@code get} and {@code put}).  The expected number of entries in\n * the map and its load factor should be taken into account when\n * setting its initial capacity, so as to minimize the number of\n * rehash operations.  If the initial capacity is greater than the\n * maximum number of entries divided by the load factor, no rehash\n * operations will ever occur.\n *\n * <p>If many mappings are to be stored in a {@code HashMap}\n * instance, creating it with a sufficiently large capacity will allow\n * the mappings to be stored more efficiently than letting it perform\n * automatic rehashing as needed to grow the table.  Note that using\n * many keys with the same {@code hashCode()} is a sure way to slow\n * down performance of any hash table. To ameliorate impact, when keys\n * are {@link Comparable}, this class may use comparison order among\n * keys to help break ties.\n *\n * <p><strong>Note that this implementation is not synchronized.</strong>\n * If multiple threads access a hash map concurrently, and at least one of\n * the threads modifies the map structurally, it <i>must</i> be\n * synchronized externally.  (A structural modification is any operation\n * that adds or deletes one or more mappings; merely changing the value\n * associated with a key that an instance already contains is not a\n * structural modification.)  This is typically accomplished by\n * synchronizing on some object that naturally encapsulates the map.\n *\n * If no such object exists, the map should be \"wrapped\" using the\n * {@link Collections#synchronizedMap Collections.synchronizedMap}\n * method.  This is best done at creation time, to prevent accidental\n * unsynchronized access to the map:<pre>\n *   Map m = Collections.synchronizedMap(new HashMap(...));</pre>\n *\n * <p>The iterators returned by all of this class's \"collection view methods\"\n * are <i>fail-fast</i>: if the map is structurally modified at any time after\n * the iterator is created, in any way except through the iterator's own\n * {@code remove} method, the iterator will throw a\n * {@link ConcurrentModificationException}.  Thus, in the face of concurrent\n * modification, the iterator fails quickly and cleanly, rather than risking\n * arbitrary, non-deterministic behavior at an undetermined time in the\n * future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n *\n * @author  Doug Lea\n * @author  Josh Bloch\n * @author  Arthur van Hoff\n * @author  Neal Gafter\n * @see     Object#hashCode()\n * @see     Collection\n * @see     Map\n * @see     TreeMap\n * @see     Hashtable\n * @since   1.2\n */\n"
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.HashMap.<init>",
      "parameters": [],
      "signature": "void java.util.HashMap.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public HashMap() {\r\n    // all other fields defaulted\r\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs an empty {@code HashMap} with the default initial capacity\n * (16) and the default load factor (0.75).\n */\n",
        "class": "/**\n * Hash table based implementation of the {@code Map} interface.  This\n * implementation provides all of the optional map operations, and permits\n * {@code null} values and the {@code null} key.  (The {@code HashMap}\n * class is roughly equivalent to {@code Hashtable}, except that it is\n * unsynchronized and permits nulls.)  This class makes no guarantees as to\n * the order of the map; in particular, it does not guarantee that the order\n * will remain constant over time.\n *\n * <p>This implementation provides constant-time performance for the basic\n * operations ({@code get} and {@code put}), assuming the hash function\n * disperses the elements properly among the buckets.  Iteration over\n * collection views requires time proportional to the \"capacity\" of the\n * {@code HashMap} instance (the number of buckets) plus its size (the number\n * of key-value mappings).  Thus, it's very important not to set the initial\n * capacity too high (or the load factor too low) if iteration performance is\n * important.\n *\n * <p>An instance of {@code HashMap} has two parameters that affect its\n * performance: <i>initial capacity</i> and <i>load factor</i>.  The\n * <i>capacity</i> is the number of buckets in the hash table, and the initial\n * capacity is simply the capacity at the time the hash table is created.  The\n * <i>load factor</i> is a measure of how full the hash table is allowed to\n * get before its capacity is automatically increased.  When the number of\n * entries in the hash table exceeds the product of the load factor and the\n * current capacity, the hash table is <i>rehashed</i> (that is, internal data\n * structures are rebuilt) so that the hash table has approximately twice the\n * number of buckets.\n *\n * <p>As a general rule, the default load factor (.75) offers a good\n * tradeoff between time and space costs.  Higher values decrease the\n * space overhead but increase the lookup cost (reflected in most of\n * the operations of the {@code HashMap} class, including\n * {@code get} and {@code put}).  The expected number of entries in\n * the map and its load factor should be taken into account when\n * setting its initial capacity, so as to minimize the number of\n * rehash operations.  If the initial capacity is greater than the\n * maximum number of entries divided by the load factor, no rehash\n * operations will ever occur.\n *\n * <p>If many mappings are to be stored in a {@code HashMap}\n * instance, creating it with a sufficiently large capacity will allow\n * the mappings to be stored more efficiently than letting it perform\n * automatic rehashing as needed to grow the table.  Note that using\n * many keys with the same {@code hashCode()} is a sure way to slow\n * down performance of any hash table. To ameliorate impact, when keys\n * are {@link Comparable}, this class may use comparison order among\n * keys to help break ties.\n *\n * <p><strong>Note that this implementation is not synchronized.</strong>\n * If multiple threads access a hash map concurrently, and at least one of\n * the threads modifies the map structurally, it <i>must</i> be\n * synchronized externally.  (A structural modification is any operation\n * that adds or deletes one or more mappings; merely changing the value\n * associated with a key that an instance already contains is not a\n * structural modification.)  This is typically accomplished by\n * synchronizing on some object that naturally encapsulates the map.\n *\n * If no such object exists, the map should be \"wrapped\" using the\n * {@link Collections#synchronizedMap Collections.synchronizedMap}\n * method.  This is best done at creation time, to prevent accidental\n * unsynchronized access to the map:<pre>\n *   Map m = Collections.synchronizedMap(new HashMap(...));</pre>\n *\n * <p>The iterators returned by all of this class's \"collection view methods\"\n * are <i>fail-fast</i>: if the map is structurally modified at any time after\n * the iterator is created, in any way except through the iterator's own\n * {@code remove} method, the iterator will throw a\n * {@link ConcurrentModificationException}.  Thus, in the face of concurrent\n * modification, the iterator fails quickly and cleanly, rather than risking\n * arbitrary, non-deterministic behavior at an undetermined time in the\n * future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n *\n * @author  Doug Lea\n * @author  Josh Bloch\n * @author  Arthur van Hoff\n * @author  Neal Gafter\n * @see     Object#hashCode()\n * @see     Collection\n * @see     Map\n * @see     TreeMap\n * @see     Hashtable\n * @since   1.2\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Iterator.hasNext",
      "parameters": [],
      "signature": "boolean java.util.Iterator.hasNext()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract boolean hasNext() {}",
      "javadoc": {
        "method": "/**\n * Returns {@code true} if the iteration has more elements.\n * (In other words, returns {@code true} if {@link #next} would\n * return an element rather than throwing an exception.)\n *\n * @return {@code true} if the iteration has more elements\n */\n",
        "class": "/**\n * An iterator over a collection.  {@code Iterator} takes the place of\n * {@link Enumeration} in the Java Collections Framework.  Iterators\n * differ from enumerations in two ways:\n *\n * <ul>\n *      <li> Iterators allow the caller to remove elements from the\n *           underlying collection during the iteration with well-defined\n *           semantics.\n *      <li> Method names have been improved.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @apiNote\n * An {@link Enumeration} can be converted into an {@code Iterator} by\n * using the {@link Enumeration#asIterator} method.\n *\n * @param <E> the type of elements returned by this iterator\n *\n * @author  Josh Bloch\n * @see Collection\n * @see ListIterator\n * @see Iterable\n * @since 1.2\n */\n"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Iterator.next",
      "parameters": [],
      "signature": "java.lang.Object java.util.Iterator.next()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "E next();",
      "javadoc": {
        "method": "/**\n     * Returns the next element in the iteration.\n     *\n     * @return the next element in the iteration\n     * @throws NoSuchElementException if the iteration has no more elements\n     */",
        "class": "/**\n * An iterator over a collection.  {@code Iterator} takes the place of\n * {@link Enumeration} in the Java Collections Framework.  Iterators\n * differ from enumerations in two ways:\n *\n * <ul>\n *      <li> Iterators allow the caller to remove elements from the\n *           underlying collection during the iteration with well-defined\n *           semantics.\n *      <li> Method names have been improved.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @apiNote\n * An {@link Enumeration} can be converted into an {@code Iterator} by\n * using the {@link Enumeration#asIterator} method.\n *\n * @param <E> the type of elements returned by this iterator\n *\n * @author  Josh Bloch\n * @see Collection\n * @see ListIterator\n * @see Iterable\n * @since 1.2\n */"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.List.add",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean java.util.List.add(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "boolean add(E e);",
      "javadoc": {
        "method": "/**\n     * Appends the specified element to the end of this list (optional\n     * operation).\n     *\n     * <p>Lists that support this operation may place limitations on what\n     * elements may be added to this list.  In particular, some\n     * lists will refuse to add null elements, and others will impose\n     * restrictions on the type of elements that may be added.  List\n     * classes should clearly specify in their documentation any restrictions\n     * on what elements may be added.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this list\n     */",
        "class": "/**\n * An ordered collection (also known as a <i>sequence</i>).  The user of this\n * interface has precise control over where in the list each element is\n * inserted.  The user can access elements by their integer index (position in\n * the list), and search for elements in the list.<p>\n *\n * Unlike sets, lists typically allow duplicate elements.  More formally,\n * lists typically allow pairs of elements {@code e1} and {@code e2}\n * such that {@code e1.equals(e2)}, and they typically allow multiple\n * null elements if they allow null elements at all.  It is not inconceivable\n * that someone might wish to implement a list that prohibits duplicates, by\n * throwing runtime exceptions when the user attempts to insert them, but we\n * expect this usage to be rare.<p>\n *\n * The {@code List} interface places additional stipulations, beyond those\n * specified in the {@code Collection} interface, on the contracts of the\n * {@code iterator}, {@code add}, {@code remove}, {@code equals}, and\n * {@code hashCode} methods.  Declarations for other inherited methods are\n * also included here for convenience.<p>\n *\n * The {@code List} interface provides four methods for positional (indexed)\n * access to list elements.  Lists (like Java arrays) are zero based.  Note\n * that these operations may execute in time proportional to the index value\n * for some implementations (the {@code LinkedList} class, for\n * example). Thus, iterating over the elements in a list is typically\n * preferable to indexing through it if the caller does not know the\n * implementation.<p>\n *\n * The {@code List} interface provides a special iterator, called a\n * {@code ListIterator}, that allows element insertion and replacement, and\n * bidirectional access in addition to the normal operations that the\n * {@code Iterator} interface provides.  A method is provided to obtain a\n * list iterator that starts at a specified position in the list.<p>\n *\n * The {@code List} interface provides two methods to search for a specified\n * object.  From a performance standpoint, these methods should be used with\n * caution.  In many implementations they will perform costly linear\n * searches.<p>\n *\n * The {@code List} interface provides two methods to efficiently insert and\n * remove multiple elements at an arbitrary point in the list.<p>\n *\n * Note: While it is permissible for lists to contain themselves as elements,\n * extreme caution is advised: the {@code equals} and {@code hashCode}\n * methods are no longer well defined on such a list.\n *\n * <p>Some list implementations have restrictions on the elements that\n * they may contain.  For example, some implementations prohibit null elements,\n * and some have restrictions on the types of their elements.  Attempting to\n * add an ineligible element throws an unchecked exception, typically\n * {@code NullPointerException} or {@code ClassCastException}.  Attempting\n * to query the presence of an ineligible element may throw an exception,\n * or it may simply return false; some implementations will exhibit the former\n * behavior and some will exhibit the latter.  More generally, attempting an\n * operation on an ineligible element whose completion would not result in\n * the insertion of an ineligible element into the list may throw an\n * exception or it may succeed, at the option of the implementation.\n * Such exceptions are marked as \"optional\" in the specification for this\n * interface.\n *\n * <h2><a id=\"unmodifiable\">Unmodifiable Lists</a></h2>\n * <p>The {@link List#of(Object...) List.of} and\n * {@link List#copyOf List.copyOf} static factory methods\n * provide a convenient way to create unmodifiable lists. The {@code List}\n * instances created by these methods have the following characteristics:\n *\n * <ul>\n * <li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Elements cannot\n * be added, removed, or replaced. Calling any mutator method on the List\n * will always cause {@code UnsupportedOperationException} to be thrown.\n * However, if the contained elements are themselves mutable,\n * this may cause the List's contents to appear to change.\n * <li>They disallow {@code null} elements. Attempts to create them with\n * {@code null} elements result in {@code NullPointerException}.\n * <li>They are serializable if all elements are serializable.\n * <li>The order of elements in the list is the same as the order of the\n * provided arguments, or of the elements in the provided array.\n * <li>The lists and their {@link #subList(int, int) subList} views implement the\n * {@link RandomAccess} interface.\n * <li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.\n * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n * as interchangeable and should not use them for synchronization, or\n * unpredictable behavior may occur. For example, in a future release,\n * synchronization may fail. Callers should make no assumptions about the\n * identity of the returned instances. Factories are free to\n * create new instances or reuse existing ones.\n * <li>They are serialized as specified on the\n * <a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>\n * page.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <E> the type of elements in this list\n *\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see Collection\n * @see Set\n * @see ArrayList\n * @see LinkedList\n * @see Vector\n * @see Arrays#asList(Object[])\n * @see Collections#nCopies(int, Object)\n * @see Collections#EMPTY_LIST\n * @see AbstractList\n * @see AbstractSequentialList\n * @since 1.2\n */"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.List.get",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.Object java.util.List.get(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "E get(int index);",
      "javadoc": {
        "method": "/**\n     * Returns the element at the specified position in this list.\n     *\n     * @param index index of the element to return\n     * @return the element at the specified position in this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */",
        "class": "/**\n * An ordered collection (also known as a <i>sequence</i>).  The user of this\n * interface has precise control over where in the list each element is\n * inserted.  The user can access elements by their integer index (position in\n * the list), and search for elements in the list.<p>\n *\n * Unlike sets, lists typically allow duplicate elements.  More formally,\n * lists typically allow pairs of elements {@code e1} and {@code e2}\n * such that {@code e1.equals(e2)}, and they typically allow multiple\n * null elements if they allow null elements at all.  It is not inconceivable\n * that someone might wish to implement a list that prohibits duplicates, by\n * throwing runtime exceptions when the user attempts to insert them, but we\n * expect this usage to be rare.<p>\n *\n * The {@code List} interface places additional stipulations, beyond those\n * specified in the {@code Collection} interface, on the contracts of the\n * {@code iterator}, {@code add}, {@code remove}, {@code equals}, and\n * {@code hashCode} methods.  Declarations for other inherited methods are\n * also included here for convenience.<p>\n *\n * The {@code List} interface provides four methods for positional (indexed)\n * access to list elements.  Lists (like Java arrays) are zero based.  Note\n * that these operations may execute in time proportional to the index value\n * for some implementations (the {@code LinkedList} class, for\n * example). Thus, iterating over the elements in a list is typically\n * preferable to indexing through it if the caller does not know the\n * implementation.<p>\n *\n * The {@code List} interface provides a special iterator, called a\n * {@code ListIterator}, that allows element insertion and replacement, and\n * bidirectional access in addition to the normal operations that the\n * {@code Iterator} interface provides.  A method is provided to obtain a\n * list iterator that starts at a specified position in the list.<p>\n *\n * The {@code List} interface provides two methods to search for a specified\n * object.  From a performance standpoint, these methods should be used with\n * caution.  In many implementations they will perform costly linear\n * searches.<p>\n *\n * The {@code List} interface provides two methods to efficiently insert and\n * remove multiple elements at an arbitrary point in the list.<p>\n *\n * Note: While it is permissible for lists to contain themselves as elements,\n * extreme caution is advised: the {@code equals} and {@code hashCode}\n * methods are no longer well defined on such a list.\n *\n * <p>Some list implementations have restrictions on the elements that\n * they may contain.  For example, some implementations prohibit null elements,\n * and some have restrictions on the types of their elements.  Attempting to\n * add an ineligible element throws an unchecked exception, typically\n * {@code NullPointerException} or {@code ClassCastException}.  Attempting\n * to query the presence of an ineligible element may throw an exception,\n * or it may simply return false; some implementations will exhibit the former\n * behavior and some will exhibit the latter.  More generally, attempting an\n * operation on an ineligible element whose completion would not result in\n * the insertion of an ineligible element into the list may throw an\n * exception or it may succeed, at the option of the implementation.\n * Such exceptions are marked as \"optional\" in the specification for this\n * interface.\n *\n * <h2><a id=\"unmodifiable\">Unmodifiable Lists</a></h2>\n * <p>The {@link List#of(Object...) List.of} and\n * {@link List#copyOf List.copyOf} static factory methods\n * provide a convenient way to create unmodifiable lists. The {@code List}\n * instances created by these methods have the following characteristics:\n *\n * <ul>\n * <li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Elements cannot\n * be added, removed, or replaced. Calling any mutator method on the List\n * will always cause {@code UnsupportedOperationException} to be thrown.\n * However, if the contained elements are themselves mutable,\n * this may cause the List's contents to appear to change.\n * <li>They disallow {@code null} elements. Attempts to create them with\n * {@code null} elements result in {@code NullPointerException}.\n * <li>They are serializable if all elements are serializable.\n * <li>The order of elements in the list is the same as the order of the\n * provided arguments, or of the elements in the provided array.\n * <li>The lists and their {@link #subList(int, int) subList} views implement the\n * {@link RandomAccess} interface.\n * <li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.\n * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n * as interchangeable and should not use them for synchronization, or\n * unpredictable behavior may occur. For example, in a future release,\n * synchronization may fail. Callers should make no assumptions about the\n * identity of the returned instances. Factories are free to\n * create new instances or reuse existing ones.\n * <li>They are serialized as specified on the\n * <a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>\n * page.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <E> the type of elements in this list\n *\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see Collection\n * @see Set\n * @see ArrayList\n * @see LinkedList\n * @see Vector\n * @see Arrays#asList(Object[])\n * @see Collections#nCopies(int, Object)\n * @see Collections#EMPTY_LIST\n * @see AbstractList\n * @see AbstractSequentialList\n * @since 1.2\n */"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.List.remove",
      "parameters": [
        "int"
      ],
      "signature": "java.lang.Object java.util.List.remove(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "E remove(int index);",
      "javadoc": {
        "method": "/**\n     * Removes the element at the specified position in this list (optional\n     * operation).  Shifts any subsequent elements to the left (subtracts one\n     * from their indices).  Returns the element that was removed from the\n     * list.\n     *\n     * @param index the index of the element to be removed\n     * @return the element previously at the specified position\n     * @throws UnsupportedOperationException if the {@code remove} operation\n     *         is not supported by this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */",
        "class": "/**\n * An ordered collection (also known as a <i>sequence</i>).  The user of this\n * interface has precise control over where in the list each element is\n * inserted.  The user can access elements by their integer index (position in\n * the list), and search for elements in the list.<p>\n *\n * Unlike sets, lists typically allow duplicate elements.  More formally,\n * lists typically allow pairs of elements {@code e1} and {@code e2}\n * such that {@code e1.equals(e2)}, and they typically allow multiple\n * null elements if they allow null elements at all.  It is not inconceivable\n * that someone might wish to implement a list that prohibits duplicates, by\n * throwing runtime exceptions when the user attempts to insert them, but we\n * expect this usage to be rare.<p>\n *\n * The {@code List} interface places additional stipulations, beyond those\n * specified in the {@code Collection} interface, on the contracts of the\n * {@code iterator}, {@code add}, {@code remove}, {@code equals}, and\n * {@code hashCode} methods.  Declarations for other inherited methods are\n * also included here for convenience.<p>\n *\n * The {@code List} interface provides four methods for positional (indexed)\n * access to list elements.  Lists (like Java arrays) are zero based.  Note\n * that these operations may execute in time proportional to the index value\n * for some implementations (the {@code LinkedList} class, for\n * example). Thus, iterating over the elements in a list is typically\n * preferable to indexing through it if the caller does not know the\n * implementation.<p>\n *\n * The {@code List} interface provides a special iterator, called a\n * {@code ListIterator}, that allows element insertion and replacement, and\n * bidirectional access in addition to the normal operations that the\n * {@code Iterator} interface provides.  A method is provided to obtain a\n * list iterator that starts at a specified position in the list.<p>\n *\n * The {@code List} interface provides two methods to search for a specified\n * object.  From a performance standpoint, these methods should be used with\n * caution.  In many implementations they will perform costly linear\n * searches.<p>\n *\n * The {@code List} interface provides two methods to efficiently insert and\n * remove multiple elements at an arbitrary point in the list.<p>\n *\n * Note: While it is permissible for lists to contain themselves as elements,\n * extreme caution is advised: the {@code equals} and {@code hashCode}\n * methods are no longer well defined on such a list.\n *\n * <p>Some list implementations have restrictions on the elements that\n * they may contain.  For example, some implementations prohibit null elements,\n * and some have restrictions on the types of their elements.  Attempting to\n * add an ineligible element throws an unchecked exception, typically\n * {@code NullPointerException} or {@code ClassCastException}.  Attempting\n * to query the presence of an ineligible element may throw an exception,\n * or it may simply return false; some implementations will exhibit the former\n * behavior and some will exhibit the latter.  More generally, attempting an\n * operation on an ineligible element whose completion would not result in\n * the insertion of an ineligible element into the list may throw an\n * exception or it may succeed, at the option of the implementation.\n * Such exceptions are marked as \"optional\" in the specification for this\n * interface.\n *\n * <h2><a id=\"unmodifiable\">Unmodifiable Lists</a></h2>\n * <p>The {@link List#of(Object...) List.of} and\n * {@link List#copyOf List.copyOf} static factory methods\n * provide a convenient way to create unmodifiable lists. The {@code List}\n * instances created by these methods have the following characteristics:\n *\n * <ul>\n * <li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Elements cannot\n * be added, removed, or replaced. Calling any mutator method on the List\n * will always cause {@code UnsupportedOperationException} to be thrown.\n * However, if the contained elements are themselves mutable,\n * this may cause the List's contents to appear to change.\n * <li>They disallow {@code null} elements. Attempts to create them with\n * {@code null} elements result in {@code NullPointerException}.\n * <li>They are serializable if all elements are serializable.\n * <li>The order of elements in the list is the same as the order of the\n * provided arguments, or of the elements in the provided array.\n * <li>The lists and their {@link #subList(int, int) subList} views implement the\n * {@link RandomAccess} interface.\n * <li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.\n * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n * as interchangeable and should not use them for synchronization, or\n * unpredictable behavior may occur. For example, in a future release,\n * synchronization may fail. Callers should make no assumptions about the\n * identity of the returned instances. Factories are free to\n * create new instances or reuse existing ones.\n * <li>They are serialized as specified on the\n * <a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>\n * page.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <E> the type of elements in this list\n *\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see Collection\n * @see Set\n * @see ArrayList\n * @see LinkedList\n * @see Vector\n * @see Arrays#asList(Object[])\n * @see Collections#nCopies(int, Object)\n * @see Collections#EMPTY_LIST\n * @see AbstractList\n * @see AbstractSequentialList\n * @since 1.2\n */"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.List.iterator",
      "parameters": [],
      "signature": "java.util.Iterator java.util.List.iterator()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract Iterator<E> iterator() {}",
      "javadoc": {
        "method": "/**\n * Returns an iterator over the elements in this list in proper sequence.\n *\n * @return an iterator over the elements in this list in proper sequence\n */\n",
        "class": ""
      },"return": "java.util.Iterator",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Map.isEmpty",
      "parameters": [],
      "signature": "boolean java.util.Map.isEmpty()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract boolean isEmpty() {}",
      "javadoc": {
        "method": "/**\n * Returns {@code true} if this map contains no key-value mappings.\n *\n * @return {@code true} if this map contains no key-value mappings\n */\n",
        "class": "/**\n * An object that maps keys to values.  A map cannot contain duplicate keys;\n * each key can map to at most one value.\n *\n * <p>This interface takes the place of the {@code Dictionary} class, which\n * was a totally abstract class rather than an interface.\n *\n * <p>The {@code Map} interface provides three <i>collection views</i>, which\n * allow a map's contents to be viewed as a set of keys, collection of values,\n * or set of key-value mappings.  The <i>order</i> of a map is defined as\n * the order in which the iterators on the map's collection views return their\n * elements.  Some map implementations, like the {@code TreeMap} class, make\n * specific guarantees as to their order; others, like the {@code HashMap}\n * class, do not.\n *\n * <p>Note: great care must be exercised if mutable objects are used as map\n * keys.  The behavior of a map is not specified if the value of an object is\n * changed in a manner that affects {@code equals} comparisons while the\n * object is a key in the map.  A special case of this prohibition is that it\n * is not permissible for a map to contain itself as a key.  While it is\n * permissible for a map to contain itself as a value, extreme caution is\n * advised: the {@code equals} and {@code hashCode} methods are no longer\n * well defined on such a map.\n *\n * <p>All general-purpose map implementation classes should provide two\n * \"standard\" constructors: a void (no arguments) constructor which creates an\n * empty map, and a constructor with a single argument of type {@code Map},\n * which creates a new map with the same key-value mappings as its argument.\n * In effect, the latter constructor allows the user to copy any map,\n * producing an equivalent map of the desired class.  There is no way to\n * enforce this recommendation (as interfaces cannot contain constructors) but\n * all of the general-purpose map implementations in the JDK comply.\n *\n * <p>The \"destructive\" methods contained in this interface, that is, the\n * methods that modify the map on which they operate, are specified to throw\n * {@code UnsupportedOperationException} if this map does not support the\n * operation.  If this is the case, these methods may, but are not required\n * to, throw an {@code UnsupportedOperationException} if the invocation would\n * have no effect on the map.  For example, invoking the {@link #putAll(Map)}\n * method on an unmodifiable map may, but is not required to, throw the\n * exception if the map whose mappings are to be \"superimposed\" is empty.\n *\n * <p>Some map implementations have restrictions on the keys and values they\n * may contain.  For example, some implementations prohibit null keys and\n * values, and some have restrictions on the types of their keys.  Attempting\n * to insert an ineligible key or value throws an unchecked exception,\n * typically {@code NullPointerException} or {@code ClassCastException}.\n * Attempting to query the presence of an ineligible key or value may throw an\n * exception, or it may simply return false; some implementations will exhibit\n * the former behavior and some will exhibit the latter.  More generally,\n * attempting an operation on an ineligible key or value whose completion\n * would not result in the insertion of an ineligible element into the map may\n * throw an exception or it may succeed, at the option of the implementation.\n * Such exceptions are marked as \"optional\" in the specification for this\n * interface.\n *\n * <p>Many methods in Collections Framework interfaces are defined\n * in terms of the {@link Object#equals(Object) equals} method.  For\n * example, the specification for the {@link #containsKey(Object)\n * containsKey(Object key)} method says: \"returns {@code true} if and\n * only if this map contains a mapping for a key {@code k} such that\n * {@code (key==null ? k==null : key.equals(k))}.\" This specification should\n * <i>not</i> be construed to imply that invoking {@code Map.containsKey}\n * with a non-null argument {@code key} will cause {@code key.equals(k)} to\n * be invoked for any key {@code k}.  Implementations are free to\n * implement optimizations whereby the {@code equals} invocation is avoided,\n * for example, by first comparing the hash codes of the two keys.  (The\n * {@link Object#hashCode()} specification guarantees that two objects with\n * unequal hash codes cannot be equal.)  More generally, implementations of\n * the various Collections Framework interfaces are free to take advantage of\n * the specified behavior of underlying {@link Object} methods wherever the\n * implementor deems it appropriate.\n *\n * <p>Some map operations which perform recursive traversal of the map may fail\n * with an exception for self-referential instances where the map directly or\n * indirectly contains itself. This includes the {@code clone()},\n * {@code equals()}, {@code hashCode()} and {@code toString()} methods.\n * Implementations may optionally handle the self-referential scenario, however\n * most current implementations do not do so.\n *\n * <h2><a id=\"unmodifiable\">Unmodifiable Maps</a></h2>\n * <p>The {@link Map#of() Map.of},\n * {@link Map#ofEntries(Map.Entry...) Map.ofEntries}, and\n * {@link Map#copyOf Map.copyOf}\n * static factory methods provide a convenient way to create unmodifiable maps.\n * The {@code Map}\n * instances created by these methods have the following characteristics:\n *\n * <ul>\n * <li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Keys and values\n * cannot be added, removed, or updated. Calling any mutator method on the Map\n * will always cause {@code UnsupportedOperationException} to be thrown.\n * However, if the contained keys or values are themselves mutable, this may cause the\n * Map to behave inconsistently or its contents to appear to change.\n * <li>They disallow {@code null} keys and values. Attempts to create them with\n * {@code null} keys or values result in {@code NullPointerException}.\n * <li>They are serializable if all keys and values are serializable.\n * <li>They reject duplicate keys at creation time. Duplicate keys\n * passed to a static factory method result in {@code IllegalArgumentException}.\n * <li>The iteration order of mappings is unspecified and is subject to change.\n * <li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.\n * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n * as interchangeable and should not use them for synchronization, or\n * unpredictable behavior may occur. For example, in a future release,\n * synchronization may fail. Callers should make no assumptions\n * about the identity of the returned instances. Factories are free to\n * create new instances or reuse existing ones.\n * <li>They are serialized as specified on the\n * <a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>\n * page.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n *\n * @author  Josh Bloch\n * @see HashMap\n * @see TreeMap\n * @see Hashtable\n * @see SortedMap\n * @see Collection\n * @see Set\n * @since 1.2\n */\n"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Map.get",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "java.lang.Object java.util.Map.get(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "V get(Object key);",
      "javadoc": {
        "method": "/**\n     * Returns the value to which the specified key is mapped,\n     * or {@code null} if this map contains no mapping for the key.\n     *\n     * <p>More formally, if this map contains a mapping from a key\n     * {@code k} to a value {@code v} such that\n     * {@code Objects.equals(key, k)},\n     * then this method returns {@code v}; otherwise\n     * it returns {@code null}.  (There can be at most one such mapping.)\n     *\n     * <p>If this map permits null values, then a return value of\n     * {@code null} does not <i>necessarily</i> indicate that the map\n     * contains no mapping for the key; it's also possible that the map\n     * explicitly maps the key to {@code null}.  The {@link #containsKey\n     * containsKey} operation may be used to distinguish these two cases.\n     *\n     * @param key the key whose associated value is to be returned\n     * @return the value to which the specified key is mapped, or\n     *         {@code null} if this map contains no mapping for the key\n     * @throws ClassCastException if the key is of an inappropriate type for\n     *         this map\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified key is null and this map\n     *         does not permit null keys\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     */",
        "class": "/**\n * An object that maps keys to values.  A map cannot contain duplicate keys;\n * each key can map to at most one value.\n *\n * <p>This interface takes the place of the {@code Dictionary} class, which\n * was a totally abstract class rather than an interface.\n *\n * <p>The {@code Map} interface provides three <i>collection views</i>, which\n * allow a map's contents to be viewed as a set of keys, collection of values,\n * or set of key-value mappings.  The <i>order</i> of a map is defined as\n * the order in which the iterators on the map's collection views return their\n * elements.  Some map implementations, like the {@code TreeMap} class, make\n * specific guarantees as to their order; others, like the {@code HashMap}\n * class, do not.\n *\n * <p>Note: great care must be exercised if mutable objects are used as map\n * keys.  The behavior of a map is not specified if the value of an object is\n * changed in a manner that affects {@code equals} comparisons while the\n * object is a key in the map.  A special case of this prohibition is that it\n * is not permissible for a map to contain itself as a key.  While it is\n * permissible for a map to contain itself as a value, extreme caution is\n * advised: the {@code equals} and {@code hashCode} methods are no longer\n * well defined on such a map.\n *\n * <p>All general-purpose map implementation classes should provide two\n * \"standard\" constructors: a void (no arguments) constructor which creates an\n * empty map, and a constructor with a single argument of type {@code Map},\n * which creates a new map with the same key-value mappings as its argument.\n * In effect, the latter constructor allows the user to copy any map,\n * producing an equivalent map of the desired class.  There is no way to\n * enforce this recommendation (as interfaces cannot contain constructors) but\n * all of the general-purpose map implementations in the JDK comply.\n *\n * <p>The \"destructive\" methods contained in this interface, that is, the\n * methods that modify the map on which they operate, are specified to throw\n * {@code UnsupportedOperationException} if this map does not support the\n * operation.  If this is the case, these methods may, but are not required\n * to, throw an {@code UnsupportedOperationException} if the invocation would\n * have no effect on the map.  For example, invoking the {@link #putAll(Map)}\n * method on an unmodifiable map may, but is not required to, throw the\n * exception if the map whose mappings are to be \"superimposed\" is empty.\n *\n * <p>Some map implementations have restrictions on the keys and values they\n * may contain.  For example, some implementations prohibit null keys and\n * values, and some have restrictions on the types of their keys.  Attempting\n * to insert an ineligible key or value throws an unchecked exception,\n * typically {@code NullPointerException} or {@code ClassCastException}.\n * Attempting to query the presence of an ineligible key or value may throw an\n * exception, or it may simply return false; some implementations will exhibit\n * the former behavior and some will exhibit the latter.  More generally,\n * attempting an operation on an ineligible key or value whose completion\n * would not result in the insertion of an ineligible element into the map may\n * throw an exception or it may succeed, at the option of the implementation.\n * Such exceptions are marked as \"optional\" in the specification for this\n * interface.\n *\n * <p>Many methods in Collections Framework interfaces are defined\n * in terms of the {@link Object#equals(Object) equals} method.  For\n * example, the specification for the {@link #containsKey(Object)\n * containsKey(Object key)} method says: \"returns {@code true} if and\n * only if this map contains a mapping for a key {@code k} such that\n * {@code (key==null ? k==null : key.equals(k))}.\" This specification should\n * <i>not</i> be construed to imply that invoking {@code Map.containsKey}\n * with a non-null argument {@code key} will cause {@code key.equals(k)} to\n * be invoked for any key {@code k}.  Implementations are free to\n * implement optimizations whereby the {@code equals} invocation is avoided,\n * for example, by first comparing the hash codes of the two keys.  (The\n * {@link Object#hashCode()} specification guarantees that two objects with\n * unequal hash codes cannot be equal.)  More generally, implementations of\n * the various Collections Framework interfaces are free to take advantage of\n * the specified behavior of underlying {@link Object} methods wherever the\n * implementor deems it appropriate.\n *\n * <p>Some map operations which perform recursive traversal of the map may fail\n * with an exception for self-referential instances where the map directly or\n * indirectly contains itself. This includes the {@code clone()},\n * {@code equals()}, {@code hashCode()} and {@code toString()} methods.\n * Implementations may optionally handle the self-referential scenario, however\n * most current implementations do not do so.\n *\n * <h2><a id=\"unmodifiable\">Unmodifiable Maps</a></h2>\n * <p>The {@link Map#of() Map.of},\n * {@link Map#ofEntries(Map.Entry...) Map.ofEntries}, and\n * {@link Map#copyOf Map.copyOf}\n * static factory methods provide a convenient way to create unmodifiable maps.\n * The {@code Map}\n * instances created by these methods have the following characteristics:\n *\n * <ul>\n * <li>They are <a href=\"Collection.html#unmodifiable\"><i>unmodifiable</i></a>. Keys and values\n * cannot be added, removed, or updated. Calling any mutator method on the Map\n * will always cause {@code UnsupportedOperationException} to be thrown.\n * However, if the contained keys or values are themselves mutable, this may cause the\n * Map to behave inconsistently or its contents to appear to change.\n * <li>They disallow {@code null} keys and values. Attempts to create them with\n * {@code null} keys or values result in {@code NullPointerException}.\n * <li>They are serializable if all keys and values are serializable.\n * <li>They reject duplicate keys at creation time. Duplicate keys\n * passed to a static factory method result in {@code IllegalArgumentException}.\n * <li>The iteration order of mappings is unspecified and is subject to change.\n * <li>They are <a href=\"../lang/doc-files/ValueBased.html\">value-based</a>.\n * Programmers should treat instances that are {@linkplain #equals(Object) equal}\n * as interchangeable and should not use them for synchronization, or\n * unpredictable behavior may occur. For example, in a future release,\n * synchronization may fail. Callers should make no assumptions\n * about the identity of the returned instances. Factories are free to\n * create new instances or reuse existing ones.\n * <li>They are serialized as specified on the\n * <a href=\"{@docRoot}/serialized-form.html#java.util.CollSer\">Serialized Form</a>\n * page.\n * </ul>\n *\n * <p>This interface is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @param <K> the type of keys maintained by this map\n * @param <V> the type of mapped values\n *\n * @author  Josh Bloch\n * @see HashMap\n * @see TreeMap\n * @see Hashtable\n * @see SortedMap\n * @see Collection\n * @see Set\n * @since 1.2\n */"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Properties.getProperty",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "java.lang.String java.util.Properties.getProperty(java.lang.String,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public String getProperty(String key, String defaultValue) {\r\n    String val = getProperty(key);\r\n    return (val == null) ? defaultValue : val;\r\n}",
      "javadoc": {
        "method": "/**\n * Searches for the property with the specified key in this property list.\n * If the key is not found in this property list, the default property list,\n * and its defaults, recursively, are then checked. The method returns the\n * default value argument if the property is not found.\n *\n * @param   key            the hashtable key.\n * @param   defaultValue   a default value.\n *\n * @return  the value in this property list with the specified key value.\n * @see     #setProperty\n * @see     #defaults\n */\n",
        "class": "/**\n * The {@code Properties} class represents a persistent set of\n * properties. The {@code Properties} can be saved to a stream\n * or loaded from a stream. Each key and its corresponding value in\n * the property list is a string.\n * <p>\n * A property list can contain another property list as its\n * \"defaults\"; this second property list is searched if\n * the property key is not found in the original property list.\n * <p>\n * Because {@code Properties} inherits from {@code Hashtable}, the\n * {@code put} and {@code putAll} methods can be applied to a\n * {@code Properties} object.  Their use is strongly discouraged as they\n * allow the caller to insert entries whose keys or values are not\n * {@code Strings}.  The {@code setProperty} method should be used\n * instead.  If the {@code store} or {@code save} method is called\n * on a \"compromised\" {@code Properties} object that contains a\n * non-{@code String} key or value, the call will fail. Similarly,\n * the call to the {@code propertyNames} or {@code list} method\n * will fail if it is called on a \"compromised\" {@code Properties}\n * object that contains a non-{@code String} key.\n *\n * <p>\n * The iterators returned by the {@code iterator} method of this class's\n * \"collection views\" (that is, {@code entrySet()}, {@code keySet()}, and\n * {@code values()}) may not fail-fast (unlike the Hashtable implementation).\n * These iterators are guaranteed to traverse elements as they existed upon\n * construction exactly once, and may (but are not guaranteed to) reflect any\n * modifications subsequent to construction.\n * <p>\n * The {@link #load(java.io.Reader) load(Reader)} {@code /}\n * {@link #store(java.io.Writer, java.lang.String) store(Writer, String)}\n * methods load and store properties from and to a character based stream\n * in a simple line-oriented format specified below.\n *\n * The {@link #load(java.io.InputStream) load(InputStream)} {@code /}\n * {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)}\n * methods work the same way as the load(Reader)/store(Writer, String) pair, except\n * the input/output stream is encoded in ISO 8859-1 character encoding.\n * Characters that cannot be directly represented in this encoding can be written using\n * Unicode escapes as defined in section {@jls 3.3} of\n * <cite>The Java Language Specification</cite>;\n * only a single 'u' character is allowed in an escape\n * sequence.\n *\n * <p> The {@link #loadFromXML(InputStream)} and {@link\n * #storeToXML(OutputStream, String, String)} methods load and store properties\n * in a simple XML format.  By default the UTF-8 character encoding is used,\n * however a specific encoding may be specified if required. Implementations\n * are required to support UTF-8 and UTF-16 and may support other encodings.\n * An XML properties document has the following DOCTYPE declaration:\n *\n * <pre>\n * &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n * </pre>\n * Note that the system URI (http://java.sun.com/dtd/properties.dtd) is\n * <i>not</i> accessed when exporting or importing properties; it merely\n * serves as a string to uniquely identify the DTD, which is:\n * <pre>\n *    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n *\n *    &lt;!-- DTD for properties --&gt;\n *\n *    &lt;!ELEMENT properties ( comment?, entry* ) &gt;\n *\n *    &lt;!ATTLIST properties version CDATA #FIXED \"1.0\"&gt;\n *\n *    &lt;!ELEMENT comment (#PCDATA) &gt;\n *\n *    &lt;!ELEMENT entry (#PCDATA) &gt;\n *\n *    &lt;!ATTLIST entry key CDATA #REQUIRED&gt;\n * </pre>\n *\n * <p>This class is thread-safe: multiple threads can share a single\n * {@code Properties} object without the need for external synchronization.\n *\n * @apiNote\n * The {@code Properties} class does not inherit the concept of a load factor\n * from its superclass, {@code Hashtable}.\n *\n * @author  Arthur van Hoff\n * @author  Michael McCloskey\n * @author  Xueming Shen\n * @since   1.0\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Properties.<init>",
      "parameters": [],
      "signature": "void java.util.Properties.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public Properties() {\r\n    this(null, 8);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates an empty property list with no default values.\n *\n * @implNote The initial capacity of a {@code Properties} object created\n * with this constructor is unspecified.\n */\n",
        "class": "/**\n * The {@code Properties} class represents a persistent set of\n * properties. The {@code Properties} can be saved to a stream\n * or loaded from a stream. Each key and its corresponding value in\n * the property list is a string.\n * <p>\n * A property list can contain another property list as its\n * \"defaults\"; this second property list is searched if\n * the property key is not found in the original property list.\n * <p>\n * Because {@code Properties} inherits from {@code Hashtable}, the\n * {@code put} and {@code putAll} methods can be applied to a\n * {@code Properties} object.  Their use is strongly discouraged as they\n * allow the caller to insert entries whose keys or values are not\n * {@code Strings}.  The {@code setProperty} method should be used\n * instead.  If the {@code store} or {@code save} method is called\n * on a \"compromised\" {@code Properties} object that contains a\n * non-{@code String} key or value, the call will fail. Similarly,\n * the call to the {@code propertyNames} or {@code list} method\n * will fail if it is called on a \"compromised\" {@code Properties}\n * object that contains a non-{@code String} key.\n *\n * <p>\n * The iterators returned by the {@code iterator} method of this class's\n * \"collection views\" (that is, {@code entrySet()}, {@code keySet()}, and\n * {@code values()}) may not fail-fast (unlike the Hashtable implementation).\n * These iterators are guaranteed to traverse elements as they existed upon\n * construction exactly once, and may (but are not guaranteed to) reflect any\n * modifications subsequent to construction.\n * <p>\n * The {@link #load(java.io.Reader) load(Reader)} {@code /}\n * {@link #store(java.io.Writer, java.lang.String) store(Writer, String)}\n * methods load and store properties from and to a character based stream\n * in a simple line-oriented format specified below.\n *\n * The {@link #load(java.io.InputStream) load(InputStream)} {@code /}\n * {@link #store(java.io.OutputStream, java.lang.String) store(OutputStream, String)}\n * methods work the same way as the load(Reader)/store(Writer, String) pair, except\n * the input/output stream is encoded in ISO 8859-1 character encoding.\n * Characters that cannot be directly represented in this encoding can be written using\n * Unicode escapes as defined in section {@jls 3.3} of\n * <cite>The Java Language Specification</cite>;\n * only a single 'u' character is allowed in an escape\n * sequence.\n *\n * <p> The {@link #loadFromXML(InputStream)} and {@link\n * #storeToXML(OutputStream, String, String)} methods load and store properties\n * in a simple XML format.  By default the UTF-8 character encoding is used,\n * however a specific encoding may be specified if required. Implementations\n * are required to support UTF-8 and UTF-16 and may support other encodings.\n * An XML properties document has the following DOCTYPE declaration:\n *\n * <pre>\n * &lt;!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\"&gt;\n * </pre>\n * Note that the system URI (http://java.sun.com/dtd/properties.dtd) is\n * <i>not</i> accessed when exporting or importing properties; it merely\n * serves as a string to uniquely identify the DTD, which is:\n * <pre>\n *    &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n *\n *    &lt;!-- DTD for properties --&gt;\n *\n *    &lt;!ELEMENT properties ( comment?, entry* ) &gt;\n *\n *    &lt;!ATTLIST properties version CDATA #FIXED \"1.0\"&gt;\n *\n *    &lt;!ELEMENT comment (#PCDATA) &gt;\n *\n *    &lt;!ELEMENT entry (#PCDATA) &gt;\n *\n *    &lt;!ATTLIST entry key CDATA #REQUIRED&gt;\n * </pre>\n *\n * <p>This class is thread-safe: multiple threads can share a single\n * {@code Properties} object without the need for external synchronization.\n *\n * @apiNote\n * The {@code Properties} class does not inherit the concept of a load factor\n * from its superclass, {@code Hashtable}.\n *\n * @author  Arthur van Hoff\n * @author  Michael McCloskey\n * @author  Xueming Shen\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextDouble",
      "parameters": [],
      "signature": "double java.util.Random.nextDouble()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public double nextDouble() {\r\n    return (((long) (next(26)) << 27) + next(27)) * DOUBLE_UNIT;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the next pseudorandom, uniformly distributed\n * {@code double} value between {@code 0.0} and\n * {@code 1.0} from this random number generator's sequence.\n *\n * <p>The general contract of {@code nextDouble} is that one\n * {@code double} value, chosen (approximately) uniformly from the\n * range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is\n * pseudorandomly generated and returned.\n *\n * @implSpec The method {@code nextDouble} is implemented by class\n * {@code Random} as if by:\n * <pre>{@code\n * public double nextDouble() {\n *   return (((long)next(26) << 27) + next(27))\n *     / (double)(1L << 53);\n * }}</pre>\n * <p>The hedge \"approximately\" is used in the foregoing description only\n * because the {@code next} method is only approximately an unbiased source\n * of independently chosen bits. If it were a perfect source of randomly\n * chosen bits, then the algorithm shown would choose {@code double} values\n * from the stated range with perfect uniformity.\n * <p>[In early versions of Java, the result was incorrectly calculated as:\n * <pre> {@code return (((long)next(27) << 27) + next(27)) / (double)(1L << 54);}</pre>\n * This might seem to be equivalent, if not better, but in fact it\n * introduced a large nonuniformity because of the bias in the rounding of\n * floating-point numbers: it was three times as likely that the low-order\n * bit of the significand would be 0 than that it would be 1! This\n * nonuniformity probably doesn't matter much in practice, but we strive\n * for perfection.]\n *\n * @return the next pseudorandom, uniformly distributed {@code double}\n *         value between {@code 0.0} and {@code 1.0} from this\n *         random number generator's sequence\n * @see Math#random\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "double",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextGaussian",
      "parameters": [],
      "signature": "double java.util.Random.nextGaussian()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public synchronized double nextGaussian() {\r\n    // See Knuth, TAOCP, Vol. 2, 3rd edition, Section 3.4.1 Algorithm C.\r\n    if (haveNextNextGaussian) {\r\n        haveNextNextGaussian = false;\r\n        return nextNextGaussian;\r\n    } else {\r\n        double v1, v2, s;\r\n        do {\r\n            // between -1 and 1\r\n            v1 = 2 * nextDouble() - 1;\r\n            // between -1 and 1\r\n            v2 = 2 * nextDouble() - 1;\r\n            s = v1 * v1 + v2 * v2;\r\n        } while (s >= 1 || s == 0);\r\n        double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s) / s);\r\n        nextNextGaussian = v2 * multiplier;\r\n        haveNextNextGaussian = true;\r\n        return v1 * multiplier;\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the next pseudorandom, Gaussian (\"normally\") distributed\n * {@code double} value with mean {@code 0.0} and standard\n * deviation {@code 1.0} from this random number generator's sequence.\n * <p>\n * The general contract of {@code nextGaussian} is that one\n * {@code double} value, chosen from (approximately) the usual\n * normal distribution with mean {@code 0.0} and standard deviation\n * {@code 1.0}, is pseudorandomly generated and returned.\n *\n * @implSpec The method {@code nextGaussian} is implemented by class\n * {@code Random} as if by a threadsafe version of the following:\n * <pre>{@code\n * private double nextNextGaussian;\n * private boolean haveNextNextGaussian = false;\n *\n * public double nextGaussian() {\n *   if (haveNextNextGaussian) {\n *     haveNextNextGaussian = false;\n *     return nextNextGaussian;\n *   } else {\n *     double v1, v2, s;\n *     do {\n *       v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n *       v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0\n *       s = v1 * v1 + v2 * v2;\n *     } while (s >= 1 || s == 0);\n *     double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);\n *     nextNextGaussian = v2 * multiplier;\n *     haveNextNextGaussian = true;\n *     return v1 * multiplier;\n *   }\n * }}</pre>\n *\n * This uses the <i>polar method</i> of G. E. P. Box, M. E. Muller, and\n * G. Marsaglia, as described by Donald E. Knuth in <cite>The Art of\n * Computer Programming, Volume 2, third edition: Seminumerical Algorithms</cite>,\n * section 3.4.1, subsection C, algorithm P. Note that it generates two\n * independent values at the cost of only one call to {@code StrictMath.log}\n * and one call to {@code StrictMath.sqrt}.\n *\n * @return the next pseudorandom, Gaussian (\"normally\") distributed\n *         {@code double} value with mean {@code 0.0} and\n *         standard deviation {@code 1.0} from this random number\n *         generator's sequence\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "double",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextFloat",
      "parameters": [],
      "signature": "float java.util.Random.nextFloat()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public float nextFloat() {\r\n    return next(24) / ((float) (1 << 24));\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the next pseudorandom, uniformly distributed {@code float}\n * value between {@code 0.0} and {@code 1.0} from this random\n * number generator's sequence.\n *\n * <p>The general contract of {@code nextFloat} is that one\n * {@code float} value, chosen (approximately) uniformly from the\n * range {@code 0.0f} (inclusive) to {@code 1.0f} (exclusive), is\n * pseudorandomly generated and returned. All 2<sup>24</sup> possible\n * {@code float} values of the form <i>m&nbsp;x&nbsp;</i>2<sup>-24</sup>,\n * where <i>m</i> is a positive integer less than 2<sup>24</sup>, are\n * produced with (approximately) equal probability.\n *\n * @implSpec The method {@code nextFloat} is implemented by class\n * {@code Random} as if by:\n * <pre>{@code\n * public float nextFloat() {\n *   return next(24) / ((float)(1 << 24));\n * }}</pre>\n * <p>The hedge \"approximately\" is used in the foregoing description only\n * because the next method is only approximately an unbiased source of\n * independently chosen bits. If it were a perfect source of randomly\n * chosen bits, then the algorithm shown would choose {@code float}\n * values from the stated range with perfect uniformity.<p>\n * [In early versions of Java, the result was incorrectly calculated as:\n *  <pre> {@code return next(30) / ((float)(1 << 30));}</pre>\n * This might seem to be equivalent, if not better, but in fact it\n * introduced a slight nonuniformity because of the bias in the rounding\n * of floating-point numbers: it was slightly more likely that the\n * low-order bit of the significand would be 0 than that it would be 1.]\n *\n * @return the next pseudorandom, uniformly distributed {@code float}\n *         value between {@code 0.0} and {@code 1.0} from this\n *         random number generator's sequence\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "float",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextInt",
      "parameters": [],
      "signature": "int java.util.Random.nextInt()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int nextInt() {\r\n    return next(32);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the next pseudorandom, uniformly distributed {@code int}\n * value from this random number generator's sequence. The general\n * contract of {@code nextInt} is that one {@code int} value is\n * pseudorandomly generated and returned. All 2<sup>32</sup> possible\n * {@code int} values are produced with (approximately) equal probability.\n *\n * @implSpec The method {@code nextInt} is\n * implemented by class {@code Random} as if by:\n * <pre>{@code\n * public int nextInt() {\n *   return next(32);\n * }}</pre>\n *\n * @return the next pseudorandom, uniformly distributed {@code int}\n *         value from this random number generator's sequence\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextInt",
      "parameters": [
        "int"
      ],
      "signature": "int java.util.Random.nextInt(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public int nextInt(int bound) {\r\n    if (bound <= 0)\r\n        throw new IllegalArgumentException(BAD_BOUND);\r\n    int r = next(31);\r\n    int m = bound - 1;\r\n    if (// i.e., bound is a power of 2\r\n    (bound & m) == 0)\r\n        r = (int) ((bound * (long) r) >> 31);\r\n    else {\r\n        // reject over-represented candidates\r\n        for (int u = r; u - (r = u % bound) + m < 0; u = next(31)) ;\r\n    }\r\n    return r;\r\n}",
      "javadoc": {
        "method": "/**\n * Returns a pseudorandom, uniformly distributed {@code int} value\n * between 0 (inclusive) and the specified value (exclusive), drawn from\n * this random number generator's sequence.  The general contract of\n * {@code nextInt} is that one {@code int} value in the specified range\n * is pseudorandomly generated and returned.  All {@code bound} possible\n * {@code int} values are produced with (approximately) equal\n * probability.\n *\n * @implSpec The method {@code nextInt(int bound)} is implemented by\n * class {@code Random} as if by:\n * <pre>{@code\n * public int nextInt(int bound) {\n *   if (bound <= 0)\n *     throw new IllegalArgumentException(\"bound must be positive\");\n *\n *   if ((bound & -bound) == bound)  // i.e., bound is a power of 2\n *     return (int)((bound * (long)next(31)) >> 31);\n *\n *   int bits, val;\n *   do {\n *       bits = next(31);\n *       val = bits % bound;\n *   } while (bits - val + (bound-1) < 0);\n *   return val;\n * }}</pre>\n *\n * <p>The hedge \"approximately\" is used in the foregoing description only\n * because the next method is only approximately an unbiased source of\n * independently chosen bits.  If it were a perfect source of randomly\n * chosen bits, then the algorithm shown would choose {@code int}\n * values from the stated range with perfect uniformity.\n * <p>\n * The algorithm is slightly tricky.  It rejects values that would result\n * in an uneven distribution (due to the fact that 2^31 is not divisible\n * by n). The probability of a value being rejected depends on n.  The\n * worst case is n=2^30+1, for which the probability of a reject is 1/2,\n * and the expected number of iterations before the loop terminates is 2.\n * <p>\n * The algorithm treats the case where n is a power of two specially: it\n * returns the correct number of high-order bits from the underlying\n * pseudo-random number generator.  In the absence of special treatment,\n * the correct number of <i>low-order</i> bits would be returned.  Linear\n * congruential pseudo-random number generators such as the one\n * implemented by this class are known to have short periods in the\n * sequence of values of their low-order bits.  Thus, this special case\n * greatly increases the length of the sequence of values returned by\n * successive calls to this method if n is a small power of two.\n *\n * @param bound the upper bound (exclusive).  Must be positive.\n * @return the next pseudorandom, uniformly distributed {@code int}\n *         value between zero (inclusive) and {@code bound} (exclusive)\n *         from this random number generator's sequence\n * @throws IllegalArgumentException if bound is not positive\n * @since 1.2\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "int",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextLong",
      "parameters": [],
      "signature": "long java.util.Random.nextLong()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public long nextLong() {\r\n    // it's okay that the bottom word remains signed.\r\n    return ((long) (next(32)) << 32) + next(32);\r\n}",
      "javadoc": {
        "method": "/**\n * Returns the next pseudorandom, uniformly distributed {@code long}\n * value from this random number generator's sequence. The general\n * contract of {@code nextLong} is that one {@code long} value is\n * pseudorandomly generated and returned.\n *\n * @implSpec The method {@code nextLong} is implemented by class {@code Random}\n * as if by:\n * <pre>{@code\n * public long nextLong() {\n *   return ((long)next(32) << 32) + next(32);\n * }}</pre>\n *\n * Because class {@code Random} uses a seed with only 48 bits,\n * this algorithm will not return all possible {@code long} values.\n *\n * @return the next pseudorandom, uniformly distributed {@code long}\n *         value from this random number generator's sequence\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "long",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.<init>",
      "parameters": [],
      "signature": "void java.util.Random.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public Random() {\r\n    this(seedUniquifier() ^ System.nanoTime());\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a new random number generator. This constructor sets\n * the seed of the random number generator to a value very likely\n * to be distinct from any other invocation of this constructor.\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Random.nextBytes",
      "parameters": [
        "byte[]"
      ],
      "signature": "void java.util.Random.nextBytes(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void nextBytes(byte[] bytes) {\r\n    for (int i = 0, len = bytes.length; i < len; ) for (int rnd = nextInt(), n = Math.min(len - i, Integer.SIZE / Byte.SIZE); n-- > 0; rnd >>= Byte.SIZE) bytes[i++] = (byte) rnd;\r\n}",
      "javadoc": {
        "method": "/**\n * Generates random bytes and places them into a user-supplied\n * byte array.  The number of random bytes produced is equal to\n * the length of the byte array.\n *\n * @implSpec The method {@code nextBytes} is\n * implemented by class {@code Random} as if by:\n * <pre>{@code\n * public void nextBytes(byte[] bytes) {\n *   for (int i = 0; i < bytes.length; )\n *     for (int rnd = nextInt(), n = Math.min(bytes.length - i, 4);\n *          n-- > 0; rnd >>= 8)\n *       bytes[i++] = (byte)rnd;\n * }}</pre>\n *\n * @param  bytes the byte array to fill with random bytes\n * @throws NullPointerException if the byte array is null\n * @since  1.1\n */\n",
        "class": "/**\n * An instance of this class is used to generate a stream of\n * pseudorandom numbers; its period is only 2<sup>48</sup>.\n * The class uses a 48-bit seed, which is\n * modified using a linear congruential formula. (See Donald E. Knuth,\n * <cite>The Art of Computer Programming, Volume 2, Third\n * edition: Seminumerical Algorithms</cite>, Section 3.2.1.)\n * <p>\n * If two instances of {@code Random} are created with the same\n * seed, and the same sequence of method calls is made for each, they\n * will generate and return identical sequences of numbers. In order to\n * guarantee this property, particular algorithms are specified for the\n * class {@code Random}. Java implementations must use all the algorithms\n * shown here for the class {@code Random}, for the sake of absolute\n * portability of Java code. However, subclasses of class {@code Random}\n * are permitted to use other algorithms, so long as they adhere to the\n * general contracts for all the methods.\n * <p>\n * The algorithms implemented by class {@code Random} use a\n * {@code protected} utility method that on each invocation can supply\n * up to 32 pseudorandomly generated bits.\n * <p>\n * Many applications will find the method {@link Math#random} simpler to use.\n *\n * <p>Instances of {@code java.util.Random} are threadsafe.\n * However, the concurrent use of the same {@code java.util.Random}\n * instance across threads may encounter contention and consequent\n * poor performance. Consider instead using\n * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded\n * designs.\n *\n * <p>Instances of {@code java.util.Random} are not cryptographically\n * secure.  Consider instead using {@link java.security.SecureRandom} to\n * get a cryptographically secure pseudo-random number generator for use\n * by security-sensitive applications.\n *\n * @author  Frank Yellin\n * @since   1.0\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "java.util.Set.contains",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean java.util.Set.contains(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract boolean contains(Object o) {}",
      "javadoc": {
        "method": "/**\n * Returns {@code true} if this set contains the specified element.\n * More formally, returns {@code true} if and only if this set\n * contains an element {@code e} such that\n * {@code Objects.equals(o, e)}.\n *\n * @param o element whose presence in this set is to be tested\n * @return {@code true} if this set contains the specified element\n * @throws ClassCastException if the type of the specified element\n *         is incompatible with this set\n * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n * @throws NullPointerException if the specified element is null and this\n *         set does not permit null elements\n * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n */\n",
        "class": ""
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.doFinal",
      "parameters": [
        "byte[]"
      ],
      "signature": "byte[] javax.crypto.Cipher.doFinal(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public final byte[] doFinal(byte[] input)\n            throws IllegalBlockSizeException, BadPaddingException {\n        checkCipherState();\n\n        // Input sanity check\n        if (input == null) {\n            throw new IllegalArgumentException(\"Null input buffer\");\n        }\n\n        chooseFirstProvider();\n        return spi.engineDoFinal(input, 0, input.length);\n    }",
      "javadoc": {
        "method": "/**\n     * Encrypts or decrypts data in a single-part operation, or finishes a\n     * multiple-part operation. The data is encrypted or decrypted,\n     * depending on how this cipher was initialized.\n     *\n     * <p>The bytes in the {@code input} buffer, and any input bytes that\n     * may have been buffered during a previous {@code update} operation,\n     * are processed, with padding (if requested) being applied.\n     * If an AEAD mode such as GCM/CCM is being used, the authentication\n     * tag is appended in the case of encryption, or verified in the\n     * case of decryption.\n     * The result is stored in a new buffer.\n     *\n     * <p>Upon finishing, this method resets this cipher object to the state\n     * it was in when previously initialized via a call to {@code init}.\n     * That is, the object is reset and available to encrypt or decrypt\n     * (depending on the operation mode that was specified in the call to\n     * {@code init}) more data.\n     *\n     * <p>Note: if any exception is thrown, this cipher object may need to\n     * be reset before it can be used again.\n     *\n     * @param input the input buffer\n     *\n     * @return the new buffer with the result\n     *\n     * @exception IllegalStateException if this cipher is in a wrong state\n     * (e.g., has not been initialized)\n     * @exception IllegalBlockSizeException if this cipher is a block cipher,\n     * no padding has been requested (only in encryption mode), and the total\n     * input length of the data processed by this cipher is not a multiple of\n     * block size; or if this encryption algorithm is unable to\n     * process the input data provided.\n     * @exception BadPaddingException if this cipher is in decryption mode,\n     * and (un)padding has been requested, but the decrypted data is not\n     * bounded by the appropriate padding bytes\n     * @exception AEADBadTagException if this cipher is decrypting in an\n     * AEAD mode (such as GCM/CCM), and the received authentication tag\n     * does not match the calculated value\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.getInstance",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public static final Cipher getInstance(String transformation)\n            throws NoSuchAlgorithmException, NoSuchPaddingException\n    {\n        if ((transformation == null) || transformation.isEmpty()) {\n            throw new NoSuchAlgorithmException(\"Null or empty transformation\");\n        }\n        List<Transform> transforms = getTransforms(transformation);\n        List<ServiceId> cipherServices = new ArrayList<>(transforms.size());\n        for (Transform transform : transforms) {\n            cipherServices.add(new ServiceId(\"Cipher\", transform.transform));\n        }\n        List<Service> services = GetInstance.getServices(cipherServices);\n        // make sure there is at least one service from a signed provider\n        // and that it can use the specified mode and padding\n        Iterator<Service> t = services.iterator();\n        Exception failure = null;\n        while (t.hasNext()) {\n            Service s = t.next();\n            if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n                continue;\n            }\n            Transform tr = getTransform(s, transforms);\n            if (tr == null) {\n                // should never happen\n                continue;\n            }\n            int canuse = tr.supportsModePadding(s);\n            if (canuse == S_NO) {\n                // does not support mode or padding we need, ignore\n                continue;\n            }\n            // S_YES, S_MAYBE\n            // even when mode and padding are both supported, they\n            // may not be used together, try out and see if it works\n            try {\n                CipherSpi spi = (CipherSpi)s.newInstance(null);\n                tr.setModePadding(spi);\n                // specify null instead of spi for delayed provider selection\n                return new Cipher(null, s, t, transformation, transforms);\n            } catch (Exception e) {\n                failure = e;\n            }\n        }\n        throw new NoSuchAlgorithmException\n            (\"Cannot find any provider supporting \" + transformation, failure);\n    }",
      "javadoc": {
        "method": " /**\n     * Returns a {@code Cipher} object that implements the specified\n     * transformation.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new Cipher object encapsulating the\n     * CipherSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @apiNote\n     * It is recommended to use a transformation that fully specifies the\n     * algorithm, mode, and padding. By not doing so, the provider will\n     * use a default for the mode and padding which may not meet the security\n     * requirements of your application.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     * See also the Cipher Transformations section of the {@extLink\n     * security_guide_jdk_providers JDK Providers} document for information\n     * on the transformation defaults used by JDK providers.\n     *\n     * @param transformation the name of the transformation, e.g.,\n     * <i>AES/CBC/PKCS5Padding</i>.\n     * See the Cipher section in the <a href=\n     *   \"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard transformation names.\n     *\n     * @return a cipher that implements the requested transformation\n     *\n     * @throws NoSuchAlgorithmException if {@code transformation}\n     *         is {@code null}, empty, in an invalid format,\n     *         or if no {@code Provider} supports a {@code CipherSpi}\n     *         implementation for the specified algorithm\n     *\n     * @throws NoSuchPaddingException if {@code transformation}\n     *         contains a padding scheme that is not available\n     *\n     * @see java.security.Provider\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "javax.crypto.Cipher",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.getInstance",
      "parameters": [
        "java.lang.String",
        "java.lang.String"
      ],
      "signature": "javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": " public static final Cipher getInstance(String transformation,\n                                           String provider)\n            throws NoSuchAlgorithmException, NoSuchProviderException,\n            NoSuchPaddingException\n    {\n        if ((transformation == null) || transformation.isEmpty()) {\n            throw new NoSuchAlgorithmException(\"Null or empty transformation\");\n        }\n        if ((provider == null) || (provider.isEmpty())) {\n            throw new IllegalArgumentException(\"Missing provider\");\n        }\n        Provider p = Security.getProvider(provider);\n        if (p == null) {\n            throw new NoSuchProviderException(\"No such provider: \" +\n                                              provider);\n        }\n        return getInstance(transformation, p);\n    }",
      "javadoc": {
        "method": "/**\n     * Returns a {@code Cipher} object that implements the specified\n     * transformation.\n     *\n     * <p> A new Cipher object encapsulating the\n     * CipherSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @apiNote\n     * It is recommended to use a transformation that fully specifies the\n     * algorithm, mode, and padding. By not doing so, the provider will\n     * use a default for the mode and padding which may not meet the security\n     * requirements of your application.\n     *\n     * @implNote\n     * See the Cipher Transformations section of the {@extLink\n     * security_guide_jdk_providers JDK Providers} document for information\n     * on the transformation defaults used by JDK providers.\n     *\n     * @param transformation the name of the transformation,\n     * e.g., <i>AES/CBC/PKCS5Padding</i>.\n     * See the Cipher section in the <a href=\n     *   \"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard transformation names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a cipher that implements the requested transformation\n     *\n     * @throws IllegalArgumentException if the {@code provider}\n     *         is {@code null} or empty\n     *\n     * @throws NoSuchAlgorithmException if {@code transformation}\n     *         is {@code null}, empty, in an invalid format,\n     *         or if a {@code CipherSpi} implementation for the\n     *         specified algorithm is not available from the specified\n     *         provider\n     *\n     * @throws NoSuchPaddingException if {@code transformation}\n     *         contains a padding scheme that is not available\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @see java.security.Provider\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "javax.crypto.Cipher",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.getInstance",
      "parameters": [
        "java.lang.String",
        "java.security.Provider"
      ],
      "signature": "javax.crypto.Cipher javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public static final Cipher getInstance(String transformation,\n                                           Provider provider)\n            throws NoSuchAlgorithmException, NoSuchPaddingException\n    {\n        if ((transformation == null) || transformation.isEmpty()) {\n            throw new NoSuchAlgorithmException(\"Null or empty transformation\");\n        }\n        if (provider == null) {\n            throw new IllegalArgumentException(\"Missing provider\");\n        }\n        Exception failure = null;\n        List<Transform> transforms = getTransforms(transformation);\n        boolean providerChecked = false;\n        String paddingError = null;\n        for (Transform tr : transforms) {\n            Service s = provider.getService(\"Cipher\", tr.transform);\n            if (s == null) {\n                continue;\n            }\n            if (providerChecked == false) {\n                // for compatibility, first do the lookup and then verify\n                // the provider. this makes the difference between a NSAE\n                // and a SecurityException if the\n                // provider does not support the algorithm.\n                Exception ve = JceSecurity.getVerificationResult(provider);\n                if (ve != null) {\n                    String msg = \"JCE cannot authenticate the provider \"\n                        + provider.getName();\n                    throw new SecurityException(msg, ve);\n                }\n                providerChecked = true;\n            }\n            if (tr.supportsMode(s) == S_NO) {\n                continue;\n            }\n            if (tr.supportsPadding(s) == S_NO) {\n                paddingError = tr.pad;\n                continue;\n            }\n            try {\n                CipherSpi spi = (CipherSpi)s.newInstance(null);\n                tr.setModePadding(spi);\n                Cipher cipher = new Cipher(spi, transformation);\n                cipher.provider = s.getProvider();\n                cipher.initCryptoPermission();\n                return cipher;\n            } catch (Exception e) {\n                failure = e;\n            }\n        }\n\n        // throw NoSuchPaddingException if the problem is with padding\n        if (failure instanceof NoSuchPaddingException) {\n            throw (NoSuchPaddingException)failure;\n        }\n        if (paddingError != null) {\n            throw new NoSuchPaddingException\n                (\"Padding not supported: \" + paddingError);\n        }\n        throw new NoSuchAlgorithmException\n                (\"No such algorithm: \" + transformation, failure);\n    }",
      "javadoc": {
        "method": "/**\n     * Returns a {@code Cipher} object that implements the specified\n     * transformation.\n     *\n     * <p> A new Cipher object encapsulating the\n     * CipherSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @apiNote\n     * It is recommended to use a transformation that fully specifies the\n     * algorithm, mode, and padding. By not doing so, the provider will\n     * use a default for the mode and padding which may not meet the security\n     * requirements of your application.\n     *\n     * @implNote\n     * See the Cipher Transformations section of the {@extLink\n     * security_guide_jdk_providers JDK Providers} document for information\n     * on the transformation defaults used by JDK providers.\n     *\n     * @param transformation the name of the transformation,\n     * e.g., <i>AES/CBC/PKCS5Padding</i>.\n     * See the Cipher section in the <a href=\n     *   \"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard transformation names.\n     *\n     * @param provider the provider.\n     *\n     * @return a cipher that implements the requested transformation\n     *\n     * @throws IllegalArgumentException if the {@code provider}\n     *         is {@code null}\n     *\n     * @throws NoSuchAlgorithmException if {@code transformation}\n     *         is {@code null}, empty, in an invalid format,\n     *         or if a {@code CipherSpi} implementation for the\n     *         specified algorithm is not available from the specified\n     *         {@code Provider} object\n     *\n     * @throws NoSuchPaddingException if {@code transformation}\n     *         contains a padding scheme that is not available\n     *\n     * @see java.security.Provider\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "javax.crypto.Cipher",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.init",
      "parameters": [
        "int",
        "java.security.Key"
      ],
      "signature": "void javax.crypto.Cipher.init(int,java.security.Key)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public final void init(int opmode, Key key) throws InvalidKeyException {\n        init(opmode, key, JCAUtil.getSecureRandom());\n    }",
      "javadoc": {
        "method": "/**\n     * Initializes this cipher with a key.\n     *\n     * <p>The cipher is initialized for one of the following four operations:\n     * encryption, decryption, key wrapping or key unwrapping, depending\n     * on the value of {@code opmode}.\n     *\n     * <p>If this cipher requires any algorithm parameters that cannot be\n     * derived from the given {@code key}, the underlying cipher\n     * implementation is supposed to generate the required parameters itself\n     * (using provider-specific default or random values) if it is being\n     * initialized for encryption or key wrapping, and raise an\n     * {@code InvalidKeyException} if it is being\n     * initialized for decryption or key unwrapping.\n     * The generated parameters can be retrieved using\n     * {@link #getParameters() getParameters} or\n     * {@link #getIV() getIV} (if the parameter is an IV).\n     *\n     * <p>If this cipher requires algorithm parameters that cannot be\n     * derived from the input parameters, and there are no reasonable\n     * provider-specific default values, initialization will\n     * necessarily fail.\n     *\n     * <p>If this cipher (including its underlying feedback or padding scheme)\n     * requires any random bytes (e.g., for parameter generation), it will get\n     * them using the {@link java.security.SecureRandom}\n     * implementation of the highest-priority\n     * installed provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * <p>Note that when a Cipher object is initialized, it loses all\n     * previously-acquired state. In other words, initializing a Cipher is\n     * equivalent to creating a new instance of that Cipher and initializing\n     * it.\n     *\n     * @param opmode the operation mode of this cipher (this is one of\n     * the following:\n     * {@code ENCRYPT_MODE}, {@code DECRYPT_MODE},\n     * {@code WRAP_MODE} or {@code UNWRAP_MODE})\n     * @param key the key\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * initializing this cipher, or requires\n     * algorithm parameters that cannot be\n     * determined from the given key, or if the given key has a keysize that\n     * exceeds the maximum allowable keysize (as determined from the\n     * configured jurisdiction policy files).\n     * @throws UnsupportedOperationException if {@code opmode} is\n     * {@code WRAP_MODE} or {@code UNWRAP_MODE} but the mode is not implemented\n     * by the underlying {@code CipherSpi}.\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.Cipher.init",
      "parameters": [
        "int",
        "java.security.Key",
        "java.security.spec.AlgorithmParameterSpec"
      ],
      "signature": "void javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public final void init(int opmode, Key key, AlgorithmParameterSpec params)\n            throws InvalidKeyException, InvalidAlgorithmParameterException\n    {\n        init(opmode, key, params, JCAUtil.getSecureRandom());\n    }",
      "javadoc": {
        "method": "/**\n     * Initializes this cipher with a key and a set of algorithm\n     * parameters.\n     *\n     * <p>The cipher is initialized for one of the following four operations:\n     * encryption, decryption, key wrapping or  key unwrapping, depending\n     * on the value of {@code opmode}.\n     *\n     * <p>If this cipher requires any algorithm parameters and\n     * {@code params} is null, the underlying cipher implementation is\n     * supposed to generate the required parameters itself (using\n     * provider-specific default or random values) if it is being\n     * initialized for encryption or key wrapping, and raise an\n     * {@code InvalidAlgorithmParameterException} if it is being\n     * initialized for decryption or key unwrapping.\n     * The generated parameters can be retrieved using\n     * {@link #getParameters() getParameters} or\n     * {@link #getIV() getIV} (if the parameter is an IV).\n     *\n     * <p>If this cipher requires algorithm parameters that cannot be\n     * derived from the input parameters, and there are no reasonable\n     * provider-specific default values, initialization will\n     * necessarily fail.\n     *\n     * <p>If this cipher (including its underlying feedback or padding scheme)\n     * requires any random bytes (e.g., for parameter generation), it will get\n     * them using the {@link java.security.SecureRandom}\n     * implementation of the highest-priority\n     * installed provider as the source of randomness.\n     * (If none of the installed providers supply an implementation of\n     * SecureRandom, a system-provided source of randomness will be used.)\n     *\n     * <p>Note that when a Cipher object is initialized, it loses all\n     * previously-acquired state. In other words, initializing a Cipher is\n     * equivalent to creating a new instance of that Cipher and initializing\n     * it.\n     *\n     * @param opmode the operation mode of this cipher (this is one of the\n     * following:\n     * {@code ENCRYPT_MODE}, {@code DECRYPT_MODE},\n     * {@code WRAP_MODE} or {@code UNWRAP_MODE})\n     * @param key the encryption key\n     * @param params the algorithm parameters\n     *\n     * @exception InvalidKeyException if the given key is inappropriate for\n     * initializing this cipher, or its keysize exceeds the maximum allowable\n     * keysize (as determined from the configured jurisdiction policy files).\n     * @exception InvalidAlgorithmParameterException if the given algorithm\n     * parameters are inappropriate for this cipher,\n     * or this cipher requires\n     * algorithm parameters and {@code params} is null, or the given\n     * algorithm parameters imply a cryptographic strength that would exceed\n     * the legal limits (as determined from the configured jurisdiction\n     * policy files).\n     * @throws UnsupportedOperationException if {@code opmode} is\n     * {@code WRAP_MODE} or {@code UNWRAP_MODE} but the mode is not implemented\n     * by the underlying {@code CipherSpi}.\n     */",
        "class": "/**\n * This class provides the functionality of a cryptographic cipher for\n * encryption and decryption. It forms the core of the Java Cryptographic\n * Extension (JCE) framework.\n *\n * <p>In order to create a Cipher object, the application calls the\n * Cipher's {@code getInstance} method, and passes the name of the\n * requested <i>transformation</i> to it. Optionally, the name of a provider\n * may be specified.\n *\n * <p>A <i>transformation</i> is a string that describes the operation (or\n * set of operations) to be performed on the given input, to produce some\n * output. A transformation always includes the name of a cryptographic\n * algorithm (e.g., <i>AES</i>), and may be followed by a feedback mode and\n * padding scheme.\n *\n * <p> A transformation is of the form:\n *\n * <ul>\n * <li>\"<i>algorithm/mode/padding</i>\" or\n *\n * <li>\"<i>algorithm</i>\"\n * </ul>\n *\n * <P> (in the latter case,\n * provider-specific default values for the mode and padding scheme are used).\n * For example, the following is a valid transformation:\n *\n * <pre>\n *     Cipher c = Cipher.getInstance(\"<i>AES/CBC/PKCS5Padding</i>\");\n * </pre>\n *\n * Using modes such as {@code CFB} and {@code OFB}, block\n * ciphers can encrypt data in units smaller than the cipher's actual\n * block size.  When requesting such a mode, you may optionally specify\n * the number of bits to be processed at a time by appending this number\n * to the mode name as shown in the \"{@code AES/CFB8/NoPadding}\" and\n * \"{@code AES/OFB32/PKCS5Padding}\" transformations. If no such\n * number is specified, a provider-specific default is used.\n * (See the\n * {@extLink security_guide_jdk_providers JDK Providers Documentation}\n * for the JDK Providers default values.)\n * Thus, block ciphers can be turned into byte-oriented stream ciphers by\n * using an 8 bit mode such as CFB8 or OFB8.\n * <p>\n * Modes such as Authenticated Encryption with Associated Data (AEAD)\n * provide authenticity assurances for both confidential data and\n * Additional Associated Data (AAD) that is not encrypted.  (Please see\n * <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116 </a> for more\n * information on AEAD and AAD algorithms such as GCM/CCM.) Both\n * confidential and AAD data can be used when calculating the\n * authentication tag (similar to a {@link Mac}).  This tag is appended\n * to the ciphertext during encryption, and is verified on decryption.\n * <p>\n * AEAD modes such as GCM/CCM perform all AAD authenticity calculations\n * before starting the ciphertext authenticity calculations.  To avoid\n * implementations having to internally buffer ciphertext, all AAD data\n * must be supplied to GCM/CCM implementations (via the {@code updateAAD}\n * methods) <b>before</b> the ciphertext is processed (via\n * the {@code update} and {@code doFinal} methods).\n * <p>\n * Note that GCM mode has a uniqueness requirement on IVs used in\n * encryption with a given key. When IVs are repeated for GCM\n * encryption, such usages are subject to forgery attacks. Thus, after\n * each encryption operation using GCM mode, callers should re-initialize\n * the cipher objects with GCM parameters which have a different IV value.\n * <pre>\n *     GCMParameterSpec s = ...;\n *     cipher.init(..., s);\n *\n *     // If the GCM parameters were generated by the provider, it can\n *     // be retrieved by:\n *     // cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n *\n *     cipher.updateAAD(...);  // AAD\n *     cipher.update(...);     // Multi-part update\n *     cipher.doFinal(...);    // conclusion of operation\n *\n *     // Use a different IV value for every encryption\n *     byte[] newIv = ...;\n *     s = new GCMParameterSpec(s.getTLen(), newIv);\n *     cipher.init(..., s);\n *     ...\n *\n * </pre>\n * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n * for unique nonces with a given key.  After each encryption or decryption\n * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n * ciphers with parameters that specify a different nonce value.  Please\n * see <a href=\"https://tools.ietf.org/html/rfc7539\">RFC 7539</a> for more\n * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n * <p>\n * Every implementation of the Java platform is required to support\n * the following standard {@code Cipher} transformations with the keysizes\n * in parentheses:\n * <ul>\n * <li>{@code AES/CBC/NoPadding} (128)</li>\n * <li>{@code AES/CBC/PKCS5Padding} (128)</li>\n * <li>{@code AES/ECB/NoPadding} (128)</li>\n * <li>{@code AES/ECB/PKCS5Padding} (128)</li>\n * <li>{@code AES/GCM/NoPadding} (128)</li>\n * <li>{@code DESede/CBC/NoPadding} (168)</li>\n * <li>{@code DESede/CBC/PKCS5Padding} (168)</li>\n * <li>{@code DESede/ECB/NoPadding} (168)</li>\n * <li>{@code DESede/ECB/PKCS5Padding} (168)</li>\n * <li>{@code RSA/ECB/PKCS1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-1AndMGF1Padding} (1024, 2048)</li>\n * <li>{@code RSA/ECB/OAEPWithSHA-256AndMGF1Padding} (1024, 2048)</li>\n * </ul>\n * These transformations are described in the\n * <a href=\"{@docRoot}/../specs/security/standard-names.html#cipher-algorithm-names\">\n * Cipher section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other transformations are supported.\n *\n * @author Jan Luehe\n * @see KeyGenerator\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.KeyGenerator.getInstance",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.crypto.KeyGenerator javax.crypto.KeyGenerator.getInstance(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public static final KeyGenerator getInstance(String algorithm)\n            throws NoSuchAlgorithmException {\n        Objects.requireNonNull(algorithm, \"null algorithm name\");\n        return new KeyGenerator(algorithm);\n    }",
      "javadoc": {
        "method": "/**\n     * Returns a {@code KeyGenerator} object that generates secret keys\n     * for the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyGenerator object encapsulating the\n     * KeyGeneratorSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the standard name of the requested key algorithm.\n     * See the KeyGenerator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keygenerator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new {@code KeyGenerator} object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code KeyGeneratorSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     */",
        "class": "/**\n * This class provides the functionality of a secret (symmetric) key generator.\n *\n * <p>Key generators are constructed using one of the {@code getInstance}\n * class methods of this class.\n *\n * <p>KeyGenerator objects are reusable, i.e., after a key has been\n * generated, the same KeyGenerator object can be re-used to generate further\n * keys.\n *\n * <p>There are two ways to generate a key: in an algorithm-independent\n * manner, and in an algorithm-specific manner.\n * The only difference between the two is the initialization of the object:\n *\n * <ul>\n * <li><b>Algorithm-Independent Initialization</b>\n * <p>All key generators share the concepts of a <i>keysize</i> and a\n * <i>source of randomness</i>.\n * There is an\n * {@link #init(int, java.security.SecureRandom) init}\n * method in this KeyGenerator class that takes these two universally\n * shared types of arguments. There is also one that takes just a\n * {@code keysize} argument, and uses the SecureRandom implementation\n * of the highest-priority installed provider as the source of randomness\n * (or a system-provided source of randomness if none of the installed\n * providers supply a SecureRandom implementation), and one that takes just a\n * source of randomness.\n *\n * <p>Since no other parameters are specified when you call the above\n * algorithm-independent {@code init} methods, it is up to the\n * provider what to do about the algorithm-specific parameters (if any) to be\n * associated with each of the keys.\n *\n * <li><b>Algorithm-Specific Initialization</b>\n * <p>For situations where a set of algorithm-specific parameters already\n * exists, there are two\n * {@link #init(java.security.spec.AlgorithmParameterSpec) init}\n * methods that have an {@code AlgorithmParameterSpec}\n * argument. One also has a {@code SecureRandom} argument, while the\n * other uses the SecureRandom implementation\n * of the highest-priority installed provider as the source of randomness\n * (or a system-provided source of randomness if none of the installed\n * providers supply a SecureRandom implementation).\n * </ul>\n *\n * <p>In case the client does not explicitly initialize the KeyGenerator\n * (via a call to an {@code init} method), each provider must\n * supply (and document) a default initialization.\n * See the Keysize Restriction sections of the\n * {@extLink security_guide_jdk_providers JDK Providers}\n * document for information on the KeyGenerator defaults used by\n * JDK providers.\n * However, note that defaults may vary across different providers.\n * Additionally, the default value for a provider may change in a future\n * version. Therefore, it is recommended to explicitly initialize the\n * KeyGenerator instead of relying on provider-specific defaults.\n *\n * <p> Every implementation of the Java platform is required to support the\n * following standard {@code KeyGenerator} algorithms with the keysizes in\n * parentheses:\n * <ul>\n * <li>{@code AES} (128)</li>\n * <li>{@code DESede} (168)</li>\n * <li>{@code HmacSHA1}</li>\n * <li>{@code HmacSHA256}</li>\n * </ul>\n * These algorithms are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#keygenerator-algorithms\">\n * KeyGenerator section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * @author Jan Luehe\n *\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "javax.crypto.KeyGenerator",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.KeyGenerator.generateKey",
      "parameters": [],
      "signature": "javax.crypto.SecretKey javax.crypto.KeyGenerator.generateKey()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public final SecretKey generateKey() {\n        if (serviceIterator == null) {\n            return spi.engineGenerateKey();\n        }\n        RuntimeException failure = null;\n        KeyGeneratorSpi mySpi = spi;\n        do {\n            try {\n                return mySpi.engineGenerateKey();\n            } catch (RuntimeException e) {\n                if (failure == null) {\n                    failure = e;\n                }\n                mySpi = nextSpi(mySpi, true);\n            }\n        } while (mySpi != null);\n        throw failure;\n   }\n}",
      "javadoc": {
        "method": "/**\n     * Generates a secret key.\n     *\n     * @return the new key\n     */",
        "class": "/**\n * This class provides the functionality of a secret (symmetric) key generator.\n *\n * <p>Key generators are constructed using one of the {@code getInstance}\n * class methods of this class.\n *\n * <p>KeyGenerator objects are reusable, i.e., after a key has been\n * generated, the same KeyGenerator object can be re-used to generate further\n * keys.\n *\n * <p>There are two ways to generate a key: in an algorithm-independent\n * manner, and in an algorithm-specific manner.\n * The only difference between the two is the initialization of the object:\n *\n * <ul>\n * <li><b>Algorithm-Independent Initialization</b>\n * <p>All key generators share the concepts of a <i>keysize</i> and a\n * <i>source of randomness</i>.\n * There is an\n * {@link #init(int, java.security.SecureRandom) init}\n * method in this KeyGenerator class that takes these two universally\n * shared types of arguments. There is also one that takes just a\n * {@code keysize} argument, and uses the SecureRandom implementation\n * of the highest-priority installed provider as the source of randomness\n * (or a system-provided source of randomness if none of the installed\n * providers supply a SecureRandom implementation), and one that takes just a\n * source of randomness.\n *\n * <p>Since no other parameters are specified when you call the above\n * algorithm-independent {@code init} methods, it is up to the\n * provider what to do about the algorithm-specific parameters (if any) to be\n * associated with each of the keys.\n *\n * <li><b>Algorithm-Specific Initialization</b>\n * <p>For situations where a set of algorithm-specific parameters already\n * exists, there are two\n * {@link #init(java.security.spec.AlgorithmParameterSpec) init}\n * methods that have an {@code AlgorithmParameterSpec}\n * argument. One also has a {@code SecureRandom} argument, while the\n * other uses the SecureRandom implementation\n * of the highest-priority installed provider as the source of randomness\n * (or a system-provided source of randomness if none of the installed\n * providers supply a SecureRandom implementation).\n * </ul>\n *\n * <p>In case the client does not explicitly initialize the KeyGenerator\n * (via a call to an {@code init} method), each provider must\n * supply (and document) a default initialization.\n * See the Keysize Restriction sections of the\n * {@extLink security_guide_jdk_providers JDK Providers}\n * document for information on the KeyGenerator defaults used by\n * JDK providers.\n * However, note that defaults may vary across different providers.\n * Additionally, the default value for a provider may change in a future\n * version. Therefore, it is recommended to explicitly initialize the\n * KeyGenerator instead of relying on provider-specific defaults.\n *\n * <p> Every implementation of the Java platform is required to support the\n * following standard {@code KeyGenerator} algorithms with the keysizes in\n * parentheses:\n * <ul>\n * <li>{@code AES} (128)</li>\n * <li>{@code DESede} (168)</li>\n * <li>{@code HmacSHA1}</li>\n * <li>{@code HmacSHA256}</li>\n * </ul>\n * These algorithms are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#keygenerator-algorithms\">\n * KeyGenerator section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * @author Jan Luehe\n *\n * @see SecretKey\n * @since 1.4\n */"
      },"return": "javax.crypto.SecretKey",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.spec.GCMParameterSpec.<init>",
      "parameters": [
        "int",
        "byte[]"
      ],
      "signature": "void javax.crypto.spec.GCMParameterSpec.<init>(int,byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public GCMParameterSpec(int tLen, byte[] src) {\n        if (src == null) {\n            throw new IllegalArgumentException(\"src array is null\");\n        }\n\n        init(tLen, src, 0, src.length);\n    }",
      "javadoc": {
        "method": " /**\n     * Constructs a GCMParameterSpec using the specified authentication\n     * tag bit-length and IV buffer.\n     *\n     * @param tLen the authentication tag length (in bits)\n     * @param src the IV source buffer.  The contents of the buffer are\n     * copied to protect against subsequent modification.\n     *\n     * @throws IllegalArgumentException if {@code tLen} is negative,\n     * or {@code src} is null.\n     */",
        "class": "/**\n * Specifies the set of parameters required by a {@link\n * javax.crypto.Cipher} using the Galois/Counter Mode (GCM) mode.\n * <p>\n * Simple block cipher modes (such as CBC) generally require only an\n * initialization vector (such as {@code IvParameterSpec}),\n * but GCM needs these parameters:\n * <ul>\n * <li>{@code IV}: Initialization Vector (IV) </li>\n * <li>{@code tLen}: length (in bits) of authentication tag T</li>\n * </ul>\n * <p>\n * In addition to the parameters described here, other GCM inputs/output\n * (Additional Authenticated Data (AAD), Keys, block ciphers,\n * plain/ciphertext and authentication tags) are handled in the {@code\n * Cipher} class.\n * <p>\n * Please see <a href=\"http://www.ietf.org/rfc/rfc5116.txt\"> RFC 5116\n * </a> for more information on the Authenticated Encryption with\n * Associated Data (AEAD) algorithm, and <a href=\n * \"http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf\">\n * NIST Special Publication 800-38D</a>, \"NIST Recommendation for Block\n * Cipher Modes of Operation:  Galois/Counter Mode (GCM) and GMAC.\"\n * <p>\n * The GCM specification states that {@code tLen} may only have the\n * values {128, 120, 112, 104, 96}, or {64, 32} for certain\n * applications.  Other values can be specified for this class, but not\n * all CSP implementations will support them.\n *\n * @see javax.crypto.Cipher\n *\n * @since 1.7\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.crypto.spec.IvParameterSpec.<init>",
      "parameters": [
        "byte[]"
      ],
      "signature": "void javax.crypto.spec.IvParameterSpec.<init>(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
        "CWE327"
      ],
      "known": false,
      "body": "public IvParameterSpec(byte[] iv) {\n        this(iv, 0, iv.length);\n    }",
      "javadoc": {
        "method": "/**\n     * Creates an IvParameterSpec object using the bytes in <code>iv</code>\n     * as the IV.\n     *\n     * @param iv the buffer with the IV. The contents of the\n     * buffer are copied to protect against subsequent modification.\n     * @throws NullPointerException if <code>iv</code> is <code>null</code>\n     */",
        "class": "/**\n * This class specifies an <i>initialization vector</i> (IV).\n * Examples which use IVs are ciphers in feedback mode,\n * e.g., DES in CBC mode and RSA ciphers with OAEP encoding\n * operation.\n *\n * @author Jan Luehe\n *\n * @since 1.4\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.Attribute.get",
      "parameters": [],
      "signature": "java.lang.Object javax.naming.directory.Attribute.get()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract Object get() throws NamingException {}",
      "javadoc": {
        "method": "/**\n * Retrieves one of this attribute's values.\n * If the attribute has more than one value and is unordered, any one of\n * the values is returned.\n * If the attribute has more than one value and is ordered, the\n * first value is returned.\n *\n * @return A possibly null object representing one of\n *        the attribute's value. It is null if the attribute's value\n *        is null.\n * @exception NamingException\n *         If a naming exception was encountered while retrieving\n *         the value.\n * @exception java.util.NoSuchElementException\n *         If this attribute has no values.\n */\n",
        "class": "/**\n * This interface represents an attribute associated with a named object.\n *<p>\n * In a directory, named objects can have associated with them\n * attributes.  The {@code Attribute} interface represents an attribute associated\n * with a named object.  An attribute contains 0 or more, possibly null, values.\n * The attribute values can be ordered or unordered (see {@code isOrdered()}).\n * If the values are unordered, no duplicates are allowed.\n * If the values are ordered, duplicates are allowed.\n *<p>\n * The content and representation of an attribute and its values is defined by\n * the attribute's <em>schema</em>. The schema contains information\n * about the attribute's syntax and other properties about the attribute.\n * See {@code getAttributeDefinition()} and\n * {@code getAttributeSyntaxDefinition()}\n * for details regarding how to get schema information about an attribute\n * if the underlying directory service supports schemas.\n *<p>\n * Equality of two attributes is determined by the implementation class.\n * A simple implementation can use {@code Object.equals()} to determine equality\n * of attribute values, while a more sophisticated implementation might\n * make use of schema information to determine equality.\n * Similarly, one implementation might provide a static storage\n * structure which simply returns the values passed to its\n * constructor, while another implementation might define {@code get()} and\n * {@code getAll()}.\n * to get the values dynamically from the directory.\n *<p>\n * Note that updates to {@code Attribute} (such as adding or removing a\n * value) do not affect the corresponding representation of the attribute\n * in the directory.  Updates to the directory can only be effected\n * using operations in the {@code DirContext} interface.\n *\n * @author Rosanna Lee\n * @author Scott Seligman\n *\n * @see BasicAttribute\n * @since 1.3\n */\n"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.Attributes.get",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.naming.directory.Attribute javax.naming.directory.Attributes.get(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract Attribute get(String attrID) {}",
      "javadoc": {
        "method": "/**\n * Retrieves the attribute with the given attribute id from the\n * attribute set.\n *\n * @param attrID The non-null id of the attribute to retrieve.\n *           If this attribute set ignores the character\n *           case of its attribute ids, the case of attrID\n *           is ignored.\n * @return The attribute identified by attrID; null if not found.\n * @see #put\n * @see #remove\n */\n",
        "class": ""
      },"return": "javax.naming.directory.Attribute",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.SearchControls.<init>",
      "parameters": [],
      "signature": "void javax.naming.directory.SearchControls.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public SearchControls() {\r\n    searchScope = ONELEVEL_SCOPE;\r\n    // no limit\r\n    timeLimit = 0;\r\n    // no limit\r\n    countLimit = 0;\r\n    derefLink = false;\r\n    returnObj = false;\r\n    // return all\r\n    attributesToReturn = null;\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a search constraints using defaults.\n *<p>\n * The defaults are:\n * <ul>\n * <li>search one level\n * <li>no maximum return limit for search results\n * <li>no time limit for search\n * <li>return all attributes associated with objects that satisfy\n *   the search filter.\n * <li>do not return named object  (return only name and class)\n * <li>do not dereference links during search\n *</ul>\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.SearchControls.setSearchScope",
      "parameters": [
        "int"
      ],
      "signature": "void javax.naming.directory.SearchControls.setSearchScope(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void setSearchScope(int scope) {\r\n    searchScope = scope;\r\n}",
      "javadoc": {
        "method": "/**\n * Sets the search scope to one of:\n * OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE.\n * @param scope     The search scope of this SearchControls.\n * @see #getSearchScope\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.directory.SearchResult.getAttributes",
      "parameters": [],
      "signature": "javax.naming.directory.Attributes javax.naming.directory.SearchResult.getAttributes()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public Attributes getAttributes() {\r\n    return attrs;\r\n}",
      "javadoc": {
        "method": "/**\n * Retrieves the attributes in this search result.\n *\n * @return The non-null attributes in this search result. Can be empty.\n * @see #setAttributes\n */\n",
        "class": ""
      },"return": "javax.naming.directory.Attributes",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.NamingEnumeration.hasMore",
      "parameters": [],
      "signature": "boolean javax.naming.NamingEnumeration.hasMore()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract boolean hasMore() throws NamingException {}",
      "javadoc": {
        "method": "/**\n * Determines whether there are any more elements in the enumeration.\n * This method allows naming exceptions encountered while\n * determining whether there are more elements to be caught and handled\n * by the application.\n *\n * @return         true if there is more in the enumeration ; false otherwise.\n * @throws NamingException\n *                 If a naming exception is encountered while attempting\n *                 to determine whether there is another element\n *                 in the enumeration. See NamingException\n *                 and its subclasses for the possible naming exceptions.\n * @see java.util.Enumeration#hasMoreElements\n */\n",
        "class": "/**\n * This interface is for enumerating lists returned by\n * methods in the javax.naming and javax.naming.directory packages.\n * It extends Enumeration to allow as exceptions to be thrown during\n * the enumeration.\n *<p>\n * When a method such as list(), listBindings(), or search() returns\n * a NamingEnumeration, any exceptions encountered are reserved until\n * all results have been returned. At the end of the enumeration, the\n * exception is thrown (by hasMore());\n * <p>\n * For example, if the list() is\n * returning only a partial answer, the corresponding exception would\n * be PartialResultException. list() would first return a NamingEnumeration.\n * When the last of the results has been returned by the NamingEnumeration's\n * next(), invoking hasMore() would result in PartialResultException being thrown.\n *<p>\n * In another example, if a search() method was invoked with a specified\n * size limit of 'n'. If the answer consists of more than 'n' results,\n * search() would first return a NamingEnumeration.\n * When the n'th result has been returned by invoking next() on the\n * NamingEnumeration, a SizeLimitExceedException would then thrown when\n * hasMore() is invoked.\n *<p>\n * Note that if the program uses hasMoreElements() and nextElement() instead\n * to iterate through the NamingEnumeration, because these methods\n * cannot throw exceptions, no exception will be thrown. Instead,\n * in the previous example, after the n'th result has been returned by\n * nextElement(), invoking hasMoreElements() would return false.\n *<p>\n * Note also that NoSuchElementException is thrown if the program invokes\n * next() or nextElement() when there are no elements left in the enumeration.\n * The program can always avoid this exception by using hasMore() and\n * hasMoreElements() to check whether the end of the enumeration has been reached.\n *<p>\n * If an exception is thrown during an enumeration,\n * the enumeration becomes invalid.\n * Subsequent invocation of any method on that enumeration\n * will yield undefined results.\n *\n * @author Rosanna Lee\n * @author Scott Seligman\n *\n * @see Context#list\n * @see Context#listBindings\n * @see javax.naming.directory.DirContext#search\n * @see javax.naming.directory.Attributes#getAll\n * @see javax.naming.directory.Attributes#getIDs\n * @see javax.naming.directory.Attribute#getAll\n * @since 1.3\n */\n"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.naming.NamingEnumeration.next",
      "parameters": [],
      "signature": "java.lang.Object javax.naming.NamingEnumeration.next()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public T next() throws NamingException;",
      "javadoc": {
        "method": "/**\n      * Retrieves the next element in the enumeration.\n      * This method allows naming exceptions encountered while\n      * retrieving the next element to be caught and handled\n      * by the application.\n      * <p>\n      * Note that {@code next()} can also throw the runtime exception\n      * NoSuchElementException to indicate that the caller is\n      * attempting to enumerate beyond the end of the enumeration.\n      * This is different from a NamingException, which indicates\n      * that there was a problem in obtaining the next element,\n      * for example, due to a referral or server unavailability, etc.\n      *\n      * @return         The possibly null element in the enumeration.\n      *     null is only valid for enumerations that can return\n      *     null (e.g. Attribute.getAll() returns an enumeration of\n      *     attribute values, and an attribute value can be null).\n      * @throws NamingException If a naming exception is encountered while attempting\n      *                 to retrieve the next element. See NamingException\n      *                 and its subclasses for the possible naming exceptions.\n      * @throws java.util.NoSuchElementException If attempting to get the next element when none is available.\n      * @see java.util.Enumeration#nextElement\n      */",
        "class": "/**\n  * This interface is for enumerating lists returned by\n  * methods in the javax.naming and javax.naming.directory packages.\n  * It extends Enumeration to allow as exceptions to be thrown during\n  * the enumeration.\n  *<p>\n  * When a method such as list(), listBindings(), or search() returns\n  * a NamingEnumeration, any exceptions encountered are reserved until\n  * all results have been returned. At the end of the enumeration, the\n  * exception is thrown (by hasMore());\n  * <p>\n  * For example, if the list() is\n  * returning only a partial answer, the corresponding exception would\n  * be PartialResultException. list() would first return a NamingEnumeration.\n  * When the last of the results has been returned by the NamingEnumeration's\n  * next(), invoking hasMore() would result in PartialResultException being thrown.\n  *<p>\n  * In another example, if a search() method was invoked with a specified\n  * size limit of 'n'. If the answer consists of more than 'n' results,\n  * search() would first return a NamingEnumeration.\n  * When the n'th result has been returned by invoking next() on the\n  * NamingEnumeration, a SizeLimitExceedException would then thrown when\n  * hasMore() is invoked.\n  *<p>\n  * Note that if the program uses hasMoreElements() and nextElement() instead\n  * to iterate through the NamingEnumeration, because these methods\n  * cannot throw exceptions, no exception will be thrown. Instead,\n  * in the previous example, after the n'th result has been returned by\n  * nextElement(), invoking hasMoreElements() would return false.\n  *<p>\n  * Note also that NoSuchElementException is thrown if the program invokes\n  * next() or nextElement() when there are no elements left in the enumeration.\n  * The program can always avoid this exception by using hasMore() and\n  * hasMoreElements() to check whether the end of the enumeration has been reached.\n  *<p>\n  * If an exception is thrown during an enumeration,\n  * the enumeration becomes invalid.\n  * Subsequent invocation of any method on that enumeration\n  * will yield undefined results.\n  *\n  * @author Rosanna Lee\n  * @author Scott Seligman\n  *\n  * @see Context#list\n  * @see Context#listBindings\n  * @see javax.naming.directory.DirContext#search\n  * @see javax.naming.directory.Attributes#getAll\n  * @see javax.naming.directory.Attributes#getIDs\n  * @see javax.naming.directory.Attribute#getAll\n  * @since 1.3\n  */"
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setHttpOnly",
      "parameters": [
        "boolean"
      ],
      "signature": "void javax.servlet.http.Cookie.setHttpOnly(boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void setHttpOnly(boolean isHttpOnly) {\r\n    this.isHttpOnly = isHttpOnly;\r\n}",
      "javadoc": {
        "method": "/**\n * Marks or unmarks this Cookie as <i>HttpOnly</i>.\n *\n * <p>If <tt>isHttpOnly</tt> is set to <tt>true</tt>, this cookie is\n * marked as <i>HttpOnly</i>, by adding the <tt>HttpOnly</tt> attribute\n * to it.\n *\n * <p><i>HttpOnly</i> cookies are not supposed to be exposed to\n * client-side scripting code, and may therefore help mitigate certain\n * kinds of cross-site scripting attacks.\n *\n * @param isHttpOnly true if this cookie is to be marked as\n * <i>HttpOnly</i>, false otherwise\n *\n * @since Servlet 3.0\n */\n",
        "class": "/**\n *\n * Creates a cookie, a small amount of information sent by a servlet to\n * a Web browser, saved by the browser, and later sent back to the server.\n * A cookie's value can uniquely\n * identify a client, so cookies are commonly used for session management.\n *\n * <p>A cookie has a name, a single value, and optional attributes\n * such as a comment, path and domain qualifiers, a maximum age, and a\n * version number. Some Web browsers have bugs in how they handle the\n * optional attributes, so use them sparingly to improve the interoperability\n * of your servlets.\n *\n * <p>The servlet sends cookies to the browser by using the\n * {@link HttpServletResponse#addCookie} method, which adds\n * fields to HTTP response headers to send cookies to the\n * browser, one at a time. The browser is expected to\n * support 20 cookies for each Web server, 300 cookies total, and\n * may limit cookie size to 4 KB each.\n *\n * <p>The browser returns cookies to the servlet by adding\n * fields to HTTP request headers. Cookies can be retrieved\n * from a request by using the {@link HttpServletRequest#getCookies} method.\n * Several cookies might have the same name but different path attributes.\n *\n * <p>Cookies affect the caching of the Web pages that use them.\n * HTTP 1.0 does not cache pages that use cookies created with\n * this class. This class does not support the cache control\n * defined with HTTP 1.1.\n *\n * <p>This class supports both the Version 0 (by Netscape) and Version 1\n * (by RFC 2109) cookie specifications. By default, cookies are\n * created using Version 0 to ensure the best interoperability.\n *\n * @author\tVarious\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setMaxAge",
      "parameters": [
        "int"
      ],
      "signature": "void javax.servlet.http.Cookie.setMaxAge(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void setMaxAge(int expiry) {\r\n    maxAge = expiry;\r\n}",
      "javadoc": {
        "method": "/**\n * Sets the maximum age in seconds for this Cookie.\n *\n * <p>A positive value indicates that the cookie will expire\n * after that many seconds have passed. Note that the value is\n * the <i>maximum</i> age when the cookie will expire, not the cookie's\n * current age.\n *\n * <p>A negative value means\n * that the cookie is not stored persistently and will be deleted\n * when the Web browser exits. A zero value causes the cookie\n * to be deleted.\n *\n * @param expiry\t\tan integer specifying the maximum age of the\n * \t\t\t\tcookie in seconds; if negative, means\n *\t\t\t\tthe cookie is not stored; if zero, deletes\n *\t\t\t\tthe cookie\n *\n * @see #getMaxAge\n */\n",
        "class": "/**\n *\n * Creates a cookie, a small amount of information sent by a servlet to\n * a Web browser, saved by the browser, and later sent back to the server.\n * A cookie's value can uniquely\n * identify a client, so cookies are commonly used for session management.\n *\n * <p>A cookie has a name, a single value, and optional attributes\n * such as a comment, path and domain qualifiers, a maximum age, and a\n * version number. Some Web browsers have bugs in how they handle the\n * optional attributes, so use them sparingly to improve the interoperability\n * of your servlets.\n *\n * <p>The servlet sends cookies to the browser by using the\n * {@link HttpServletResponse#addCookie} method, which adds\n * fields to HTTP response headers to send cookies to the\n * browser, one at a time. The browser is expected to\n * support 20 cookies for each Web server, 300 cookies total, and\n * may limit cookie size to 4 KB each.\n *\n * <p>The browser returns cookies to the servlet by adding\n * fields to HTTP request headers. Cookies can be retrieved\n * from a request by using the {@link HttpServletRequest#getCookies} method.\n * Several cookies might have the same name but different path attributes.\n *\n * <p>Cookies affect the caching of the Web pages that use them.\n * HTTP 1.0 does not cache pages that use cookies created with\n * this class. This class does not support the cache control\n * defined with HTTP 1.1.\n *\n * <p>This class supports both the Version 0 (by Netscape) and Version 1\n * (by RFC 2109) cookie specifications. By default, cookies are\n * created using Version 0 to ensure the best interoperability.\n *\n * @author\tVarious\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.Cookie.setSecure",
      "parameters": [
        "boolean"
      ],
      "signature": "void javax.servlet.http.Cookie.setSecure(boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void setSecure(boolean flag) {\r\n    secure = flag;\r\n}",
      "javadoc": {
        "method": "/**\n * Indicates to the browser whether the cookie should only be sent\n * using a secure protocol, such as HTTPS or SSL.\n *\n * <p>The default value is <code>false</code>.\n *\n * @param flag if <code>true</code>, sends the cookie from the browser\n * to the server only when using a secure protocol; if <code>false</code>,\n * sent on any protocol\n *\n * @see #getSecure\n */\n",
        "class": "/**\n *\n * Creates a cookie, a small amount of information sent by a servlet to\n * a Web browser, saved by the browser, and later sent back to the server.\n * A cookie's value can uniquely\n * identify a client, so cookies are commonly used for session management.\n *\n * <p>A cookie has a name, a single value, and optional attributes\n * such as a comment, path and domain qualifiers, a maximum age, and a\n * version number. Some Web browsers have bugs in how they handle the\n * optional attributes, so use them sparingly to improve the interoperability\n * of your servlets.\n *\n * <p>The servlet sends cookies to the browser by using the\n * {@link HttpServletResponse#addCookie} method, which adds\n * fields to HTTP response headers to send cookies to the\n * browser, one at a time. The browser is expected to\n * support 20 cookies for each Web server, 300 cookies total, and\n * may limit cookie size to 4 KB each.\n *\n * <p>The browser returns cookies to the servlet by adding\n * fields to HTTP request headers. Cookies can be retrieved\n * from a request by using the {@link HttpServletRequest#getCookies} method.\n * Several cookies might have the same name but different path attributes.\n *\n * <p>Cookies affect the caching of the Web pages that use them.\n * HTTP 1.0 does not cache pages that use cookies created with\n * this class. This class does not support the cache control\n * defined with HTTP 1.1.\n *\n * <p>This class supports both the Version 0 (by Netscape) and Version 1\n * (by RFC 2109) cookie specifications. By default, cookies are\n * created using Version 0 to ensure the best interoperability.\n *\n * @author\tVarious\n */\n"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getSession",
      "parameters": [],
      "signature": "javax.servlet.http.HttpSession javax.servlet.http.HttpServletRequest.getSession()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract HttpSession getSession() {}",
      "javadoc": {
        "method": "/**\n * Returns the current session associated with this request,\n * or if the request does not have a session, creates one.\n *\n * @return\t\tthe <code>HttpSession</code> associated\n *\t\t\twith this request\n *\n * @see\t#getSession(boolean)\n */\n",
        "class": ""
      },"return": "javax.servlet.http.HttpSession",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.getWriter",
      "parameters": [],
      "signature": "java.io.PrintWriter javax.servlet.http.HttpServletResponse.getWriter()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public PrintWriter getWriter() throws IOException;",
      "javadoc": {
        "method": "/**\n     * Returns a <code>PrintWriter</code> object that\n     * can send character text to the client.\n     * The <code>PrintWriter</code> uses the character\n     * encoding returned by {@link #getCharacterEncoding}.\n     * If the response's character encoding has not been\n     * specified as described in <code>getCharacterEncoding</code>\n     * (i.e., the method just returns the default value \n     * <code>ISO-8859-1</code>), <code>getWriter</code>\n     * updates it to <code>ISO-8859-1</code>.\n     * <p>Calling flush() on the <code>PrintWriter</code>\n     * commits the response.\n     * <p>Either this method or {@link #getOutputStream} may be called\n     * to write the body, not both, except when {@link #reset}\n     * has been called.\n     * \n     * @return a <code>PrintWriter</code> object that \n     * can return character data to the client \n     *\n     * @exception java.io.UnsupportedEncodingException\n     * if the character encoding returned\n     * by <code>getCharacterEncoding</code> cannot be used\n     *\n     * @exception IllegalStateException\n     * if the <code>getOutputStream</code>\n     * method has already been called for this response object\n     *\n     * @exception IOException\n     * if an input or output exception occurred\n     *\n     * @see #getOutputStream\n     * @see #setCharacterEncoding\n     * @see #reset\n     */",
        "class": "/**\n *\n * Extends the {@link ServletResponse} interface to provide HTTP-specific\n * functionality in sending a response.  For example, it has methods\n * to access HTTP headers and cookies.\n *\n * <p>The servlet container creates an <code>HttpServletResponse</code> object\n * and passes it as an argument to the servlet's service methods\n * (<code>doGet</code>, <code>doPost</code>, etc).\n *\n * \n * @author\tVarious\n *\n * @see\t\tjavax.servlet.ServletResponse\n *\n */"
      },"return": "java.io.PrintWriter",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.addCookie",
      "parameters": [
        "javax.servlet.http.Cookie"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.addCookie(javax.servlet.http.Cookie)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract void addCookie(Cookie cookie) {}",
      "javadoc": {
        "method": "/**\n * Adds the specified cookie to the response.  This method can be called\n * multiple times to set more than one cookie.\n *\n * @param cookie the Cookie to return to the client\n *\n */\n",
        "class": "/**\n *\n * Extends the {@link ServletResponse} interface to provide HTTP-specific\n * functionality in sending a response.  For example, it has methods\n * to access HTTP headers and cookies.\n *\n * <p>The servlet container creates an <code>HttpServletResponse</code> object\n * and passes it as an argument to the servlet's service methods\n * (<code>doGet</code>, <code>doPost</code>, etc).\n *\n *\n * @author\tVarious\n *\n * @see\t\tjavax.servlet.ServletResponse\n *\n */\n"
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpServletResponse.setContentType",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void javax.servlet.http.HttpServletResponse.setContentType(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public void setContentType(String type);",
      "javadoc": {
        "method": "/**\n     * Sets the content type of the response being sent to\n     * the client, if the response has not been committed yet.\n     * The given content type may include a character encoding\n     * specification, for example, <code>text/html;charset=UTF-8</code>.\n     * The response's character encoding is only set from the given\n     * content type if this method is called before <code>getWriter</code>\n     * is called.\n     * <p>This method may be called repeatedly to change content type and\n     * character encoding.\n     * This method has no effect if called after the response\n     * has been committed. It does not set the response's character\n     * encoding if it is called after <code>getWriter</code>\n     * has been called or after the response has been committed.\n     * <p>Containers must communicate the content type and the character\n     * encoding used for the servlet response's writer to the client if\n     * the protocol provides a way for doing so. In the case of HTTP,\n     * the <code>Content-Type</code> header is used.\n     *\n     * @param type a <code>String</code> specifying the MIME \n     * type of the content\n     *\n     * @see #setLocale\n     * @see #setCharacterEncoding\n     * @see #getOutputStream\n     * @see #getWriter\n     *\n     */",
        "class": "/**\n *\n * Extends the {@link ServletResponse} interface to provide HTTP-specific\n * functionality in sending a response.  For example, it has methods\n * to access HTTP headers and cookies.\n *\n * <p>The servlet container creates an <code>HttpServletResponse</code> object\n * and passes it as an argument to the servlet's service methods\n * (<code>doGet</code>, <code>doPost</code>, etc).\n *\n * \n * @author\tVarious\n *\n * @see\t\tjavax.servlet.ServletResponse\n *\n */"
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.http.HttpSession.getAttribute",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.Object javax.servlet.http.HttpSession.getAttribute(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract Object getAttribute(String name) {}",
      "javadoc": {
        "method": "/**\n * Returns the object bound with the specified name in this session, or\n * <code>null</code> if no object is bound under the name.\n *\n * @param name\t\ta string specifying the name of the object\n *\n * @return\t\t\tthe object with the specified name\n *\n * @exception IllegalStateException\tif this method is called on an\n *\t\t\t\t\tinvalidated session\n */\n",
        "class": ""
      },"return": "java.lang.Object",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.RequestDispatcher.include",
      "parameters": [
        "javax.servlet.ServletRequest",
        "javax.servlet.ServletResponse"
      ],
      "signature": "void javax.servlet.RequestDispatcher.include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract void include(ServletRequest request, ServletResponse response) throws ServletException, IOException {}",
      "javadoc": {
        "method": "/**\n *\n * Includes the content of a resource (servlet, JSP page,\n * HTML file) in the response. In essence, this method enables\n * programmatic server-side includes.\n *\n * <p>The {@link ServletResponse} object has its path elements\n * and parameters remain unchanged from the caller's. The included\n * servlet cannot change the response status code or set headers;\n * any attempt to make a change is ignored.\n *\n * <p>The request and response parameters must be either the same\n * objects as were passed to the calling servlet's service method or be\n * subclasses of the {@link ServletRequestWrapper} or\n * {@link ServletResponseWrapper} classes that wrap them.\n *\n * <p>This method sets the dispatcher type of the given request to\n * <code>DispatcherType.INCLUDE</code>.\n *\n * @param request a {@link ServletRequest} object that contains the\n * client's request\n *\n * @param response a {@link ServletResponse} object that contains the\n * servlet's response\n *\n * @throws ServletException if the included resource throws this\n * exception\n *\n * @throws IOException if the included resource throws this exception\n *\n * @see ServletRequest#getDispatcherType\n */\n",
        "class": ""
      },"return": "void",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.servlet.ServletException.<init>",
      "parameters": [
        "java.lang.Throwable"
      ],
      "signature": "void javax.servlet.ServletException.<init>(java.lang.Throwable)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public ServletException(Throwable rootCause) {\r\n    super(rootCause);\r\n    this.rootCause = rootCause;\r\n}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.parsers.DocumentBuilder.parse",
      "parameters": [
        "java.io.InputStream"
      ],
      "signature": "org.w3c.dom.Document javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public Document parse(InputStream is) throws SAXException, IOException {\r\n    if (is == null) {\r\n        throw new IllegalArgumentException(\"InputStream cannot be null\");\r\n    }\r\n    InputSource in = new InputSource(is);\r\n    return parse(in);\r\n}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "org.w3c.dom.Document",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder",
      "parameters": [],
      "signature": "javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {}",
      "javadoc": {
        "method": "",
        "class": ""
      },"return": "javax.xml.parsers.DocumentBuilder",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.parsers.DocumentBuilderFactory.newInstance",
      "parameters": [],
      "signature": "javax.xml.parsers.DocumentBuilderFactory javax.xml.parsers.DocumentBuilderFactory.newInstance()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static DocumentBuilderFactory newInstance() {\r\n    return FactoryFinder.find(/* The default property name according to the JAXP spec */\r\n    // \"javax.xml.parsers.DocumentBuilderFactory\"\r\n    DocumentBuilderFactory.class, /* The fallback implementation class name */\r\n    DEFAULT_IMPL);\r\n}",
      "javadoc": {
        "method": "/**\n * Obtains a new instance of a {@code DocumentBuilderFactory}.\n * This method uses the\n * <a href=\"../../../module-summary.html#LookupMechanism\">JAXP Lookup Mechanism</a>\n * to determine the {@code DocumentBuilderFactory} implementation class to load.\n *\n * <p>\n * Once an application has obtained a reference to a\n * {@code DocumentBuilderFactory}, it can use the factory to\n * configure and obtain parser instances.\n *\n *\n * <h4>Tip for Trouble-shooting</h4>\n * <p>\n * Setting the {@code jaxp.debug} system property will cause\n * this method to print a lot of debug messages\n * to {@code System.err} about what it is doing and where it is looking at.\n *\n * <p>\n * If you have problems loading {@link DocumentBuilder}s, try:\n * <pre>\n * java -Djaxp.debug=1 YourProgram ....\n * </pre>\n *\n * @return New instance of a {@code DocumentBuilderFactory}\n *\n * @throws FactoryConfigurationError in case of {@linkplain\n * java.util.ServiceConfigurationError service configuration error} or if\n * the implementation is not available or cannot be instantiated.\n */\n",
        "class": ""
      },"return": "javax.xml.parsers.DocumentBuilderFactory",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.parsers.DocumentBuilderFactory.setFeature",
      "parameters": [
        "java.lang.String",
        "boolean"
      ],
      "signature": "void javax.xml.parsers.DocumentBuilderFactory.setFeature(java.lang.String,boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract void setFeature(String name, boolean value) throws ParserConfigurationException {}",
      "javadoc": {
        "method": "/**\n * Set a feature for this {@code DocumentBuilderFactory}\n * and {@code DocumentBuilder}s created by this factory.\n *\n * <p>\n * Feature names are fully qualified {@link java.net.URI}s.\n * Implementations may define their own features.\n * A {@link ParserConfigurationException} is thrown if this {@code DocumentBuilderFactory} or the\n * {@code DocumentBuilder}s it creates cannot support the feature.\n * It is possible for a {@code DocumentBuilderFactory} to expose a feature value but be unable to change its state.\n *\n *\n * <p>\n * All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.\n * When the feature is:\n * <ul>\n *   <li>\n *     {@code true}: the implementation will limit XML processing to conform to implementation limits.\n *     Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.\n *     If XML processing is limited for security reasons, it will be reported via a call to the registered\n *    {@link org.xml.sax.ErrorHandler#fatalError(SAXParseException exception)}.\n *     See {@link  DocumentBuilder#setErrorHandler(org.xml.sax.ErrorHandler errorHandler)}.\n *   </li>\n *   <li>\n *     {@code false}: the implementation will processing XML according to the XML specifications without\n *     regard to possible implementation limits.\n *   </li>\n * </ul>\n *\n * @param name Feature name.\n * @param value Is feature state {@code true} or {@code false}.\n *\n * @throws ParserConfigurationException if this {@code DocumentBuilderFactory} or the {@code DocumentBuilder}s\n *   it creates cannot support this feature.\n * @throws NullPointerException If the {@code name} parameter is null.\n * @since 1.5\n */\n",
        "class": ""
      },"return": "void",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPathFactory.newXPath",
      "parameters": [],
      "signature": "javax.xml.xpath.XPath javax.xml.xpath.XPathFactory.newXPath()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract XPath newXPath() {}",
      "javadoc": {
        "method": "/**\n * <p>Return a new <code>XPath</code> using the underlying object\n * model determined when the {@code XPathFactory} was instantiated.</p>\n *\n * @return New instance of an <code>XPath</code>.\n */\n",
        "class": "/**\n * <p>An {@code XPathFactory} instance can be used to create\n * {@link javax.xml.xpath.XPath} objects.</p>\n *\n *<p>See {@link #newInstance(String uri)} for lookup mechanism.</p>\n *\n * <p>The {@link XPathFactory} class is not thread-safe. In other words,\n * it is the application's responsibility to ensure that at most\n * one thread is using a {@link XPathFactory} object at any\n * given moment. Implementations are encouraged to mark methods\n * as <code>synchronized</code> to protect themselves from broken clients.\n *\n * <p>{@link XPathFactory} is not re-entrant. While one of the\n * <code>newInstance</code> methods is being invoked, applications\n * may not attempt to recursively invoke a <code>newInstance</code> method,\n * even from the same thread.\n *\n * @author  Norman Walsh\n * @author  Jeff Suttor\n *\n * @since 1.5\n */\n"
      },"return": "javax.xml.xpath.XPath",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "javax.xml.xpath.XPathFactory.newInstance",
      "parameters": [],
      "signature": "javax.xml.xpath.XPathFactory javax.xml.xpath.XPathFactory.newInstance()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static XPathFactory newInstance() {\r\n    try {\r\n        return newInstance(DEFAULT_OBJECT_MODEL_URI);\r\n    } catch (XPathFactoryConfigurationException e) {\r\n        throw new RuntimeException(\"XPathFactory#newInstance() failed to create an XPathFactory for the default object model: \" + DEFAULT_OBJECT_MODEL_URI + \" with the XPathFactoryConfigurationException: \" + e.getMessage(), e);\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * <p>Get a new {@code XPathFactory} instance using the default object model,\n * {@link #DEFAULT_OBJECT_MODEL_URI},\n * the W3C DOM.</p>\n *\n * <p>This method is functionally equivalent to:</p>\n * <pre>\n *   newInstance(DEFAULT_OBJECT_MODEL_URI)\n * </pre>\n *\n * <p>Since the implementation for the W3C DOM is always available, this method will never fail.</p>\n *\n * @return Instance of an {@code XPathFactory}.\n *\n * @throws RuntimeException When there is a failure in creating an\n *   {@code XPathFactory} for the default object model.\n */\n",
        "class": "/**\n * <p>An {@code XPathFactory} instance can be used to create\n * {@link javax.xml.xpath.XPath} objects.</p>\n *\n *<p>See {@link #newInstance(String uri)} for lookup mechanism.</p>\n *\n * <p>The {@link XPathFactory} class is not thread-safe. In other words,\n * it is the application's responsibility to ensure that at most\n * one thread is using a {@link XPathFactory} object at any\n * given moment. Implementations are encouraged to mark methods\n * as <code>synchronized</code> to protect themselves from broken clients.\n *\n * <p>{@link XPathFactory} is not re-entrant. While one of the\n * <code>newInstance</code> methods is being invoked, applications\n * may not attempt to recursively invoke a <code>newInstance</code> method,\n * even from the same thread.\n *\n * @author  Norman Walsh\n * @author  Jeff Suttor\n *\n * @since 1.5\n */\n"
      },"return": "javax.xml.xpath.XPathFactory",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.binary.Base64.decodeBase64",
      "parameters": [
        "byte[]"
      ],
      "signature": "byte[] org.apache.commons.codec.binary.Base64.decodeBase64(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static byte[] decodeBase64(final byte[] base64Data) {\r\n    return new Base64().decode(base64Data);\r\n}",
      "javadoc": {
        "method": "/**\n * Decodes Base64 data into octets.\n * <p>\n * <b>Note:</b> this method seamlessly handles data encoded in URL-safe or normal mode.\n * </p>\n *\n * @param base64Data\n *            Byte array containing Base64 data\n * @return Array containing decoded data.\n */\n",
        "class": "/**\n * Provides Base64 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n *\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * <p>\n * The URL-safe parameter is only applied to encode operations. Decoding seamlessly handles both modes.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only\n * encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,\n * UTF-8, etc).\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.0\n */\n"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.codec.binary.Base64.encodeBase64",
      "parameters": [
        "byte[]"
      ],
      "signature": "byte[] org.apache.commons.codec.binary.Base64.encodeBase64(byte[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static byte[] encodeBase64(final byte[] binaryData) {\r\n    return encodeBase64(binaryData, false);\r\n}",
      "javadoc": {
        "method": "/**\n * Encodes binary data using the base64 algorithm but does not chunk the output.\n *\n * @param binaryData\n *            binary data to encode\n * @return byte[] containing Base64 characters in their UTF-8 representation.\n */\n",
        "class": "/**\n * Provides Base64 encoding and decoding as defined by <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>.\n *\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * </p>\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * <p>\n * The URL-safe parameter is only applied to encode operations. Decoding seamlessly handles both modes.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only\n * encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252,\n * UTF-8, etc).\n * </p>\n * <p>\n * This class is thread-safe.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.0\n */\n"
      },"return": "byte[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.apache.commons.lang.StringEscapeUtils.escapeHtml",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.apache.commons.lang.StringEscapeUtils.escapeHtml(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public static String escapeHtml(String str) {\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        StringWriter writer = new StringWriter((int) (str.length() * 1.5));\r\n        escapeHtml(writer, str);\r\n        return writer.toString();\r\n    } catch (IOException ioe) {\r\n        //should be impossible\r\n        throw new UnhandledException(ioe);\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n *\n * <p>\n * For example:\n * </p>\n * <p><code>\"bread\" & \"butter\"</code></p>\n * becomes:\n * <p>\n * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n * </p>\n *\n * <p>Supports all known HTML 4.0 entities, including funky accents.\n * Note that the commonly used apostrophe escape character (&amp;apos;)\n * is not a legal entity and so is not supported). </p>\n *\n * @param str  the <code>String</code> to escape, may be null\n * @return a new escaped <code>String</code>, <code>null</code> if null string input\n *\n * @see #unescapeHtml(String)\n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n */\n",
        "class": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * <p>#ThreadSafe#</p>\n * @author Apache Software Foundation\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id: StringEscapeUtils.java 1057072 2011-01-10 01:55:57Z niallp $\n */\n"
      },"return": "java.lang.String",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.owasp.esapi.Encoder.encodeForBase64",
      "parameters": [
        "byte[]",
        "boolean"
      ],
      "signature": "java.lang.String org.owasp.esapi.Encoder.encodeForBase64(byte[],boolean)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract String encodeForBase64(byte[] input, boolean wrap) {}",
      "javadoc": {
        "method": "/**\n * Encode for Base64.\n *\n * @param input\n *      the text to encode for Base64\n * @param wrap\n *      the encoder will wrap lines every 64 characters of output\n *\n * @return input encoded for Base64\n */\n",
        "class": "/**\n * The {@code Encoder} interface contains a number of methods for decoding input and encoding output\n * so that it will be safe for a variety of interpreters. Its primary use is to\n * provide <i>output</i> encoding to prevent XSS.\n * <p>\n * To prevent double-encoding, callers should make sure input does not already contain encoded characters\n * by calling one of the {@code canonicalize()} methods. Validator implementations should call\n * {@code canonicalize()} on user input <b>before</b> validating to prevent encoded attacks.\n * </p><p>\n * All of the methods <b>must</b> use an \"allow list\" or \"positive\" security model rather\n * than a \"deny list\" or \"negative\" security model.  For the encoding methods, this means that\n * all characters should be encoded, except for a specific list of \"immune\" characters that are\n * known to be safe.\n * </p><p>\n * The {@code Encoder} performs two key functions, encoding (also referred to as \"escaping\" in this Javadoc)\n * and decoding. These functions rely on a set of codecs that can be found in the\n * {@code org.owasp.esapi.codecs} package. These include:\n * <ul>\n * <li>CSS Escaping</li>\n * <li>HTMLEntity Encoding</li>\n * <li>JavaScript Escaping</li>\n * <li>MySQL Database Escaping</li>\n * <li>Oracle Database Escaping</li>\n * <li>JSON Escaping</li>\n * <li>Percent Encoding (aka URL Encoding)</li>\n * <li>Unix Shell Escaping</li>\n * <li>VBScript Escaping</li>\n * <li>Windows Cmd Escaping</li>\n * <li>LDAP Escaping</li>\n * <li>XML and XML Attribute Encoding</li>\n * <li>XPath Escaping</li>\n * <li>Base64 Encoding</li>\n * </ul>\n * </p><p>\n * The primary use of ESAPI {@code Encoder} is to prevent XSS vulnerabilities by\n * providing output encoding using the various \"encodeFor<i>XYZ</i>()\" methods,\n * where <i>XYZ</i> is one of CSS, HTML, HTMLAttribute, JavaScript, or URL. When\n * using the ESAPI output encoders, it is important that you use the one for the\n * <b>appropriate context</b> where the output will be rendered. For example, it\n * the output appears in an JavaScript context, you should use {@code encodeForJavaScript}\n * (note this includes all of the DOM JavaScript event handler attributes such as\n * 'onfocus', 'onclick', 'onload', etc.). If the output would be rendered in an HTML\n * attribute context (with the exception of the aforementioned 'onevent' type event\n * handler attributes), you would use {@code encodeForHTMLAttribute}. If you are\n * encoding anywhere a URL is expected (e.g., a 'href' attribute for for &lt;a&gt; or\n * a 'src' attribute on a &lt;img&gt; tag, etc.), then you should use use {@code encodeForURL}.\n * If encoding CSS, then use {@code encodeForCSS}. Etc. This is because there are\n * different escaping requirements for these different contexts. Developers who are\n * new to ESAPI or to defending against XSS vulnerabilities are highly encouraged to\n * <i>first</i> read the\n * <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener noreferreer\">\n * OWASP Cross-Site Scripting Prevention Cheat Sheet</a>.\n * </p><p>\n * Note that in addition to these encoder methods, ESAPI also provides a JSP Tag\n * Library ({@code META-INF/esapi.tld}) in the ESAPI jar. This allows one to use\n * the more convenient JSP tags in JSPs. These JSP tags are simply wrappers for the\n * various these \"encodeForX<i>XYZ</i>()\" method docmented in this {@code Encoder}\n * interface.\n * </p><p>\n * <b>Some important final words:</b>\n * <ul>\n * <li><b>Where to output encode for HTML rendering:</b>\n * Knowing <i>where</i> to place the output encoding in your code\n * is just as important as knowing which context (HTML, HTML attribute, CSS,\n * JavaScript, or URL) to use for the output encoding and surprisingly the two\n * are often related. In general, output encoding should be done just prior to the\n * output being rendered (that is, as close to the 'sink' as possible) because that\n * is what determines what the appropriate context is for the output encoding.\n * In fact, doing output encoding on untrusted data that is stored and to\n * be used later--whether stored in an HTTP session or in a database--is almost\n * always considered an anti-pattern. An example of this is one gathers and\n * stores some untrusted data item such as an email address from a user. A\n * developer thinks \"let's output encode this and store the encoded data in\n * the database, thus making the untrusted data safe to use all the time, thus\n * saving all of us developers all the encoding troubles later on\". On the surface,\n * that sounds like a reasonable approach. The problem is how to know what\n * output encoding to use, not only for now, but for all possible <i>future</i>\n * uses? It might be that the current application code base is only using it in\n * an HTML context that is displayed in an HTML report or shown in an HTML\n * context in the user's profile. But what if it is later used in a {@code mailto:} URL?\n * Then instead of HTML encoding, it would need to have URL encoding. Similarly,\n * what if there is a later switch made to use AJAX and the untrusted email\n * address gets used in a JavaScript context? The complication is that even if\n * you know with certainty today all the ways that an untrusted data item is\n * used in your application, it is generally impossible to predict all the\n * contexts that it may be used in the future, not only in your application, but\n * in other applications that could access that data in the database.\n * </li>\n * <li><b>Avoiding multiple <i>nested</i> contexts:</b>\n * A really tricky situation to get correct is when there are multiple nested\n * encoding contexts. But far, the most common place this seems to come up is\n * untrusted URLs used in JavaScript. How should you handle that? Well,\n * the best way is to rewrite your code to avoid it!  An example of\n * this that is well worth reading may be found at\n * <a href=\"https://lists.owasp.org/pipermail/esapi-dev/2012-March/002090\"\n * target=\"_blank\" rel=\"noopener noreferrer\">ESAPI-DEV mailing list archives:\n * URL encoding within JavaScript</a>. Be sure to read the entire thread.\n * The question itself is too nuanced to be answered in Javadoc, but now,\n * hopefully you are at least aware of the potential pitfalls. There is little\n * available research or examples on how to do output encoding when multiple\n * mixed encodings are required, although one that you may find useful is\n * <a href=\"https://arxiv.org/pdf/1804.01862.pdf\" target=\"_blank\"\n * rel=\"noopener noreferrer\">\n * Automated Detecting and Repair of Cross-SiteScripting Vulnerabilities through Unit Testing</a>\n * It at least discusses a few of the common errors involved in multiple mixed\n * encoding contexts.\n * </li><li><b>A word about unit testing:</b>\n * Unit testing this is hard. You may be satisfied with stopped after you have\n * tested against the ubiquitous XSS test case of\n * <pre>\n *      &lt;/script&gt;alert(1)&lt;/script&gt;\n * </pre>\n * or similar simplistic XSS attack payloads and if that is properly encoded\n * (or, you don't see an alert box popped in your browser), you consider it\n * \"problem fixed\", and consider the unit testing sufficient. Unfortunately, that\n * minimalist testing may not always detect places where you used the wrong output\n * encoder. You need to do better. Fortunately, the aforementioned link,\n * <a href=\"https://arxiv.org/pdf/1804.01862.pdf\" target=\"_blank\"\n * rel=\"noopener noreferrer\">\n * Automated Detecting and Repair of Cross-SiteScripting Vulnerabilities through Unit Testing</a>\n * provides some insight on this. You may also wish to look at the\n * <a href=\"https://github.com/ESAPI/esapi-java-legacy/blob/develop/src/test/java/org/owasp/esapi/reference/EncoderTest.java\"\n * target=\"_blank\" rel=\"noopener noreferrer\">ESAPI Encoder JUnittest cases</a> for ideas.\n * If you are really ambitious, an excellent resource for XSS attack patterns is\n * <a href=\"https://beefproject.com/\" target=\"_blank\" rel=\"noopener noreferrer\">BeEF - The Browser Exploitation Framework Project</a>.\n * </li>\n * </ul>\n *\n * @see <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">OWASP Cross-Site Scripting Prevention Cheat Sheet</a>\n * @see <a href=\"https://owasp.org/www-project-proactive-controls/v3/en/c4-encode-escape-data\">OWASP Proactive Controls: C4: Encode and Escape Data</a>\n * @see <a href=\"https://www.onwebsecurity.com/security/properly-encoding-and-escaping-for-the-web.html\" target=\"_blank\" rel=\"noopener noreferrer\">Properly encoding and escaping for the web</a>\n * @author Jeff Williams (jeff.williams .at. owasp.org)\n * @since June 1, 2007\n */\n"
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.batchUpdate",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "int[] org.springframework.jdbc.core.JdbcTemplate.batchUpdate(java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": "public int[] batchUpdate(final String... sql) throws DataAccessException {\n\t\tAssert.notEmpty(sql, \"SQL array must not be empty\");\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Executing SQL batch update of \" + sql.length + \" statements\");\n\t\t}\n\n\t\t/**\n\t\t * Callback to execute the batch update.\n\t\t */\n\t\tclass BatchUpdateStatementCallback implements StatementCallback<int[]>, SqlProvider {\n\n\t\t\t@Nullable\n\t\t\tprivate String currSql;\n\n\t\t\t@Override\n\t\t\tpublic int[] doInStatement(Statement stmt) throws SQLException, DataAccessException {\n\t\t\t\tint[] rowsAffected = new int[sql.length];\n\t\t\t\tif (JdbcUtils.supportsBatchUpdates(stmt.getConnection())) {\n\t\t\t\t\tfor (String sqlStmt : sql) {\n\t\t\t\t\t\tthis.currSql = appendSql(this.currSql, sqlStmt);\n\t\t\t\t\t\tstmt.addBatch(sqlStmt);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\trowsAffected = stmt.executeBatch();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (BatchUpdateException ex) {\n\t\t\t\t\t\tString batchExceptionSql = null;\n\t\t\t\t\t\tfor (int i = 0; i < ex.getUpdateCounts().length; i++) {\n\t\t\t\t\t\t\tif (ex.getUpdateCounts()[i] == Statement.EXECUTE_FAILED) {\n\t\t\t\t\t\t\t\tbatchExceptionSql = appendSql(batchExceptionSql, sql[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (StringUtils.hasLength(batchExceptionSql)) {\n\t\t\t\t\t\t\tthis.currSql = batchExceptionSql;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (int i = 0; i < sql.length; i++) {\n\t\t\t\t\t\tthis.currSql = sql[i];\n\t\t\t\t\t\tif (!stmt.execute(sql[i])) {\n\t\t\t\t\t\t\trowsAffected[i] = stmt.getUpdateCount();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Invalid batch SQL statement: \" + sql[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn rowsAffected;\n\t\t\t}\n\n\t\t\tprivate String appendSql(@Nullable String sql, String statement) {\n\t\t\t\treturn (StringUtils.hasLength(sql) ? sql + \"; \" + statement : statement);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\t@Nullable\n\t\t\tpublic String getSql() {\n\t\t\t\treturn this.currSql;\n\t\t\t}\n\t\t}\n\n\t\tint[] result = execute(new BatchUpdateStatementCallback(), true);\n\t\tAssert.state(result != null, \"No update counts\");\n\t\treturn result;\n\t}",
      "javadoc": {
        "method": "/**\n\t * Issue multiple SQL updates on a single JDBC Statement using batching.\n\t * <p>Will fall back to separate updates on a single Statement if the JDBC\n\t * driver does not support batch updates.\n\t * @param sql defining an array of SQL statements that will be executed.\n\t * @return an array of the number of rows affected by each statement\n\t * @throws DataAccessException if there is any problem executing the batch\n\t */",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */"
      },"return": "int[]",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.queryForObject",
      "parameters": [
        "java.lang.String",
        "java.lang.Class"
      ],
      "signature": "java.lang.Object org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String,java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source",
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": "public <T> T queryForObject(String sql, Class<T> requiredType) throws DataAccessException {\n\t\treturn queryForObject(sql, getSingleColumnRowMapper(requiredType));\n\t}",
      "javadoc": {
        "method": "/**\n\t * Query given SQL to create a prepared statement from SQL and a list of\n\t * arguments to bind to the query, expecting a result object.\n\t * <p>The query is expected to be a single row/single column query; the returned\n\t * result will be directly mapped to the corresponding object type.\n\t * @param sql the SQL query to execute\n\t * @param requiredType the type that the result object is expected to match\n\t * @param args arguments to bind to the query\n\t * (leaving it to the PreparedStatement to guess the corresponding SQL type);\n\t * may also contain {@link SqlParameterValue} objects which indicate not\n\t * only the argument value but also the SQL type and optionally the scale\n\t * @return the result object of the required type, or {@code null} in case of SQL NULL\n\t * @throws org.springframework.dao.IncorrectResultSizeDataAccessException\n\t * if the query does not return exactly one row\n\t * @throws org.springframework.jdbc.IncorrectResultSetColumnCountException\n\t * if the query does not return a row containing a single column\n\t * @throws DataAccessException if the query fails\n\t * @since 3.0.1\n\t * @see #queryForObject(java.lang.String, Class)\n\t */",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */"
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.queryForObject",
      "parameters": [
        "java.lang.String",
        "java.lang.Object[]",
        "java.lang.Class"
      ],
      "signature": "java.lang.Object org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String,java.lang.Object[],java.lang.Class)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source",
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": "public <T> T queryForObject(String sql, @Nullable Object[] args, Class<T> requiredType) throws DataAccessException {\n\t\treturn queryForObject(sql, args, getSingleColumnRowMapper(requiredType));\n\t}",
      "javadoc": {
        "method": "/**\n\t * Query given SQL to create a prepared statement from SQL and a list of\n\t * arguments to bind to the query, expecting a result object.\n\t * <p>The query is expected to be a single row/single column query; the returned\n\t * result will be directly mapped to the corresponding object type.\n\t * @param sql the SQL query to execute\n\t * @param args arguments to bind to the query\n\t * (leaving it to the PreparedStatement to guess the corresponding SQL type);\n\t * may also contain {@link SqlParameterValue} objects which indicate not\n\t * only the argument value but also the SQL type and optionally the scale\n\t * @param requiredType the type that the result object is expected to match\n\t * @return the result object of the required type, or {@code null} in case of SQL NULL\n\t * @throws org.springframework.dao.IncorrectResultSizeDataAccessException\n\t * if the query does not return exactly one row\n\t * @throws org.springframework.jdbc.IncorrectResultSetColumnCountException\n\t * if the query does not return a row containing a single column\n\t * @throws DataAccessException if the query fails\n\t * @see #queryForObject(java.lang.String, Class)\n\t * @deprecated as of 5.3, in favor of {@link #queryForObject(java.lang.String, Class, Object...)}\n\t */",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */"
      },"return": "java.lang.Object",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.query",
      "parameters": [
        "java.lang.String",
        "org.springframework.jdbc.core.RowMapper"
      ],
      "signature": "java.util.List org.springframework.jdbc.core.JdbcTemplate.query(java.lang.String,org.springframework.jdbc.core.RowMapper)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public List<T> query(String sql, RowMapper<T> rowMapper) throws DataAccessException {\r\n    return result(query(sql, new RowMapperResultSetExtractor<>(rowMapper)));\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */\n"
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.queryForList",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.List org.springframework.jdbc.core.JdbcTemplate.queryForList(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public List<Map<String, Object>> queryForList(String sql) throws DataAccessException {\r\n    return query(sql, getColumnMapRowMapper());\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */\n"
      },"return": "java.util.List",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.queryForMap",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.util.Map org.springframework.jdbc.core.JdbcTemplate.queryForMap(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public Map<String, Object> queryForMap(String sql) throws DataAccessException {\r\n    return result(queryForObject(sql, getColumnMapRowMapper()));\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */\n"
      },"return": "java.util.Map",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.core.JdbcTemplate.queryForRowSet",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "org.springframework.jdbc.support.rowset.SqlRowSet org.springframework.jdbc.core.JdbcTemplate.queryForRowSet(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public SqlRowSet queryForRowSet(String sql) throws DataAccessException {\r\n    return result(query(sql, new SqlRowSetResultSetExtractor()));\r\n}",
      "javadoc": {
        "method": "",
        "class": "/**\n * <b>This is the central class in the JDBC core package.</b>\n * It simplifies the use of JDBC and helps to avoid common errors.\n * It executes core JDBC workflow, leaving application code to provide SQL\n * and extract results. This class executes SQL queries or updates, initiating\n * iteration over ResultSets and catching JDBC exceptions and translating\n * them to the generic, more informative exception hierarchy defined in the\n * {@code org.springframework.dao} package.\n *\n * <p>Code using this class need only implement callback interfaces, giving\n * them a clearly defined contract. The {@link PreparedStatementCreator} callback\n * interface creates a prepared statement given a Connection, providing SQL and\n * any necessary parameters. The {@link ResultSetExtractor} interface extracts\n * values from a ResultSet. See also {@link PreparedStatementSetter} and\n * {@link RowMapper} for two popular alternative callback interfaces.\n *\n * <p>Can be used within a service implementation via direct instantiation\n * with a DataSource reference, or get prepared in an application context\n * and given to services as bean reference. Note: The DataSource should\n * always be configured as a bean in the application context, in the first case\n * given to the service directly, in the second case to the prepared template.\n *\n * <p>Because this class is parameterizable by the callback interfaces and\n * the {@link org.springframework.jdbc.support.SQLExceptionTranslator}\n * interface, there should be no need to subclass it.\n *\n * <p>All SQL operations performed by this class are logged at debug level,\n * using \"org.springframework.jdbc.core.JdbcTemplate\" as log category.\n *\n * <p><b>NOTE: An instance of this class is thread-safe once configured.</b>\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n * @author Thomas Risberg\n * @since May 3, 2001\n * @see PreparedStatementCreator\n * @see PreparedStatementSetter\n * @see CallableStatementCreator\n * @see PreparedStatementCallback\n * @see CallableStatementCallback\n * @see ResultSetExtractor\n * @see RowCallbackHandler\n * @see RowMapper\n * @see org.springframework.jdbc.support.SQLExceptionTranslator\n */\n"
      },"return": "org.springframework.jdbc.support.rowset.SqlRowSet",
      "interface": false,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.support.rowset.SqlRowSet.next",
      "parameters": [],
      "signature": "boolean org.springframework.jdbc.support.rowset.SqlRowSet.next()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract boolean next() throws InvalidResultSetAccessException {}",
      "javadoc": {
        "method": "/**\n * Move the cursor to the next row.\n * @return {@code true} if the new row is valid, {@code false} if there are no more rows\n * @see java.sql.ResultSet#next()\n */\n",
        "class": "/**\n * Mirror interface for {@link javax.sql.RowSet}, representing a disconnected variant of\n * {@link java.sql.ResultSet} data.\n *\n * <p>The main difference to the standard JDBC RowSet is that a {@link java.sql.SQLException}\n * is never thrown here. This allows an SqlRowSet to be used without having to deal with\n * checked exceptions. An SqlRowSet will throw Spring's {@link InvalidResultSetAccessException}\n * instead (when appropriate).\n *\n * <p>Note: This interface extends the {@code java.io.Serializable} marker interface.\n * Implementations, which typically hold disconnected data, are encouraged to be actually\n * serializable (as far as possible).\n *\n * @author Thomas Risberg\n * @author Juergen Hoeller\n * @since 1.2\n * @see javax.sql.RowSet\n * @see java.sql.ResultSet\n * @see org.springframework.jdbc.InvalidResultSetAccessException\n * @see org.springframework.jdbc.core.JdbcTemplate#queryForRowSet\n */\n"
      },"return": "boolean",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.springframework.jdbc.support.rowset.SqlRowSet.getString",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.springframework.jdbc.support.rowset.SqlRowSet.getString(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": " abstract String getString(String columnLabel) throws InvalidResultSetAccessException {}",
      "javadoc": {
        "method": "/**\n * Retrieve the value of the indicated column in the current row as a String.\n * @param columnLabel the column label\n * @return a String representing the column value\n * @see java.sql.ResultSet#getString(String)\n */\n",
        "class": "/**\n * Mirror interface for {@link javax.sql.RowSet}, representing a disconnected variant of\n * {@link java.sql.ResultSet} data.\n *\n * <p>The main difference to the standard JDBC RowSet is that a {@link java.sql.SQLException}\n * is never thrown here. This allows an SqlRowSet to be used without having to deal with\n * checked exceptions. An SqlRowSet will throw Spring's {@link InvalidResultSetAccessException}\n * instead (when appropriate).\n *\n * <p>Note: This interface extends the {@code java.io.Serializable} marker interface.\n * Implementations, which typically hold disconnected data, are encouraged to be actually\n * serializable (as far as possible).\n *\n * @author Thomas Risberg\n * @author Juergen Hoeller\n * @since 1.2\n * @see javax.sql.RowSet\n * @see java.sql.ResultSet\n * @see org.springframework.jdbc.InvalidResultSetAccessException\n * @see org.springframework.jdbc.core.JdbcTemplate#queryForRowSet\n */\n"
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.w3c.dom.Node.getTextContent",
      "parameters": [],
      "signature": "java.lang.String org.w3c.dom.Node.getTextContent()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract String getTextContent() throws DOMException {}",
      "javadoc": {
        "method": "/**\n * This attribute returns the text content of this node and its\n * descendants. When it is defined to be <code>null</code>, setting it\n * has no effect. On setting, any possible children this node may have\n * are removed and, if it the new string is not empty or\n * <code>null</code>, replaced by a single <code>Text</code> node\n * containing the string this attribute is set to.\n * <br> On getting, no serialization is performed, the returned string\n * does not contain any markup. No whitespace normalization is performed\n * and the returned string does not contain the white spaces in element\n * content (see the attribute\n * <code>Text.isElementContentWhitespace</code>). Similarly, on setting,\n * no parsing is performed either, the input string is taken as pure\n * textual content.\n * <br>The string returned is made of the text content of this node\n * depending on its type, as defined below:\n * <table class=\"striped\">\n * <caption style=\"display:none\">Node/Content table</caption>\n * <thead>\n * <tr>\n * <th scope=\"col\">Node type</th>\n * <th scope=\"col\">Content</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr>\n * <th scope=\"row\">\n * ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,\n * DOCUMENT_FRAGMENT_NODE</th>\n * <td>concatenation of the <code>textContent</code>\n * attribute value of every child node, excluding COMMENT_NODE and\n * PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the\n * node has no children.</td>\n * </tr>\n * <tr>\n * <th scope=\"row\">TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,\n * PROCESSING_INSTRUCTION_NODE</th>\n * <td><code>nodeValue</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\">DOCUMENT_NODE,\n * DOCUMENT_TYPE_NODE, NOTATION_NODE</th>\n * <td><em>null</em></td>\n * </tr>\n * </tbody>\n * </table>\n * @exception DOMException\n *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n *   fit in a <code>DOMString</code> variable on the implementation\n *   platform.\n *\n * @since 1.5, DOM Level 3\n */\n",
        "class": "/**\n * The <code>Node</code> interface is the primary datatype for the entire\n * Document Object Model. It represents a single node in the document tree.\n * While all objects implementing the <code>Node</code> interface expose\n * methods for dealing with children, not all objects implementing the\n * <code>Node</code> interface may have children. For example,\n * <code>Text</code> nodes may not have children, and adding children to\n * such nodes results in a <code>DOMException</code> being raised.\n * <p>The attributes <code>nodeName</code>, <code>nodeValue</code> and\n * <code>attributes</code> are included as a mechanism to get at node\n * information without casting down to the specific derived interface. In\n * cases where there is no obvious mapping of these attributes for a\n * specific <code>nodeType</code> (e.g., <code>nodeValue</code> for an\n * <code>Element</code> or <code>attributes</code> for a <code>Comment</code>\n * ), this returns <code>null</code>. Note that the specialized interfaces\n * may contain additional and more convenient mechanisms to get and set the\n * relevant information.\n * <p>The values of <code>nodeName</code>,\n * <code>nodeValue</code>, and <code>attributes</code> vary according to the\n * node type as follows:\n * <table class=\"striped\">\n * <caption style=\"display:none\">Interface table</caption>\n * <thead>\n * <tr>\n * <th scope=\"col\">Interface</th>\n * <th scope=\"col\">nodeName</th>\n * <th scope=\"col\">nodeValue</th>\n * <th scope=\"col\">attributes</th>\n * </tr>\n * </thead>\n * <tbody>\n * <tr>\n * <th scope=\"row\">\n * <code>Attr</code></th>\n * <td>same as <code>Attr.name</code></td>\n * <td>same as\n * <code>Attr.value</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>CDATASection</code></th>\n * <td>\n * <code>\"#cdata-section\"</code></td>\n * <td>same as <code>CharacterData.data</code>, the\n * content of the CDATA Section</td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>Comment</code></th>\n * <td>\n * <code>\"#comment\"</code></td>\n * <td>same as <code>CharacterData.data</code>, the\n * content of the comment</td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>Document</code></th>\n * <td>\n * <code>\"#document\"</code></td>\n * <td><code>null</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\">\n * <code>DocumentFragment</code></th>\n * <td><code>\"#document-fragment\"</code></td>\n * <td>\n * <code>null</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>DocumentType</code></th>\n * <td>same as\n * <code>DocumentType.name</code></td>\n * <td><code>null</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\">\n * <code>Element</code></th>\n * <td>same as <code>Element.tagName</code></td>\n * <td><code>null</code></td>\n * <td>\n * <code>NamedNodeMap</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>Entity</code></th>\n * <td>entity name</td>\n * <td><code>null</code></td>\n * <td>\n * <code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>EntityReference</code></th>\n * <td>name of entity referenced</td>\n * <td>\n * <code>null</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>Notation</code></th>\n * <td>notation name</td>\n * <td>\n * <code>null</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>ProcessingInstruction</code></th>\n * <td>same\n * as <code>ProcessingInstruction.target</code></td>\n * <td>same as\n * <code>ProcessingInstruction.data</code></td>\n * <td><code>null</code></td>\n * </tr>\n * <tr>\n * <th scope=\"row\"><code>Text</code></th>\n * <td>\n * <code>\"#text\"</code></td>\n * <td>same as <code>CharacterData.data</code>, the content\n * of the text node</td>\n * <td><code>null</code></td>\n * </tr>\n * </tbody>\n * </table>\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n */\n"
      },"return": "java.lang.String",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.w3c.dom.NodeList.getLength",
      "parameters": [],
      "signature": "int org.w3c.dom.NodeList.getLength()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract int getLength() {}",
      "javadoc": {
        "method": "/**\n * The number of nodes in the list. The range of valid child node indices\n * is 0 to <code>length-1</code> inclusive.\n */\n",
        "class": "/**\n * The <code>NodeList</code> interface provides the abstraction of an ordered\n * collection of nodes, without defining or constraining how this collection\n * is implemented. <code>NodeList</code> objects in the DOM are live.\n * <p>The items in the <code>NodeList</code> are accessible via an integral\n * index, starting from 0.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n */\n"
      },"return": "int",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },
    {
      "name": "org.w3c.dom.NodeList.item",
      "parameters": [
        "int"
      ],
      "signature": "org.w3c.dom.Node org.w3c.dom.NodeList.item(int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [],
      "cwe": [],
      "known": false,
      "body": "public abstract Node item(int index) {}",
      "javadoc": {
        "method": "/**\n * Returns the <code>index</code>th item in the collection. If\n * <code>index</code> is greater than or equal to the number of nodes in\n * the list, this returns <code>null</code>.\n * @param index Index into the collection.\n * @return The node at the <code>index</code>th position in the\n *   <code>NodeList</code>, or <code>null</code> if that is not a valid\n *   index.\n */\n",
        "class": "/**\n * The <code>NodeList</code> interface provides the abstraction of an ordered\n * collection of nodes, without defining or constraining how this collection\n * is implemented. <code>NodeList</code> objects in the DOM are live.\n * <p>The items in the <code>NodeList</code> are accessible via an integral\n * index, starting from 0.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n */\n"
      },"return": "org.w3c.dom.Node",
      "interface": true,
      "artifacts": {
        "identifier": "",
        "sources": "",
        "compiled": ""
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ]
    },









    {
      "name": "java.io.FileInputStream.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.io.FileInputStream.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": false,
      "body": "public FileInputStream(String name) throws FileNotFoundException {\r\n    this(name != null ? new File(name) : null);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a {@code FileInputStream} by\n * opening a connection to an actual file,\n * the file named by the path name {@code name}\n * in the file system.  A new {@code FileDescriptor}\n * object is created to represent this file\n * connection.\n * <p>\n * First, if there is a security\n * manager, its {@code checkRead} method\n * is called with the {@code name} argument\n * as its argument.\n * <p>\n * If the named file does not exist, is a directory rather than a regular\n * file, or for some other reason cannot be opened for reading then a\n * {@code FileNotFoundException} is thrown.\n *\n * @param      name   the system-dependent file name.\n * @throws     FileNotFoundException  if the file does not exist,\n *             is a directory rather than a regular file,\n *             or for some other reason cannot be opened for\n *             reading.\n * @throws     SecurityException      if a security manager exists and its\n *             {@code checkRead} method denies read access\n *             to the file.\n * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n */\n",
        "class": "/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.io.FileInputStream.<init>",
      "parameters": [
        "java.io.File"
      ],
      "signature": "void java.io.FileInputStream.<init>(java.io.File)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE35"
      ],
      "known": false,
      "body": "public FileInputStream(File file) throws FileNotFoundException {\r\n    String name = (file != null ? file.getPath() : null);\r\n    @SuppressWarnings(\"removal\")\r\n    SecurityManager security = System.getSecurityManager();\r\n    if (security != null) {\r\n        security.checkRead(name);\r\n    }\r\n    if (name == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (file.isInvalid()) {\r\n        throw new FileNotFoundException(\"Invalid file path\");\r\n    }\r\n    fd = new FileDescriptor();\r\n    fd.attach(this);\r\n    path = name;\r\n    open(name);\r\n    // open set the fd, register the cleanup\r\n    FileCleanable.register(fd);\r\n}",
      "javadoc": {
        "method": "/**\n * Creates a {@code FileInputStream} by\n * opening a connection to an actual file,\n * the file named by the {@code File}\n * object {@code file} in the file system.\n * A new {@code FileDescriptor} object\n * is created to represent this file connection.\n * <p>\n * First, if there is a security manager,\n * its {@code checkRead} method  is called\n * with the path represented by the {@code file}\n * argument as its argument.\n * <p>\n * If the named file does not exist, is a directory rather than a regular\n * file, or for some other reason cannot be opened for reading then a\n * {@code FileNotFoundException} is thrown.\n *\n * @param      file   the file to be opened for reading.\n * @throws     FileNotFoundException  if the file does not exist,\n *             is a directory rather than a regular file,\n *             or for some other reason cannot be opened for\n *             reading.\n * @throws     SecurityException      if a security manager exists and its\n *             {@code checkRead} method denies read access to the file.\n * @see        java.io.File#getPath()\n * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n */\n",
        "class": "/**\n * A {@code FileInputStream} obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p>{@code FileInputStream} is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * {@code FileReader}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileInputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   1.0\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.io.PrintWriter.write",
      "parameters": [
        "java.lang.String",
        "int",
        "int"
      ],
      "signature": "void java.io.PrintWriter.write(java.lang.String,int,int)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE79"
      ],
      "known": false,
      "body": "public void write(String s, int off, int len) {\r\n    try {\r\n        synchronized (lock) {\r\n            ensureOpen();\r\n            out.write(s, off, len);\r\n        }\r\n    } catch (InterruptedIOException x) {\r\n        Thread.currentThread().interrupt();\r\n    } catch (IOException x) {\r\n        trouble = true;\r\n    }\r\n}",
      "javadoc": {
        "method": "/**\n * Writes a portion of a string.\n * @param s A String\n * @param off Offset from which to start writing characters\n * @param len Number of characters to write\n *\n * @throws  IndexOutOfBoundsException\n *          If the values of the {@code off} and {@code len} parameters\n *          cause the corresponding method of the underlying {@code Writer}\n *          to throw an {@code IndexOutOfBoundsException}\n */\n",
        "class": "Prints formatted representations of objects to a text-output stream. This class implements all of the `print` methods found in {@link PrintStream}. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams.\\n\\n<p> Unlike the {@link PrintStream} class, if automatic flushing is enabled it will be done only when one of the `println`, `printf`, or `format` methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character.\\n\\n<p> Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking {@link #checkError checkError()}.\\n\\n<p> This class always replaces malformed and unmappable character sequences with the charset's default replacement string. The {@linkplain java.nio.charset.CharsetEncoder} class should be used when more control over the encoding process is required.\\n\\n@author Frank Yellin\\n@author Mark Reinhold\\n@since 1.1"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.Object.<init>",
      "parameters": [],
      "signature": "void java.lang.Object.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [],
      "known": false,
      "body": "public Object() {\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a new object.\n */\n",
        "class": "/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @see     java.lang.Class\n * @since   1.0\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.ProcessBuilder.start",
      "parameters": [],
      "signature": "java.lang.Process java.lang.ProcessBuilder.start()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE77"
      ],
      "known": false,
      "body": "public Process start() throws IOException {\r\n    return start(redirects);\r\n}",
      "javadoc": {
        "method": "/**\n * Starts a new process using the attributes of this process builder.\n *\n * <p>The new process will\n * invoke the command and arguments given by {@link #command()},\n * in a working directory as given by {@link #directory()},\n * with a process environment as given by {@link #environment()}.\n *\n * <p>This method checks that the command is a valid operating\n * system command.  Which commands are valid is system-dependent,\n * but at the very least the command must be a non-empty list of\n * non-null strings.\n *\n * <p>A minimal set of system dependent environment variables may\n * be required to start a process on some operating systems.\n * As a result, the subprocess may inherit additional environment variable\n * settings beyond those in the process builder's {@link #environment()}.\n *\n * <p>If there is a security manager, its\n * {@link SecurityManager#checkExec checkExec}\n * method is called with the first component of this object's\n * {@code command} array as its argument. This may result in\n * a {@link SecurityException} being thrown.\n *\n * <p>Starting an operating system process is highly system-dependent.\n * Among the many things that can go wrong are:\n * <ul>\n * <li>The operating system program file was not found.\n * <li>Access to the program file was denied.\n * <li>The working directory does not exist.\n * <li>Invalid character in command argument, such as NUL.\n * </ul>\n *\n * <p>In such cases an exception will be thrown.  The exact nature\n * of the exception is system-dependent, but it will always be a\n * subclass of {@link IOException}.\n *\n * <p>If the operating system does not support the creation of\n * processes, an {@link UnsupportedOperationException} will be thrown.\n *\n * <p>Subsequent modifications to this process builder will not\n * affect the returned {@link Process}.\n *\n * @return a new {@link Process} object for managing the subprocess\n *\n * @throws NullPointerException\n *         if an element of the command list is null\n *\n * @throws IndexOutOfBoundsException\n *         if the command is an empty list (has size {@code 0})\n *\n * @throws SecurityException\n *         if a security manager exists and\n *         <ul>\n *\n *         <li>its\n *         {@link SecurityManager#checkExec checkExec}\n *         method doesn't allow creation of the subprocess, or\n *\n *         <li>the standard input to the subprocess was\n *         {@linkplain #redirectInput redirected from a file}\n *         and the security manager's\n *         {@link SecurityManager#checkRead(String) checkRead} method\n *         denies read access to the file, or\n *\n *         <li>the standard output or standard error of the\n *         subprocess was\n *         {@linkplain #redirectOutput redirected to a file}\n *         and the security manager's\n *         {@link SecurityManager#checkWrite(String) checkWrite} method\n *         denies write access to the file\n *\n *         </ul>\n *\n * @throws  UnsupportedOperationException\n *          If the operating system does not support the creation of processes.\n *\n * @throws IOException if an I/O error occurs\n *\n * @see Runtime#exec(String[], String[], java.io.File)\n */\n",
        "class": "This class is used to create operating system processes.\\n\\n<p>Each `ProcessBuilder` instance manages a collection of process attributes. The {@link #start()} method creates a new {@link Process} instance with those attributes. The {@link #start()} method can be invoked repeatedly from the same instance to create new subprocesses with identical or related attributes.\\n\\n<p> The {@link #startPipeline startPipeline} method can be invoked to create a pipeline of new processes that send the output of each process directly to the next process. Each process has the attributes of its respective ProcessBuilder.\\n\\n<p>Each process builder manages these process attributes:\\n\\n<ul>\\n<li>a *command*, a list of strings which signifies the external program file to be invoked and its arguments, if any. Which string lists represent a valid operating system command is system-dependent. For example, it is common for each conceptual argument to be an element in this list, but there are operating systems where programs are expected to tokenize command line strings themselves - on such a system a Java implementation might require commands to contain exactly two elements.\\n\\n<li>an *environment*, which is a system-dependent mapping from *variables* to *values*. The initial value is a copy of the environment of the current process (see {@link System#getenv()}).\\n\\n<li>a *working directory*. The default value is the current working directory of the current process, usually the directory named by the system property `user.dir`.\\n\\n<li><a id=\"redirect-input\">a source of *standard input*</a>. By default, the subprocess reads input from a pipe. Java code can access this pipe via the output stream returned by {@link Process#getOutputStream()}. However, standard input may be redirected to another source using {@link #redirectInput(Redirect) redirectInput}. In this case, {@link Process#getOutputStream()} will return a *null output stream*, for which:\\n<ul>\\n<li>the {@link OutputStream#write(int) write} methods always throw `IOException`\\n<li>the {@link OutputStream#close() close} method does nothing\\n</ul>\\n\\n<li><a id=\"redirect-output\">a destination for *standard output* and *standard error*</a>. By default, the subprocess writes standard output and standard error to pipes. Java code can access these pipes via the input streams returned by {@link Process#getInputStream()} and {@link Process#getErrorStream()}. However, standard output and standard error may be redirected to other destinations using {@link #redirectOutput(Redirect) redirectOutput} and {@link #redirectError(Redirect) redirectError}. In this case, {@link Process#getInputStream()} and/or {@link Process#getErrorStream()} will return a *null input stream*, for which:\\n<ul>\\n<li>the {@link InputStream#read() read} methods always return `-1`\\n<li>the {@link InputStream#available() available} method always returns `0`\\n<li>the {@link InputStream#close() close} method does nothing\\n</ul>\\n\\n<li>a *redirectErrorStream* property. Initially, this property is `false`, meaning that the standard output and error output of a subprocess are sent to two separate streams, which can be accessed using the {@link Process#getInputStream()} and {@link Process#getErrorStream()} methods.\\n\\n<p>If the value is set to `true`, then:\\n<ul>\\n<li>standard error is merged with the standard output and always sent to the same destination (this makes it easier to correlate error messages with the corresponding output)\\n<li>the common destination of standard error and standard output can be redirected using {@link #redirectOutput(Redirect) redirectOutput}\\n<li>any redirection set by the {@link #redirectError(Redirect) redirectError} method is ignored when creating a subprocess\\n<li>the stream returned from {@link Process#getErrorStream()} will always be a <a href=\"#redirect-output\">null input stream</a>\\n</ul>\\n\\n</ul>\\n\\n<p>Modifying a process builder's attributes will affect processes subsequently started by that object's {@link #start()} method, but will never affect previously started processes or the Java process itself.\\n\\n<p>Most error checking is performed by the {@link #start()} method. It is possible to modify the state of an object so that {@link #start()} will fail. For example, setting the command attribute to an empty list will not throw an exception unless {@link #start()} is invoked.\\n\\n<p><strong>Note that this class is not synchronized.</strong> If multiple threads access a `ProcessBuilder` instance concurrently, and at least one of the threads modifies one of the attributes structurally, it *must* be synchronized externally.\\n\\n<p>Starting a new process which uses the default working directory and environment is easy:\\n\\n<pre> `Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();`\\n</pre>\\n\\n<p>Here is an example that starts a process with a modified working directory and environment, and redirects standard output and error to be appended to a log file:\\n\\n<pre> `ProcessBuilder pb = new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\\nMap<String, String> env = pb.environment();\\nenv.put(\"VAR1\", \"myValue\");\\nenv.remove(\"OTHERVAR\");\\nenv.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\\npb.directory(new File(\"myDir\"));\\nFile log = new File(\"log\");\\npb.redirectErrorStream(true);\\npb.redirectOutput(Redirect.appendTo(log));\\nProcess p = pb.start();\\nassert pb.redirectInput() == Redirect.PIPE;\\nassert pb.redirectOutput().file() == log;\\nassert p.getInputStream().read() == -1;`\\n</pre>\\n\\n<p>To start a process with an explicit set of environment variables, first call {@link java.util.Map#clear() Map.clear()} before adding environment variables.\\n\\n<p>Unless otherwise noted, passing a `null` argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown.\\n\\n@author Martin Buchholz\\n@since 1.5"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.Process",
      "interface": false
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String",
        "java.lang.String[]"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String,java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": false,
      "body": "public Process exec(String command, String[] envp) throws IOException {\r\n    return exec(command, envp, null);\r\n}",
      "javadoc": {
        "method": "/**\n * Executes the specified string command in a separate process with the\n * specified environment.\n *\n * <p>This is a convenience method.  An invocation of the form\n * {@code exec(command, envp)}\n * behaves in exactly the same way as the invocation\n * {@link #exec(String, String[], File) exec}{@code (command, envp, null)}.\n *\n * @param   command   a specified system command.\n *\n * @param   envp      array of strings, each element of which\n *                    has environment variable settings in the format\n *                    <i>name</i>=<i>value</i>, or\n *                    {@code null} if the subprocess should inherit\n *                    the environment of the current process.\n *\n * @return  A new {@link Process} object for managing the subprocess\n *\n * @throws  SecurityException\n *          If a security manager exists and its\n *          {@link SecurityManager#checkExec checkExec}\n *          method doesn't allow creation of the subprocess\n *\n * @throws  IOException\n *          If an I/O error occurs\n *\n * @throws  NullPointerException\n *          If {@code command} is {@code null},\n *          or one of the elements of {@code envp} is {@code null}\n *\n * @throws  IllegalArgumentException\n *          If {@code command} is empty\n *\n * @see     #exec(String[], String[], File)\n * @see     ProcessBuilder\n */\n",
        "class": "Every Java application has a single instance of class `Runtime` that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the `getRuntime` method.\\n\\n<p> An application cannot create its own instance of this class.\\n\\n@see java.lang.Runtime#getRuntime()\\n@since 1.0"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.Process",
      "interface": false
    },
    {
      "name": "java.lang.Runtime.exec",
      "parameters": [
        "java.lang.String[]",
        "java.lang.String[]"
      ],
      "signature": "java.lang.Process java.lang.Runtime.exec(java.lang.String[],java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": false,
      "body": "public Process exec(String[] cmdarray, String[] envp) throws IOException {\r\n    return exec(cmdarray, envp, null);\r\n}",
      "javadoc": {
        "method": "/**\n * Executes the specified command and arguments in a separate process\n * with the specified environment.\n *\n * <p>This is a convenience method.  An invocation of the form\n * {@code exec(cmdarray, envp)}\n * behaves in exactly the same way as the invocation\n * {@link #exec(String[], String[], File) exec}{@code (cmdarray, envp, null)}.\n *\n * @param   cmdarray  array containing the command to call and\n *                    its arguments.\n *\n * @param   envp      array of strings, each element of which\n *                    has environment variable settings in the format\n *                    <i>name</i>=<i>value</i>, or\n *                    {@code null} if the subprocess should inherit\n *                    the environment of the current process.\n *\n * @return  A new {@link Process} object for managing the subprocess\n *\n * @throws  SecurityException\n *          If a security manager exists and its\n *          {@link SecurityManager#checkExec checkExec}\n *          method doesn't allow creation of the subprocess\n *\n * @throws  IOException\n *          If an I/O error occurs\n *\n * @throws  NullPointerException\n *          If {@code cmdarray} is {@code null},\n *          or one of the elements of {@code cmdarray} is {@code null},\n *          or one of the elements of {@code envp} is {@code null}\n *\n * @throws  IndexOutOfBoundsException\n *          If {@code cmdarray} is an empty array\n *          (has length {@code 0})\n *\n * @see     ProcessBuilder\n */\n",
        "class": "Every Java application has a single instance of class `Runtime` that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the `getRuntime` method.\\n\\n<p> An application cannot create its own instance of this class.\\n\\n@see java.lang.Runtime#getRuntime()\\n@since 1.0"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.Process",
      "interface": false
    },
    {
      "name": "java.lang.String.equals",
      "parameters": [
        "java.lang.Object"
      ],
      "signature": "boolean java.lang.String.equals(java.lang.Object)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [],
      "known": false,
      "body": "public boolean equals(Object anObject) {\r\n    if (this == anObject) {\r\n        return true;\r\n    }\r\n    return (anObject instanceof String aString) && (!COMPACT_STRINGS || this.coder == aString.coder) && StringLatin1.equals(value, aString.value);\r\n}",
      "javadoc": {
        "method": "/**\n * Compares this string to the specified object.  The result is {@code\n * true} if and only if the argument is not {@code null} and is a {@code\n * String} object that represents the same sequence of characters as this\n * object.\n *\n * <p>For finer-grained String comparison, refer to\n * {@link java.text.Collator}.\n *\n * @param  anObject\n *         The object to compare this {@code String} against\n *\n * @return  {@code true} if the given object represents a {@code String}\n *          equivalent to this string, {@code false} otherwise\n *\n * @see  #compareTo(String)\n * @see  #equalsIgnoreCase(String)\n */\n",
        "class": "The `String` class represents character strings. All string literals in Java programs, such as `\"abc\"`, are implemented as instances of this class.\\n\\n<p> Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:\\n\\n<blockquote><pre>\\nString str = \"abc\";\\n</pre></blockquote>\\n\\n<p> is equivalent to:\\n\\n<blockquote><pre>\\nchar data[] = {'a', 'b', 'c'};\\nString str = new String(data);\\n</pre></blockquote>\\n\\n<p> Here are some more examples of how strings can be used:\\n\\n<blockquote><pre>\\nSystem.out.println(\"abc\");\\nString cde = \"cde\";\\nSystem.out.println(\"abc\" + cde);\\nString c = \"abc\".substring(2, 3);\\nString d = cde.substring(1, 2);\\n</pre></blockquote>\\n\\n<p> The class `String` includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class.\\n\\n<p> The Java language provides special support for the string concatenation operator (`+`), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see *The Java Language Specification*.\\n\\n<p> Unless otherwise noted, passing a `null` argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown.\\n\\n<p> A `String` represents a string in the UTF-16 format in which *supplementary characters* are represented by *surrogate pairs* (see the section <a href=\"Character.html#unicode\">Unicode Character Representations</a> in the `Character` class for more information). Index values refer to `char` code units, so a supplementary character uses two positions in a `String`.\\n\\n<p> The `String` class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., `char` values).\\n\\n<p> Unless otherwise noted, methods for comparing Strings do not take locale into account. The {@link java.text.Collator} class provides methods for finer-grain, locale-sensitive String comparison.\\n\\n@implNote The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the compiler ultimately conforms to *The Java Language Specification*. For example, the `javac` compiler may implement the operator with `StringBuffer`, `StringBuilder`, or `java.lang.invoke.StringConcatFactory` depending on the JDK version. The implementation of string conversion is typically through the method `toString`, defined by `Object` and inherited by all classes in Java.\\n\\n@author Lee Boynton\\n@author Arthur van Hoff\\n@author Martin Buchholz\\n@author Ulf Zibis\\n@see java.lang.Object#toString()\\n@see java.lang.StringBuffer\\n@see java.lang.StringBuilder\\n@see java.nio.charset.Charset\\n@since 1.0\\n@jls 15.18.1 String Concatenation Operator +"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "boolean",
      "interface": false
    },
    {
      "name": "java.lang.StringBuilder.<init>",
      "parameters": [],
      "signature": "void java.lang.StringBuilder.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [],
      "known": false,
      "body": "public StringBuilder() {\r\n    super(16);\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a string builder with no characters in it and an\n * initial capacity of 16 characters.\n */\n",
        "class": "/**\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @apiNote\n * {@code StringBuilder} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuilder}\n * is inconsistent with equals. Care should be exercised if {@code StringBuilder}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.StringBuilder.<init>",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "void java.lang.StringBuilder.<init>(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "public StringBuilder(String str) {\r\n    super(str);\r\n}",
      "javadoc": {
        "method": "/**\n * Constructs a string builder initialized to the contents of the\n * specified string. The initial capacity of the string builder is\n * {@code 16} plus the length of the string argument.\n *\n * @param   str   the initial contents of the buffer.\n */\n",
        "class": "/**\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @apiNote\n * {@code StringBuilder} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuilder}\n * is inconsistent with equals. Care should be exercised if {@code StringBuilder}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.StringBuilder.replace",
      "parameters": [
        "int",
        "int",
        "java.lang.String"
      ],
      "signature": "java.lang.StringBuilder java.lang.StringBuilder.replace(int,int,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "public StringBuilder replace(int start, int end, String str) {\r\n    super.replace(start, end, str);\r\n    return this;\r\n}",
      "javadoc": {
        "method": "/**\n * @throws StringIndexOutOfBoundsException {@inheritDoc}\n */\n",
        "class": "/**\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @apiNote\n * {@code StringBuilder} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuilder}\n * is inconsistent with equals. Care should be exercised if {@code StringBuilder}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.StringBuilder",
      "interface": false
    },
    {
      "name": "java.sql.PreparedStatement.executeQuery",
      "parameters": [],
      "signature": "java.sql.ResultSet java.sql.PreparedStatement.executeQuery()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": " abstract ResultSet executeQuery() throws SQLException {}",
      "javadoc": {
        "method": "/**\n * Executes the SQL query in this {@code PreparedStatement} object\n * and returns the {@code ResultSet} object generated by the query.\n *\n * @return a {@code ResultSet} object that contains the data produced by the\n *         query; never {@code null}\n * @throws SQLException if a database access error occurs;\n * this method is called on a closed  {@code PreparedStatement} or the SQL\n *            statement does not return a {@code ResultSet} object\n * @throws SQLTimeoutException when the driver has determined that the\n * timeout value that was specified by the {@code setQueryTimeout}\n * method has been exceeded and has at least attempted to cancel\n * the currently running {@code Statement}\n */\n",
        "class": "/**\n * An object that represents a precompiled SQL statement.\n * <P>A SQL statement is precompiled and stored in a\n * {@code PreparedStatement} object. This object can then be used to\n * efficiently execute this statement multiple times.\n *\n * <P><B>Note:</B> The setter methods ({@code setShort}, {@code setString},\n * and so on) for setting IN parameter values\n * must specify types that are compatible with the defined SQL type of\n * the input parameter. For instance, if the IN parameter has SQL type\n * {@code INTEGER}, then the method {@code setInt} should be used.\n *\n * <p>If arbitrary parameter type conversions are required, the method\n * {@code setObject} should be used with a target SQL type.\n * <P>\n * In the following example of setting a parameter, {@code con} represents\n * an active connection:\n * <pre>{@code\n *   BigDecimal sal = new BigDecimal(\"153833.00\");\n *   PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES\n *                                     SET SALARY = ? WHERE ID = ?\");\n *   pstmt.setBigDecimal(1, sal);\n *   pstmt.setInt(2, 110592);\n * }</pre>\n *\n * @see Connection#prepareStatement\n * @see ResultSet\n * @since 1.1\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.sql.ResultSet",
      "interface": true
    },
    {
      "name": "java.sql.PreparedStatement.setString",
      "parameters": [
        "int",
        "java.lang.String"
      ],
      "signature": "void java.sql.PreparedStatement.setString(int,java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": " abstract void setString(int parameterIndex, String x) throws SQLException {}",
      "javadoc": {
        "method": "/**\n * Sets the designated parameter to the given Java {@code String} value.\n * The driver converts this\n * to an SQL {@code VARCHAR} or {@code LONGVARCHAR} value\n * (depending on the argument's\n * size relative to the driver's limits on {@code VARCHAR} values)\n * when it sends it to the database.\n *\n * @param parameterIndex the first parameter is 1, the second is 2, ...\n * @param x the parameter value\n * @throws SQLException if parameterIndex does not correspond to a parameter\n * marker in the SQL statement; if a database access error occurs or\n * this method is called on a closed {@code PreparedStatement}\n */\n",
        "class": "/**\n * An object that represents a precompiled SQL statement.\n * <P>A SQL statement is precompiled and stored in a\n * {@code PreparedStatement} object. This object can then be used to\n * efficiently execute this statement multiple times.\n *\n * <P><B>Note:</B> The setter methods ({@code setShort}, {@code setString},\n * and so on) for setting IN parameter values\n * must specify types that are compatible with the defined SQL type of\n * the input parameter. For instance, if the IN parameter has SQL type\n * {@code INTEGER}, then the method {@code setInt} should be used.\n *\n * <p>If arbitrary parameter type conversions are required, the method\n * {@code setObject} should be used with a target SQL type.\n * <P>\n * In the following example of setting a parameter, {@code con} represents\n * an active connection:\n * <pre>{@code\n *   BigDecimal sal = new BigDecimal(\"153833.00\");\n *   PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES\n *                                     SET SALARY = ? WHERE ID = ?\");\n *   pstmt.setBigDecimal(1, sal);\n *   pstmt.setInt(2, 110592);\n * }</pre>\n *\n * @see Connection#prepareStatement\n * @see ResultSet\n * @since 1.1\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": true
    },
    {
      "name": "java.sql.PreparedStatement.execute",
      "parameters": [],
      "signature": "boolean java.sql.PreparedStatement.execute()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": " abstract boolean execute() throws SQLException {}",
      "javadoc": {
        "method": "/**\n * Executes the SQL statement in this {@code PreparedStatement} object,\n * which may be any kind of SQL statement.\n * Some prepared statements return multiple results; the {@code execute}\n * method handles these complex statements as well as the simpler\n * form of statements handled by the methods {@code executeQuery}\n * and {@code executeUpdate}.\n * <P>\n * The {@code execute} method returns a {@code boolean} to\n * indicate the form of the first result.  You must call either the method\n * {@code getResultSet} or {@code getUpdateCount}\n * to retrieve the result; you must call {@code getMoreResults} to\n * move to any subsequent result(s).\n *\n * @return {@code true} if the first result is a {@code ResultSet}\n *         object; {@code false} if the first result is an update\n *         count or there is no result\n * @throws SQLException if a database access error occurs;\n * this method is called on a closed {@code PreparedStatement}\n * or an argument is supplied to this method\n * @throws SQLTimeoutException when the driver has determined that the\n * timeout value that was specified by the {@code setQueryTimeout}\n * method has been exceeded and has at least attempted to cancel\n * the currently running {@code Statement}\n * @see Statement#execute\n * @see Statement#getResultSet\n * @see Statement#getUpdateCount\n * @see Statement#getMoreResults\n */\n",
        "class": "/**\n * An object that represents a precompiled SQL statement.\n * <P>A SQL statement is precompiled and stored in a\n * {@code PreparedStatement} object. This object can then be used to\n * efficiently execute this statement multiple times.\n *\n * <P><B>Note:</B> The setter methods ({@code setShort}, {@code setString},\n * and so on) for setting IN parameter values\n * must specify types that are compatible with the defined SQL type of\n * the input parameter. For instance, if the IN parameter has SQL type\n * {@code INTEGER}, then the method {@code setInt} should be used.\n *\n * <p>If arbitrary parameter type conversions are required, the method\n * {@code setObject} should be used with a target SQL type.\n * <P>\n * In the following example of setting a parameter, {@code con} represents\n * an active connection:\n * <pre>{@code\n *   BigDecimal sal = new BigDecimal(\"153833.00\");\n *   PreparedStatement pstmt = con.prepareStatement(\"UPDATE EMPLOYEES\n *                                     SET SALARY = ? WHERE ID = ?\");\n *   pstmt.setBigDecimal(1, sal);\n *   pstmt.setInt(2, 110592);\n * }</pre>\n *\n * @see Connection#prepareStatement\n * @see ResultSet\n * @since 1.1\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "boolean",
      "interface": true
    },
    {
      "name": "java.sql.Statement.executeBatch",
      "parameters": [],
      "signature": "int[] java.sql.Statement.executeBatch()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE89"
      ],
      "known": false,
      "body": " abstract int[] executeBatch() throws SQLException {}",
      "javadoc": {
        "method": "/**\n * Submits a batch of commands to the database for execution and\n * if all commands execute successfully, returns an array of update counts.\n * The {@code int} elements of the array that is returned are ordered\n * to correspond to the commands in the batch, which are ordered\n * according to the order in which they were added to the batch.\n * The elements in the array returned by the method {@code executeBatch}\n * may be one of the following:\n * <OL>\n * <LI>A number greater than or equal to zero -- indicates that the\n * command was processed successfully and is an update count giving the\n * number of rows in the database that were affected by the command's\n * execution\n * <LI>A value of {@code SUCCESS_NO_INFO} -- indicates that the command was\n * processed successfully but that the number of rows affected is\n * unknown\n * <P>\n * If one of the commands in a batch update fails to execute properly,\n * this method throws a {@code BatchUpdateException}, and a JDBC\n * driver may or may not continue to process the remaining commands in\n * the batch.  However, the driver's behavior must be consistent with a\n * particular DBMS, either always continuing to process commands or never\n * continuing to process commands.  If the driver continues processing\n * after a failure, the array returned by the method\n * {@code BatchUpdateException.getUpdateCounts}\n * will contain as many elements as there are commands in the batch, and\n * at least one of the elements will be the following:\n *\n * <LI>A value of {@code EXECUTE_FAILED} -- indicates that the command failed\n * to execute successfully and occurs only if a driver continues to\n * process commands after a command fails\n * </OL>\n * <P>\n * The possible implementations and return values have been modified in\n * the Java 2 SDK, Standard Edition, version 1.3 to\n * accommodate the option of continuing to process commands in a batch\n * update after a {@code BatchUpdateException} object has been thrown.\n *\n * @return an array of update counts containing one element for each\n * command in the batch.  The elements of the array are ordered according\n * to the order in which commands were added to the batch.\n * @throws SQLException if a database access error occurs,\n * this method is called on a closed {@code Statement} or the\n * driver does not support batch statements. Throws {@link BatchUpdateException}\n * (a subclass of {@code SQLException}) if one of the commands sent to the\n * database fails to execute properly or attempts to return a result set.\n * @throws SQLTimeoutException when the driver has determined that the\n * timeout value that was specified by the {@code setQueryTimeout}\n * method has been exceeded and has at least attempted to cancel\n * the currently running {@code Statement}\n *\n * @see #addBatch\n * @see DatabaseMetaData#supportsBatchUpdates\n * @since 1.2\n */\n",
        "class": "/**\n * <P>The object used for executing a static SQL statement\n * and returning the results it produces.\n * <P>\n * By default, only one {@code ResultSet} object per {@code Statement}\n * object can be open at the same time. Therefore, if the reading of one\n * {@code ResultSet} object is interleaved\n * with the reading of another, each must have been generated by\n * different {@code Statement} objects. All execution methods in the\n * {@code Statement} interface implicitly close a current\n * {@code ResultSet} object of the statement if an open one exists.\n *\n * @see Connection#createStatement\n * @see ResultSet\n * @since 1.1\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "int[]",
      "interface": true
    },
    {
      "name": "javax.xml.xpath.XPathExpression.evaluate",
      "parameters": [
        "java.lang.Object",
        "javax.xml.namespace.QName"
      ],
      "signature": "java.lang.Object javax.xml.xpath.XPathExpression.evaluate(java.lang.Object,javax.xml.namespace.QName)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE643"
      ],
      "known": false,
      "body": "public abstract Object evaluate(Object item, QName returnType) throws XPathExpressionException {}",
      "javadoc": {
        "method": "/**\n * Evaluate the compiled XPath expression in the specified context and return the result as the specified type.\n *\n * <p>See <a href=\"#XPathExpression-evaluation\">Evaluation of XPath Expressions</a> for context item evaluation,\n * variable, function and QName resolution and return type conversion.\n *\n * <p>\n * The parameter {@code item} represents the context the XPath expression\n * will be operated on. The type of the context is implementation-dependent.\n * If the value is {@code null}, the operation must have no dependency on\n * the context, otherwise an XPathExpressionException will be thrown.\n *\n * @implNote\n * The type of the context is usually {@link org.w3c.dom.Node}.\n *\n * @param item The context the XPath expression will be evaluated in.\n * @param returnType The result type expected to be returned by the XPath expression.\n *\n * @return The {@code Object} that is the result of evaluating the expression and converting the result to\n *   {@code returnType}.\n *\n * @throws XPathExpressionException If the expression cannot be evaluated.\n * @throws IllegalArgumentException If {@code returnType} is not one of the types defined in {@link XPathConstants}.\n * @throws NullPointerException If {@code returnType} is {@code null}.\n */\n",
        "class": "/**\n * {@code XPathExpression} provides access to compiled XPath expressions.\n * The XPath evaluation is affected by the factors described in the following table.\n *\n * <a id=\"XPathExpression-evaluation\"></a>\n * <table class=\"striped\">\n *    <caption>Evaluation of XPath Expressions</caption>\n *    <thead>\n *      <tr>\n *        <th scope=\"col\">Factor</th>\n *        <th scope=\"col\">Behavior</th>\n *      </tr>\n *    </thead>\n *    <tbody>\n *    <tr>\n *      <th scope=\"row\">context</th>\n *      <td>\n *        The type of the context is implementation-dependent. If the value is\n *        null, the operation must have no dependency on the context, otherwise\n *        an XPathExpressionException will be thrown.\n *\n *        For the purposes of evaluating XPath expressions, a DocumentFragment\n *        is treated like a Document node.\n *      </td>\n *    </tr>\n *    <tr>\n *      <th scope=\"row\">variables</th>\n *      <td>\n *        If the expression contains a variable reference, its value will be found through the {@link XPathVariableResolver}.\n *        An {@link XPathExpressionException} is raised if the variable resolver is undefined or\n *        the resolver returns {@code null} for the variable.\n *        The value of a variable must be immutable through the course of any single evaluation.\n *      </td>\n *    </tr>\n *    <tr>\n *      <th scope=\"row\">functions</th>\n *      <td>\n *        If the expression contains a function reference, the function will be found through the {@link XPathFunctionResolver}.\n *        An {@link XPathExpressionException} is raised if the function resolver is undefined or\n *        the function resolver returns {@code null} for the function.\n *      </td>\n *    </tr>\n *    <tr>\n *      <th scope=\"row\">QNames</th>\n *      <td>\n *        QNames in the expression are resolved against the XPath namespace context.\n *      </td>\n *    </tr>\n *    <tr>\n *      <th scope=\"row\">result</th>\n *      <td>\n *        This result of evaluating an expression is converted to an instance of the desired return type.\n *        Valid return types are defined in {@link XPathConstants}.\n *        Conversion to the return type follows XPath conversion rules.\n *      </td>\n *    </tr>\n *   </tbody>\n * </table>\n *\n * <p>An XPath expression is not thread-safe and not reentrant.\n * In other words, it is the application's responsibility to make\n * sure that one {@link XPathExpression} object is not used from\n * more than one thread at any given time, and while the {@code evaluate}\n * method is invoked, applications may not recursively call\n * the {@code evaluate} method.\n *\n * @author  Norman Walsh\n * @author  Jeff Suttor\n * @see <a href=\"http://www.w3.org/TR/xpath#section-Expressions\">XML Path Language (XPath) Version 1.0, Expressions</a>\n * @since 1.5\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.Object",
      "interface": true
    },
    {
      "name": "org.owasp.esapi.ESAPI.encoder",
      "parameters": [],
      "signature": "org.owasp.esapi.Encoder org.owasp.esapi.ESAPI.encoder()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [],
      "known": false,
      "body": "public static Encoder encoder() {\r\n    return ObjFactory.make(securityConfiguration().getEncoderImplementation(), \"Encoder\");\r\n}",
      "javadoc": {
        "method": "/**\n * The ESAPI Encoder is primarilly used to provide <i>output</i> encoding to\n * prevent Cross-Site Scripting (XSS).\n * @return the current ESAPI Encoder object being used to encode and decode data for this application.\n */\n",
        "class": "/**\n * ESAPI locator class is provided to make it easy to gain access to the current ESAPI classes in use.\n * Use the set methods to override the reference implementations with instances of any custom ESAPI implementations.\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "esapi-2.5.2.0-sources.jar",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "org.owasp.esapi.Encoder",
      "interface": false
    },
    {
      "name": "org.owasp.esapi.Encoder.encodeForHTML",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "java.lang.String org.owasp.esapi.Encoder.encodeForHTML(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [
      ],
      "known": false,
      "body": " abstract String encodeForHTML(String untrustedData) {}",
      "javadoc": {
        "method": "/**\n * Encode data for use in HTML using HTML entity encoding\n * <p>\n * Note that the following characters:\n * 00-08, 0B-0C, 0E-1F, and 7F-9F\n * <p>cannot be used in HTML.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Character_encodings_in_HTML\">HTML Encodings [wikipedia.org]</a>\n * @see <a href=\"http://www.w3.org/TR/html4/sgml/sgmldecl.html\">SGML Specification [w3.org]</a>\n * @see <a href=\"http://www.w3.org/TR/REC-xml/#charsets\">XML Specification [w3.org]</a>\n *\n * @param untrustedData\n *      the untrusted data to output encode for HTML\n *\n * @return the untrusted data safely output encoded for use in a HTML\n */\n",
        "class": "/**\n * The {@code Encoder} interface contains a number of methods for decoding input and encoding output\n * so that it will be safe for a variety of interpreters. Its primary use is to\n * provide <i>output</i> encoding to prevent XSS.\n * <p>\n * To prevent double-encoding, callers should make sure input does not already contain encoded characters\n * by calling one of the {@code canonicalize()} methods. Validator implementations should call\n * {@code canonicalize()} on user input <b>before</b> validating to prevent encoded attacks.\n * </p><p>\n * All of the methods <b>must</b> use an \"allow list\" or \"positive\" security model rather\n * than a \"deny list\" or \"negative\" security model.  For the encoding methods, this means that\n * all characters should be encoded, except for a specific list of \"immune\" characters that are\n * known to be safe.\n * </p><p>\n * The {@code Encoder} performs two key functions, encoding (also referred to as \"escaping\" in this Javadoc)\n * and decoding. These functions rely on a set of codecs that can be found in the\n * {@code org.owasp.esapi.codecs} package. These include:\n * <ul>\n * <li>CSS Escaping</li>\n * <li>HTMLEntity Encoding</li>\n * <li>JavaScript Escaping</li>\n * <li>MySQL Database Escaping</li>\n * <li>Oracle Database Escaping</li>\n * <li>JSON Escaping</li>\n * <li>Percent Encoding (aka URL Encoding)</li>\n * <li>Unix Shell Escaping</li>\n * <li>VBScript Escaping</li>\n * <li>Windows Cmd Escaping</li>\n * <li>LDAP Escaping</li>\n * <li>XML and XML Attribute Encoding</li>\n * <li>XPath Escaping</li>\n * <li>Base64 Encoding</li>\n * </ul>\n * </p><p>\n * The primary use of ESAPI {@code Encoder} is to prevent XSS vulnerabilities by\n * providing output encoding using the various \"encodeFor<i>XYZ</i>()\" methods,\n * where <i>XYZ</i> is one of CSS, HTML, HTMLAttribute, JavaScript, or URL. When\n * using the ESAPI output encoders, it is important that you use the one for the\n * <b>appropriate context</b> where the output will be rendered. For example, it\n * the output appears in an JavaScript context, you should use {@code encodeForJavaScript}\n * (note this includes all of the DOM JavaScript event handler attributes such as\n * 'onfocus', 'onclick', 'onload', etc.). If the output would be rendered in an HTML\n * attribute context (with the exception of the aforementioned 'onevent' type event\n * handler attributes), you would use {@code encodeForHTMLAttribute}. If you are\n * encoding anywhere a URL is expected (e.g., a 'href' attribute for for &lt;a&gt; or\n * a 'src' attribute on a &lt;img&gt; tag, etc.), then you should use use {@code encodeForURL}.\n * If encoding CSS, then use {@code encodeForCSS}. Etc. This is because there are\n * different escaping requirements for these different contexts. Developers who are\n * new to ESAPI or to defending against XSS vulnerabilities are highly encouraged to\n * <i>first</i> read the\n * <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener noreferreer\">\n * OWASP Cross-Site Scripting Prevention Cheat Sheet</a>.\n * </p><p>\n * Note that in addition to these encoder methods, ESAPI also provides a JSP Tag\n * Library ({@code META-INF/esapi.tld}) in the ESAPI jar. This allows one to use\n * the more convenient JSP tags in JSPs. These JSP tags are simply wrappers for the\n * various these \"encodeForX<i>XYZ</i>()\" method docmented in this {@code Encoder}\n * interface.\n * </p><p>\n * <b>Some important final words:</b>\n * <ul>\n * <li><b>Where to output encode for HTML rendering:</b>\n * Knowing <i>where</i> to place the output encoding in your code\n * is just as important as knowing which context (HTML, HTML attribute, CSS,\n * JavaScript, or URL) to use for the output encoding and surprisingly the two\n * are often related. In general, output encoding should be done just prior to the\n * output being rendered (that is, as close to the 'sink' as possible) because that\n * is what determines what the appropriate context is for the output encoding.\n * In fact, doing output encoding on untrusted data that is stored and to\n * be used later--whether stored in an HTTP session or in a database--is almost\n * always considered an anti-pattern. An example of this is one gathers and\n * stores some untrusted data item such as an email address from a user. A\n * developer thinks \"let's output encode this and store the encoded data in\n * the database, thus making the untrusted data safe to use all the time, thus\n * saving all of us developers all the encoding troubles later on\". On the surface,\n * that sounds like a reasonable approach. The problem is how to know what\n * output encoding to use, not only for now, but for all possible <i>future</i>\n * uses? It might be that the current application code base is only using it in\n * an HTML context that is displayed in an HTML report or shown in an HTML\n * context in the user's profile. But what if it is later used in a {@code mailto:} URL?\n * Then instead of HTML encoding, it would need to have URL encoding. Similarly,\n * what if there is a later switch made to use AJAX and the untrusted email\n * address gets used in a JavaScript context? The complication is that even if\n * you know with certainty today all the ways that an untrusted data item is\n * used in your application, it is generally impossible to predict all the\n * contexts that it may be used in the future, not only in your application, but\n * in other applications that could access that data in the database.\n * </li>\n * <li><b>Avoiding multiple <i>nested</i> contexts:</b>\n * A really tricky situation to get correct is when there are multiple nested\n * encoding contexts. But far, the most common place this seems to come up is\n * untrusted URLs used in JavaScript. How should you handle that? Well,\n * the best way is to rewrite your code to avoid it!  An example of\n * this that is well worth reading may be found at\n * <a href=\"https://lists.owasp.org/pipermail/esapi-dev/2012-March/002090\"\n * target=\"_blank\" rel=\"noopener noreferrer\">ESAPI-DEV mailing list archives:\n * URL encoding within JavaScript</a>. Be sure to read the entire thread.\n * The question itself is too nuanced to be answered in Javadoc, but now,\n * hopefully you are at least aware of the potential pitfalls. There is little\n * available research or examples on how to do output encoding when multiple\n * mixed encodings are required, although one that you may find useful is\n * <a href=\"https://arxiv.org/pdf/1804.01862.pdf\" target=\"_blank\"\n * rel=\"noopener noreferrer\">\n * Automated Detecting and Repair of Cross-SiteScripting Vulnerabilities through Unit Testing</a>\n * It at least discusses a few of the common errors involved in multiple mixed\n * encoding contexts.\n * </li><li><b>A word about unit testing:</b>\n * Unit testing this is hard. You may be satisfied with stopped after you have\n * tested against the ubiquitous XSS test case of\n * <pre>\n *      &lt;/script&gt;alert(1)&lt;/script&gt;\n * </pre>\n * or similar simplistic XSS attack payloads and if that is properly encoded\n * (or, you don't see an alert box popped in your browser), you consider it\n * \"problem fixed\", and consider the unit testing sufficient. Unfortunately, that\n * minimalist testing may not always detect places where you used the wrong output\n * encoder. You need to do better. Fortunately, the aforementioned link,\n * <a href=\"https://arxiv.org/pdf/1804.01862.pdf\" target=\"_blank\"\n * rel=\"noopener noreferrer\">\n * Automated Detecting and Repair of Cross-SiteScripting Vulnerabilities through Unit Testing</a>\n * provides some insight on this. You may also wish to look at the\n * <a href=\"https://github.com/ESAPI/esapi-java-legacy/blob/develop/src/test/java/org/owasp/esapi/reference/EncoderTest.java\"\n * target=\"_blank\" rel=\"noopener noreferrer\">ESAPI Encoder JUnittest cases</a> for ideas.\n * If you are really ambitious, an excellent resource for XSS attack patterns is\n * <a href=\"https://beefproject.com/\" target=\"_blank\" rel=\"noopener noreferrer\">BeEF - The Browser Exploitation Framework Project</a>.\n * </li>\n * </ul>\n *\n * @see <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">OWASP Cross-Site Scripting Prevention Cheat Sheet</a>\n * @see <a href=\"https://owasp.org/www-project-proactive-controls/v3/en/c4-encode-escape-data\">OWASP Proactive Controls: C4: Encode and Escape Data</a>\n * @see <a href=\"https://www.onwebsecurity.com/security/properly-encoding-and-escaping-for-the-web.html\" target=\"_blank\" rel=\"noopener noreferrer\">Properly encoding and escaping for the web</a>\n * @author Jeff Williams (jeff.williams .at. owasp.org)\n * @since June 1, 2007\n */\n"
      },"artifacts": {
        "identifier": null,
        "sources": "esapi-2.5.2.0-sources.jar",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "java.lang.String",
      "interface": true
    },
    {
      "name": "javax.servlet.http.HttpServlet.<init>",
      "parameters": [],
      "signature": "void javax.servlet.http.HttpServlet.<init>()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
      ],
      "cwe": [],
      "known": false,
      "body": "public HttpServlet() {\r\n}",
      "javadoc": {
        "method": "Does nothing, because this is an abstract class.",
        "class": "Provides an abstract class to be subclassed to create an HTTP servlet suitable for a Web site. A subclass of HttpServlet must override at least one method, usually one of these:\\n\\ndoGet, if the servlet supports HTTP GET requests\\ndoPost, for HTTP POST requests\\ndoPut, for HTTP PUT requests\\ndoDelete, for HTTP DELETE requests\\ninit and destroy, to manage resources that are held for the life of the servlet\\ngetServletInfo, which the servlet uses to provide information about itself\\n\\nThere's almost no reason to override the service method. service handles standard HTTP requests by dispatching them to the handler methods for each HTTP request type (the doXXX methods listed above).\\n\\nLikewise, there's almost no reason to override the doOptions and doTrace methods.\\n\\nServlets typically run on multithreaded servers, so be aware that a servlet must handle concurrent requests and be careful to synchronize access to shared resources. Shared resources include in-memory data such as instance or class variables and external objects such as files, database connections, and network connections. See the Java Tutorial on Multithreaded Programming for more information on handling multiple threads in a Java program.\\n\\nAuthor:\\nVarious"
      },"artifacts": {
        "identifier": null,
        "sources": "javaee-api-7.0-sources.jar",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.ProcessBuilder.<init>",
      "parameters": [
        "java.lang.String[]"
      ],
      "signature": "void java.lang.ProcessBuilder.<init>(java.lang.String[])",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink",
        "propagator"
      ],
      "cwe": [
        "CWE78"
      ],
      "known": false,
      "body": "public ProcessBuilder(String... command) {\n        this.command = new ArrayList<>(command.length);\n        for (String arg : command)\n            this.command.add(arg);\n    }",
      "javadoc": {
        "method": "/**\n     * Constructs a process builder with the specified operating\n     * system program and arguments.  This is a convenience\n     * constructor that sets the process builder's command to a string\n     * list containing the same strings as the {@code command}\n     * array, in the same order.  It is not checked whether\n     * {@code command} corresponds to a valid operating system\n     * command.\n     *\n     * @param command a string array containing the program and its arguments\n     */",
        "class": "/**\n * This class is used to create operating system processes.\n *\n * <p>Each {@code ProcessBuilder} instance manages a collection\n * of process attributes.  The {@link #start()} method creates a new\n * {@link Process} instance with those attributes.  The {@link\n * #start()} method can be invoked repeatedly from the same instance\n * to create new subprocesses with identical or related attributes.\n * <p>\n * The {@link #startPipeline startPipeline} method can be invoked to create\n * a pipeline of new processes that send the output of each process\n * directly to the next process.  Each process has the attributes of\n * its respective ProcessBuilder.\n *\n * <p>Each process builder manages these process attributes:\n *\n * <ul>\n *\n * <li>a <i>command</i>, a list of strings which signifies the\n * external program file to be invoked and its arguments, if any.\n * Which string lists represent a valid operating system command is\n * system-dependent.  For example, it is common for each conceptual\n * argument to be an element in this list, but there are operating\n * systems where programs are expected to tokenize command line\n * strings themselves - on such a system a Java implementation might\n * require commands to contain exactly two elements.\n *\n * <li>an <i>environment</i>, which is a system-dependent mapping from\n * <i>variables</i> to <i>values</i>.  The initial value is a copy of\n * the environment of the current process (see {@link System#getenv()}).\n *\n * <li>a <i>working directory</i>.  The default value is the current\n * working directory of the current process, usually the directory\n * named by the system property {@code user.dir}.\n *\n * <li><a id=\"redirect-input\">a source of <i>standard input</i></a>.\n * By default, the subprocess reads input from a pipe.  Java code\n * can access this pipe via the output stream returned by\n * {@link Process#getOutputStream()}.  However, standard input may\n * be redirected to another source using\n * {@link #redirectInput(Redirect) redirectInput}.\n * In this case, {@link Process#getOutputStream()} will return a\n * <i>null output stream</i>, for which:\n *\n * <ul>\n * <li>the {@link OutputStream#write(int) write} methods always\n * throw {@code IOException}\n * <li>the {@link OutputStream#close() close} method does nothing\n * </ul>\n *\n * <li><a id=\"redirect-output\">a destination for <i>standard output</i>\n * and <i>standard error</i></a>.  By default, the subprocess writes standard\n * output and standard error to pipes.  Java code can access these pipes\n * via the input streams returned by {@link Process#getInputStream()} and\n * {@link Process#getErrorStream()}.  However, standard output and\n * standard error may be redirected to other destinations using\n * {@link #redirectOutput(Redirect) redirectOutput} and\n * {@link #redirectError(Redirect) redirectError}.\n * In this case, {@link Process#getInputStream()} and/or\n * {@link Process#getErrorStream()} will return a <i>null input\n * stream</i>, for which:\n *\n * <ul>\n * <li>the {@link InputStream#read() read} methods always return\n * {@code -1}\n * <li>the {@link InputStream#available() available} method always returns\n * {@code 0}\n * <li>the {@link InputStream#close() close} method does nothing\n * </ul>\n *\n * <li>a <i>redirectErrorStream</i> property.  Initially, this property\n * is {@code false}, meaning that the standard output and error\n * output of a subprocess are sent to two separate streams, which can\n * be accessed using the {@link Process#getInputStream()} and {@link\n * Process#getErrorStream()} methods.\n *\n * <p>If the value is set to {@code true}, then:\n *\n * <ul>\n * <li>standard error is merged with the standard output and always sent\n * to the same destination (this makes it easier to correlate error\n * messages with the corresponding output)\n * <li>the common destination of standard error and standard output can be\n * redirected using\n * {@link #redirectOutput(Redirect) redirectOutput}\n * <li>any redirection set by the\n * {@link #redirectError(Redirect) redirectError}\n * method is ignored when creating a subprocess\n * <li>the stream returned from {@link Process#getErrorStream()} will\n * always be a <a href=\"#redirect-output\">null input stream</a>\n * </ul>\n *\n * </ul>\n *\n * <p>Modifying a process builder's attributes will affect processes\n * subsequently started by that object's {@link #start()} method, but\n * will never affect previously started processes or the Java process\n * itself.\n *\n * <p>Most error checking is performed by the {@link #start()} method.\n * It is possible to modify the state of an object so that {@link\n * #start()} will fail.  For example, setting the command attribute to\n * an empty list will not throw an exception unless {@link #start()}\n * is invoked.\n *\n * <p><strong>Note that this class is not synchronized.</strong>\n * If multiple threads access a {@code ProcessBuilder} instance\n * concurrently, and at least one of the threads modifies one of the\n * attributes structurally, it <i>must</i> be synchronized externally.\n *\n * <p>Starting a new process which uses the default working directory\n * and environment is easy:\n *\n * <pre> {@code\n * Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();\n * }</pre>\n *\n * <p>Here is an example that starts a process with a modified working\n * directory and environment, and redirects standard output and error\n * to be appended to a log file:\n *\n * <pre> {@code\n * ProcessBuilder pb =\n *   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n * Map<String, String> env = pb.environment();\n * env.put(\"VAR1\", \"myValue\");\n * env.remove(\"OTHERVAR\");\n * env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n * pb.directory(new File(\"myDir\"));\n * File log = new File(\"log\");\n * pb.redirectErrorStream(true);\n * pb.redirectOutput(Redirect.appendTo(log));\n * Process p = pb.start();\n * assert pb.redirectInput() == Redirect.PIPE;\n * assert pb.redirectOutput().file() == log;\n * assert p.getInputStream().read() == -1;\n * }</pre>\n *\n * <p>To start a process with an explicit set of environment\n * variables, first call {@link java.util.Map#clear() Map.clear()}\n * before adding environment variables.\n *\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @author Martin Buchholz\n * @since 1.5\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "void",
      "interface": false
    },
    {
      "name": "java.lang.StringBuilder.length",
      "parameters": [],
      "signature": "int java.lang.StringBuilder.length()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "propagator"
      ],
      "cwe": [],
      "known": false,
      "body": "@Override\n    public int length() {\n        return count;\n    }",
      "javadoc": {
        "method": "/**\n     * Returns the length (character count).\n     *\n     * @return  the length of the sequence of characters currently\n     *          represented by this object\n     */",
        "class": "/**\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @apiNote\n * {@code StringBuilder} implements {@code Comparable} but does not override\n * {@link Object#equals equals}. Thus, the natural ordering of {@code StringBuilder}\n * is inconsistent with equals. Care should be exercised if {@code StringBuilder}\n * objects are used as keys in a {@code SortedMap} or elements in a {@code SortedSet}.\n * See {@link Comparable}, {@link java.util.SortedMap SortedMap}, or\n * {@link java.util.SortedSet SortedSet} for more information.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "jdk-17-src.zip",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "int",
      "interface": false
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getRequestDispatcher",
      "parameters": [
        "java.lang.String"
      ],
      "signature": "javax.servlet.RequestDispatcher javax.servlet.http.HttpServletRequest.getRequestDispatcher(java.lang.String)",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "sink"
      ],
      "cwe": [
        "CWE601",
        "CWE918"
      ],
      "known": false,
      "body": "public RequestDispatcher getRequestDispatcher(String path);",
      "javadoc": {
        "method": "/**\n     *\n     * Returns a {@link RequestDispatcher} object that acts as a wrapper for\n     * the resource located at the given path.  \n     * A <code>RequestDispatcher</code> object can be used to forward\n     * a request to the resource or to include the resource in a response.\n     * The resource can be dynamic or static.\n     *\n     * <p>The pathname specified may be relative, although it cannot extend\n     * outside the current servlet context.  If the path begins with \n     * a \"/\" it is interpreted as relative to the current context root.  \n     * This method returns <code>null</code> if the servlet container\n     * cannot return a <code>RequestDispatcher</code>.\n     *\n     * <p>The difference between this method and {@link\n     * ServletContext#getRequestDispatcher} is that this method can take a\n     * relative path.\n     *\n     * @param path a <code>String</code> specifying the pathname\n     * to the resource. If it is relative, it must be\n     * relative against the current servlet.\n     *\n     * @return a <code>RequestDispatcher</code> object that acts as a\n     * wrapper for the resource at the specified path,\n     * or <code>null</code> if the servlet container cannot\n     * return a <code>RequestDispatcher</code>\n     *\n     * @see RequestDispatcher\n     * @see ServletContext#getRequestDispatcher\n     */",
        "class": "/**\n *\n * Extends the {@link javax.servlet.ServletRequest} interface\n * to provide request information for HTTP servlets. \n *\n * <p>The servlet container creates an <code>HttpServletRequest</code> \n * object and passes it as an argument to the servlet's service\n * methods (<code>doGet</code>, <code>doPost</code>, etc).\n *\n *\n * @author \tVarious\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "javaee-api-7.0-sources.jar",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "javax.servlet.RequestDispatcher",
      "interface": true
    },
    {
      "name": "javax.servlet.http.HttpServletRequest.getInputStream",
      "parameters": [],
      "signature": "javax.servlet.ServletInputStream javax.servlet.http.HttpServletRequest.getInputStream()",
      "framework": "",
      "link": "",
      "comment": "",
      "discovery": "owasp-benchmark",
      "dataIn": {
        "parameters": [],
        "return": false
      },
      "dataOut": {
        "parameters": [],
        "return": false
      },
      "srm": [
        "source"
      ],
      "cwe": [
      ],
      "known": false,
      "body": "public ServletInputStream getInputStream() throws IOException;",
      "javadoc": {
        "method": "/**\n     * Retrieves the body of the request as binary data using\n     * a {@link ServletInputStream}.  Either this method or \n     * {@link #getReader} may be called to read the body, not both.\n     *\n     * @return a {@link ServletInputStream} object containing\n     * the body of the request\n     *\n     * @exception IllegalStateException if the {@link #getReader} method\n     * has already been called for this request\n     *\n     * @exception IOException if an input or output exception occurred\n     */",
        "class": "/**\n *\n * Extends the {@link javax.servlet.ServletRequest} interface\n * to provide request information for HTTP servlets. \n *\n * <p>The servlet container creates an <code>HttpServletRequest</code> \n * object and passes it as an argument to the servlet's service\n * methods (<code>doGet</code>, <code>doPost</code>, etc).\n *\n *\n * @author \tVarious\n */"
      },"artifacts": {
        "identifier": null,
        "sources": "javaee-api-7.0-sources.jar",
        "compiled": null
      },
      "usages": [
        {
          "path": "",
          "lineNumber": 0
        }
      ],
      "return": "javax.servlet.ServletInputStream",
      "interface": true
    }
  ]
}